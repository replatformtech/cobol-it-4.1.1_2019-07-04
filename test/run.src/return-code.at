### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003-2007 Keisuke Nishida
## Copyright (C) 2007 Roger While
## Copyright (C) 2008 Cobol-IT
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### Non-standard extensions

AT_SETUP([RETURN-CODE moving])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I             PIC 99 COMP.
       PROCEDURE        DIVISION.
           INITIALIZE RETURN-CODE.
           MOVE ZERO TO RETURN-CODE.
           MOVE 1 TO RETURN-CODE.
           MOVE RETURN-CODE TO I.
           DISPLAY I NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -w -o prog prog.cob])
AT_CHECK([./prog], [1], [01])

AT_CLEANUP


AT_SETUP([RETURN-CODE passing])

AT_DATA([mod1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      mod1.
       PROCEDURE        DIVISION.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           MOVE 1 TO RETURN-CODE.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([mod2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      mod2.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "mod1"
           END-CALL.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           CALL "mod2"
           END-CALL.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} mod1.cob])
AT_CHECK([${COMPILE_MODULE} mod2.cob])
AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [+000000000+000000001+000000001+000000000])

AT_CLEANUP

AT_SETUP([RETURN-CODE nested])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           MOVE 1 TO RETURN-CODE.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           CALL "mod1"
           END-CALL.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           MOVE ZERO TO RETURN-CODE.
           STOP RUN.
       PROGRAM-ID.      mod1.
       PROCEDURE        DIVISION.
           DISPLAY RETURN-CODE NO ADVANCING
           END-DISPLAY.
           MOVE 2 TO RETURN-CODE.
           EXIT PROGRAM.
       END PROGRAM mod1.
       END PROGRAM prog.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [+000000001+000000001+000000002])

AT_CLEANUP

AT_SETUP([EXIT PROGRAM RETURNING])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I             PIC 99 COMP.
       PROCEDURE        DIVISION.
           INITIALIZE RETURN-CODE.
           MOVE ZERO TO RETURN-CODE.
           MOVE 1 TO I.
           DISPLAY I NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM RETURNING I.
])

AT_CHECK([${COMPILE} -w -o prog prog.cob])
AT_CHECK([./prog], [1], [01])

AT_CLEANUP

AT_SETUP([GOBACK RETURNING])

AT_DATA([two.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. two.
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        WORKING-STORAGE SECTION.
        01 WS-RETURN-CODE PIC X(01).
        PROCEDURE DIVISION.
        A000-MAIN.
        MOVE 'E' to WS-RETURN-CODE.
        GOBACK RETURNING WS-RETURN-CODE.
])

AT_DATA([tree.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. tree.
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        LINKAGE SECTION.
        01 WS-RETURN-CODE PIC X(01).
        PROCEDURE DIVISION RETURNING WS-RETURN-CODE.
        A000-MAIN.
        MOVE 'F' to WS-RETURN-CODE.
        GOBACK .
])

AT_DATA([one.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. one.
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        WORKING-STORAGE SECTION.
        01 WS-RETURN-CODE PIC X(01).
        PROCEDURE DIVISION.
        A000-MAIN.
        CALL "two" returning WS-RETURN-CODE.
        display WS-RETURN-CODE.
        CALL "tree" returning WS-RETURN-CODE.
        display WS-RETURN-CODE.
        STOP RUN returning 0.
])

AT_CHECK([${COMPILE} -w one.cob two.cob tree.cob])
AT_CHECK([./one], [0], 
[E
F
])

AT_CLEANUP

AT_SETUP([CALL RETURNING ADDRESS OF LINKAGE FIELD])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      CALL_PROG.
       ENVIRONMENT    DIVISION .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WS-SIZE PIC 9(4)  VALUE 5.
        LINKAGE SECTION.
        01 Z-ADR GLOBAL PIC X(2) .

       PROCEDURE DIVISION.
            CALL "getString"  USING WS-SIZE
                RETURNING ADDRESS OF Z-ADR.
            IF ADDRESS OF Z-ADR NOT = NULL
                IF Z-ADR(1:WS-SIZE) = "Hello"
                    DISPLAY "OK"
                END-IF
            END-IF
       STOP RUN.
])
AT_DATA([funcs.c], [
        #include <strings.h>
        #include <stdio.h>

        char * mystr = NULL;

        char *getString(int size){
            if (mystr == NULL && size > 0) {
                mystr = strdup("Hello");
            }
            return mystr;
        }
])
AT_CHECK([${COMPILE} -o prog prog.cob funcs.c])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP


