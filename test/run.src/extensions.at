### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003-2007 Keisuke Nishida
## Copyright (C) 2007 Roger While
## Copyright (C) 2008-2009 Cobol-IT
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### Non-standard extensions


AT_SETUP([COMP-5])

AT_DATA([dump.c], [
#include <stdio.h>
int dump (unsigned char *data, int *p);
int dump (unsigned char *data, int *p)
{
  int i;
  if ( *p == 1 ) {
     for (i = 0; i < 4; i++)
       printf ("%02x", data[[i]]);
  } else {
       printf ("%8.8d", *((int *)data));
  }
  puts ("");
  return 0;
}
])

AT_CHECK([${COMPILE_MODULE} dump.c])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(9) VALUE 4660 COMP.
       01 X-2           PIC 9(9) VALUE 4660 COMP-5.
       PROCEDURE        DIVISION.
           CALL "dump" USING X-1 BY CONTENT 1
           END-CALL.
           CALL "dump" USING X-2 BY CONTENT 2
           END-CALL.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00001234
00004660
])

AT_CLEANUP


## H literal

AT_SETUP([Hexadecimal numeric literal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(8) VALUE H"012345".
       01 X-2           PIC 9(8) VALUE H"FFFFFF".
       PROCEDURE        DIVISION.
           DISPLAY X-1
           END-DISPLAY.
           DISPLAY X-2
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00074565
16777215
])

AT_CLEANUP

##fast op
AT_SETUP([FAST-OP sign])

AT_DATA([prog.cob], [
       IDENTIFICATION             DIVISION.
       PROGRAM-ID.                prog.
       ENVIRONMENT                DIVISION.
       CONFIGURATION              SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT          IS COMMA.
       INPUT-OUTPUT               SECTION.
       FILE-CONTROL.
       DATA                       DIVISION.
       FILE                       SECTION.
       WORKING-STORAGE            SECTION.
           01 VAL1                PIC S9(09)V99 COMP-3 VALUE -0,10.
           01 VAL2                PIC S9(09)V99 COMP-3 VALUE 13,49.
           01 RECH1               PIC S9(09)V99 COMP-3 VALUE ZEROES.
           01 SUM1                PIC S9(09)V99 COMP-3 VALUE ZEROES.
       PROCEDURE                  DIVISION.
           MOVE -0,10             TO RECH1.
           ADD RECH1              TO SUM1.
           DISPLAY SUM1.
           MOVE 13,49             TO RECH1.
           ADD RECH1              TO SUM1.
           DISPLAY SUM1.
           MOVE 0                 TO SUM1.
           MOVE VAL1              TO RECH1.
           ADD RECH1              TO SUM1.
           DISPLAY SUM1.

           MOVE VAL2             TO RECH1.
           ADD RECH1              TO SUM1.
           DISPLAY  SUM1.

           STOP RUN.
])

AT_CHECK([${COMPILE} -fno-fast-op -o prog prog.cob])
AT_CHECK([./prog], [0],
[-000000000,10
+000000013,39
-000000000,10
+000000013,39
])
AT_CHECK([${COMPILE} -ffast-op -o prog prog.cob])
AT_CHECK([./prog], [0],
[-000000000,10
+000000013,39
-000000000,10
+000000013,39
])

AT_CLEANUP

## Expression

AT_SETUP([Semi-parenthesized condition])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 1 = (1 OR 2)
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


## ADDRESS OF

AT_SETUP([ADDRESS OF])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC X(3) VALUE "X-1".
       01 X-2           PIC X(3) VALUE "X-2".
       01 G.
         02 PTR-1       USAGE POINTER VALUE NULL.
         02 PTR-2       USAGE POINTER VALUE NULL.
       LINKAGE          SECTION.
       01 Y             PIC X(3).
       PROCEDURE        DIVISION.
         SET ADDRESS OF Y TO ADDRESS OF X-1.
         DISPLAY Y
         END-DISPLAY.
         SET PTR-1 TO ADDRESS OF X-2.
         SET PTR-2 TO PTR-1
         SET ADDRESS OF Y TO PTR-2.
         DISPLAY Y
         END-DISPLAY.
         INITIALIZE PTR-1.
         IF PTR-1 = NULL
           DISPLAY "OK"
           END-DISPLAY
         ELSE
           DISPLAY "NG"
           END-DISPLAY
         END-IF.
         SET ADDRESS OF Y TO NULL.
         IF PTR-1 = ADDRESS OF Y
           DISPLAY "OK"
           END-DISPLAY
         ELSE
           DISPLAY "NG"
           END-DISPLAY
         END-IF.
         IF ADDRESS OF Y = PTR-1
           DISPLAY "OK"
           END-DISPLAY
         ELSE
           DISPLAY "NG"
           END-DISPLAY
         END-IF.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[X-1
X-2
OK
OK
OK
])

AT_CLEANUP



## LENGTH OF

AT_SETUP([LENGTH OF])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(2).
       01 G.
         02 Y           PIC X(2) OCCURS 10.
       01 L             PIC 9(4).
       01 I             PIC 9(2) VALUE 10.
       01 RECB-TYP IS TYPEDEF.
	       05 XLPATH PIC X(200).
	       05 XLEBENE PIC 9(5).
	       05 BITS PIC 1(9) USAGE BIT. 
       01 RECB USAGE RECB-TYP .
       01 REC-TYP IS TYPEDEF.
	       05 XLPATH PIC X(200).
	       05 XLEBENE PIC 9(5).
       01 REC USAGE REC-TYP .
       PROCEDURE        DIVISION.
           MOVE LENGTH OF X TO L.  DISPLAY L
           END-DISPLAY.
           MOVE LENGTH OF Y TO L.  DISPLAY L
           END-DISPLAY.
           MOVE LENGTH OF Y(1) TO L.  DISPLAY L
           END-DISPLAY.
           MOVE LENGTH OF REC-TYP TO L.  
	   DISPLAY L
           END-DISPLAY.
           MOVE LENGTH OF XLPATH of REC-TYP TO L.  
	   DISPLAY L
           END-DISPLAY.
	   DISPLAY LENGTH OF REC.
	   DISPLAY LENGTH OF XLPATH of REC. 
	   DISPLAY LENGTH OF RECB.
	   DISPLAY LENGTH OF XLPATH of RECB. 
	   DISPLAY LENGTH OF RECB-TYP.
	   DISPLAY LENGTH OF XLPATH of RECB-TYP. 
	   DISPLAY LENGTH OF BITS of RECB. 
	   DISPLAY LENGTH OF BITS of RECB-TYP. 
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[0002
0002
0002
0205
0200
205
200
207
200
207
200
2
2
])

AT_CLEANUP


## WHEN-COMPILED

AT_SETUP([WHEN-COMPILED])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(20).
       PROCEDURE        DIVISION.
           MOVE WHEN-COMPILED TO X.
           INSPECT X CONVERTING "0123456789" TO "9999999999".
           DISPLAY X NO ADVANCING
           END-DISPLAY.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [99/99/9999.99.99    ])

AT_CLEANUP


## OCCURS

AT_SETUP([Complex OCCURS DEPENDING ON])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "1234567890".
         02 G-2.
           03 X PIC X OCCURS 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
	     04 FILLER PIC X.
           03 G-5 .
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.

       PROCEDURE        DIVISION.
           MOVE 2 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 .
	   MOVE "AB" TO G-5 .
	   DISPLAY G-1.
])

AT_CHECK([${COMPILE} -std=mvs -fodo-slide -o prog prog.cob])
AT_CHECK([./prog], [0], [1234567:345:67
12345AB
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON & REDEFINES])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "1234567890ABC".
         02 G-2.
           03 X PIC X OCCURS 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
	     04 FILLER PIC X.
           03 G-5 .
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
	 02 G-6 PIC X(3).
	 02 G-7 REDEFINES G-6.
           03 G-71 PIC X.
           03 G-72 PIC X.
           03 G-73 PIC X.

       PROCEDURE        DIVISION.
           MOVE 2 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 ":" G-72.
])

AT_CHECK([${COMPILE} -std=mvs -fodo-slide -o prog prog.cob])
AT_CHECK([./prog], [0], [1234567890:345:67:9
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON & REDEFINES II])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "1234567890ABC".
         02 G-2.
           03 X PIC X OCCURS 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
	     04 X2 PIC X.
	   03 G-5-S PIC X(3).
           03 G-5 REDEFINES G-5-S.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
	 02 G-6 PIC X(3).
	 02 G-7 REDEFINES G-6.
           03 G-71 PIC X.
           03 G-72 PIC X.
           03 G-73 PIC X.

       PROCEDURE        DIVISION.
           MOVE 2 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 ":" G-72.
])

AT_CHECK([${COMPILE} -std=mvs -fodo-slide -o prog prog.cob])
AT_CHECK([./prog], [0], [1234567890A:345:67:0
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON & REDEFINES III])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      PROG.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
	 01 FAE-LOCAL. 
	    02 LOC-CLOC             PIC  X(11). 
	    02 LOC-CLOC-N REDEFINES LOC-CLOC. 
	       05 LOC-CLOC-DEP      PIC  9(01). 
	       05 LOC-CLOC-LOC OCCURS 10 DEPENDING ON LOC-CLOC-DEP
	       PIC  9(01). 
	    02 LOC-NBCP             PIC  9(02). 
	    02 LOC-GPOST-DUMMY2. 
	       03  LOC-GPOST2 OCCURS 25 DEPENDING ON LOC-NBCP. 
		 05 LOC-IACH2            PIC  9(01). 
	    02  LOC-GPOST-DUMMY. 
	       03  LOC-GPOST OCCURS 25 DEPENDING ON LOC-NBCP. 
		 05 LOC-IACH            PIC  9(01). 
	
	 01  GEOAE-LOCAL.                                     
	     02  XLOC-CLOC                          PIC  X(11). 
	     02  XLOC-NBCP                          PIC  9(02). 
	     02  XLOC-GPOST-DUMMY2.                             
	       03  XLOC-GPOST2 OCCURS 25 DEPENDING ON XLOC-NBCP. 
		 05  XLOC-IACH2                     PIC  X(01). 
	     02  XLOC-GPOST-DUMMY.                             
	       03  XLOC-GPOST OCCURS 25 DEPENDING ON XLOC-NBCP. 
		 05  XLOC-IACH                      PIC  X(01). 
	
	       PROCEDURE        DIVISION.
	
	       MOVE 5 TO XLOC-NBCP .
	       MOVE "A" TO XLOC-IACH(2).
	       INITIALIZE XLOC-IACH(3).
	
	       MOVE GEOAE-LOCAL TO FAE-LOCAL.
	       DISPLAY LOC-IACH(2).
	
	       DISPLAY LENGTH OF FAE-LOCAL.
	       DISPLAY LENGTH OF GEOAE-LOCAL.
])

AT_CHECK([${COMPILE} -std=mf -fodo-slide -O0 -o prog prog.cob])
AT_CHECK([./prog], [0], [A
0000000023
0000000023
])

AT_CHECK([${COMPILE} -std=mf -fodo-slide -O -o prog prog.cob])
AT_CHECK([./prog], [0], [A
0000000023
0000000023
])

AT_CHECK([${COMPILE} -std=mf -fno-odo-slide -O0 -o prog prog.cob])
AT_CHECK([./prog], [0], [A
0000000043
0000000043
])

AT_CHECK([${COMPILE} -std=mf -fno-odo-slide -O -o prog prog.cob])
AT_CHECK([./prog], [0], [A
0000000043
0000000043
])

AT_CLEANUP

AT_SETUP([Complex ODO Overflow])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "123456789".
         02 G-2.
           03 X PIC X OCCURS 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
           03 G-5.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
       PROCEDURE        DIVISION.
           MOVE 9 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 NO ADVANCING
           END-DISPLAY.
])

AT_CHECK([${COMPILE} -std=mvs -o prog prog.cob])
AT_CHECK([./prog], [0], [123456789:456:789])

AT_CLEANUP


AT_SETUP([MOVE NON-INTEGER TO ALPHA-NUMERIC])
#  see MF - COBOL  Error Messages  1029-E ...
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
        01 US-INTEGER          PIC 9(4)   VALUE 1289 .
        01 SIGNED-INTEGER      PIC S9(4)  VALUE -1289 .

        01 ALPHA-FIELD         PIC X(4).

        01 NON-INTEGER           PIC 9(2)V99   VALUE 12.89 .
        01 NON-INTEGER-2         PIC 9(2)V99   
                                     USAGE BINARY VALUE 12.89 .
        01 NON-INTEGER-3         PIC 9(2)V99
                                      USAGE PACKED-DECIMAL VALUE 12.89 .
        01 SIGNED-NON-INTEGER    PIC S9(2)V99   VALUE -12.89 .
        01 SIGNED-NON-INTEGER-2  PIC S9(2)V99
                                     USAGE BINARY VALUE -12.89 .
        01 SIGNED-NON-INTEGER-3  PIC S9(2)V99
                                     USAGE PACKED-DECIMAL VALUE -12.89 .

       PROCEDURE        DIVISION.
*     *    1029-E :  MF-COBOL Extension  see ERROR-Messages (2-77) !
*     *    MOVE NON-INTEGER TO ALPHA-NUMERIC --> ignore Decimal Point!
       S-01.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE US-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-02.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-03.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-10.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-20.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-30.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-40.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-50.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.

          STOP RUN.
])

AT_CHECK([${COMPILE} -std=mf -o prog prog.cob], [0], ,
[prog.cob: In paragraph 'S-03':
prog.cob:37: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-10':
prog.cob:42: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-20':
prog.cob:47: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-30':
prog.cob:52: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-40':
prog.cob:57: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-50':
prog.cob:62: Warning: Move non-integer to alphanumeric
])
AT_CHECK([./prog], [0], [12891289128912891289128912891289])

AT_CLEANUP


## CALL

AT_SETUP([CALL USING file-name])

AT_DATA([setfilename.c], [
#include <stdio.h>
#include <string.h>
#include <libcob.h>
#ifndef min
    #define min(a,b) (((a) < (b)) ? (a) : (b))
#endif
int setfilename (mf_extfh_FCD *fcd, unsigned char *name)
{
    int size;
    unsigned char *fcd_name;
    FLD_VAR
    if (!fcd) { return -1; } 

    size = min(strlen((unsigned char *) name), GT_FLD2(fcd->fname_length)) ;
    fcd_name = GT_FLDP(fcd->fname_ptr);

    memcpy (fcd_name, name, size);

    CP_FLD2(fcd->fname_length      , size);    
    return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       WORKING-STORAGE  SECTION.
       01 FILENAME      PIC X(8).
       PROCEDURE        DIVISION.
           INITIALIZE FILENAME.
           CALL "setfilename" USING TEST-FILE "TESTFILE"
           END-CALL.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} setfilename.c])
AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([test -e TESTFILE], [0])

AT_CLEANUP

AT_SETUP([CALL unusual PROGRAM-ID.])

AT_DATA([A@B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A@B".
       PROCEDURE        DIVISION.
           DISPLAY "P1" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A+B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A+B".
       PROCEDURE        DIVISION.
           DISPLAY "P2" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A-B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A-B".
       PROCEDURE        DIVISION.
           DISPLAY "P3" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "A@B"
           END-CALL.
           CALL "A+B"
           END-CALL.
           CALL "A-B"
           END-CALL.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} "A@B.cob"])
AT_CHECK([${COMPILE_MODULE} "A+B.cob"])
AT_CHECK([${COMPILE_MODULE} "A-B.cob"])
AT_CHECK([${COMPILE} -o caller caller.cob])

AT_CHECK([./caller], [0], [P1P2P3])

AT_CLEANUP

AT_SETUP([PROGRAM-ID AS clause])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller .
       PROCEDURE        DIVISION.
           CALL "program"
           STOP RUN.
       PROGRAM-ID.      callee AS "program".
       PROCEDURE        DIVISION.
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
       END PROGRAM callee.
       END PROGRAM caller.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP

## ASSIGN

AT_SETUP([ASSIGN MF])

AT_DATA([test.conf], [
include "cobol2002.conf"
assign-clause: mf
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           MOVE "TEST-FILE" TO FILENAME.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -conf=test.conf -o prog prog.cob], [0], ,
[prog.cob:12: Warning: 'FILENAME' will be implicitly defined
])
AT_CHECK([./prog], [0])

AT_CLEANUP

AT_SETUP([ASSIGN IBM])

AT_DATA([test.conf], [
include "cobol2002.conf"
assign-clause: ibm
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN DA-S-FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -conf=test.conf -o prog prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([test -f FILENAME], [0])

AT_CLEANUP

AT_SETUP([ASSIGN mapping])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -conf=test.conf -o prog prog.cob])
AT_CHECK([DD_FILENAME="x" ./prog], [0])
AT_CHECK([test -f "x"], [0])
AT_CHECK([dd_FILENAME="y" ./prog], [0])
AT_CHECK([test -f "y"], [0])
AT_CHECK([FILENAME="z" ./prog], [0])
AT_CHECK([test -f "z"], [0])
AT_CHECK([./prog], [0])
AT_CHECK([test -f "FILENAME"], [0])

AT_CLEANUP

AT_SETUP([ASSIGN expansion])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "$DIR/FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -conf=test.conf -o prog prog.cob])
AT_CHECK([DIR="." ./prog], [0])
AT_CHECK([test -f "./FILENAME" && rm -f "./FILENAME"], [0])

AT_CLEANUP

AT_SETUP([ASSIGN with COB_FILE_PATH])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAMEX".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -conf=test.conf -o prog prog.cob])
AT_CHECK([COB_FILE_PATH=".." ./prog], [0])
AT_CHECK([test -f "../FILENAMEX" && rm -f "../FILENAMEX"], [0])

AT_CLEANUP


AT_SETUP([CALL RETURNING X])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       PROCEDURE        DIVISION.
	 
           EXIT PROGRAM 1.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 N             PIC 99.
       01 X2            PIC XX.
       01 X3            PIC XXX.
       01  ws-fs.
           02 fs1         pic x comp-x.
           02 fs2         pic x comp-x.

       PROCEDURE        DIVISION.
           CALL "callee" RETURNING N.
	   DISPLAY N.
           CALL "callee" RETURNING X2.
	   DISPLAY X2.
           CALL "callee" RETURNING X3.
	   DISPLAY X3.
           CALL "callee" RETURNING ws-fs.
           STOP RUN 0.
])

AT_CHECK([${COMPILE} caller.cob])
AT_CHECK([${COMPILE_MODULE} callee.cob])
AT_CHECK([./caller], [0],
[01
01
001
])

AT_CLEANUP

# Number of call parameters

AT_SETUP([NUMBER-OF-CALL-PARAMETERS])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION
           USING W X Y Z.
           DISPLAY NUMBER-OF-CALL-PARAMETERS
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           CALL "callee" USING W
           END-CALL.
           CALL "callee" USING W X
           END-CALL.
           CALL "callee" USING W X Y
           END-CALL.
           CALL "callee" USING W X Y Z
           END-CALL.
           STOP RUN.
])

AT_CHECK([${COMPILE} caller.cob])
AT_CHECK([${COMPILE_MODULE} callee.cob])
AT_CHECK([./caller], [0],
[+000000000
+000000001
+000000002
+000000003
+000000004
])

AT_CLEANUP


# Program parameters

AT_SETUP([PROCEDURE DIVISION USING BY ...])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION
           USING BY VALUE X BY REFERENCE Y Z.
           DISPLAY "X = " X " Y = " Y " Z = " Z
           END-DISPLAY.
           MOVE "Z" TO X.
           MOVE 56 TO Y.
           MOVE 78 TO Z.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION.
           MOVE "X" TO X.
           MOVE 12 TO Y.
           MOVE 34 TO Z.
           CALL "callee" USING BY CONTENT X BY REFERENCE Y
                BY CONTENT Z
           END-CALL.
           DISPLAY "X = " X " Y = " Y " Z = " Z
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} caller.cob])
AT_CHECK([${COMPILE_MODULE} callee.cob])
AT_CHECK([./caller], [0],
[X = X Y = 12 Z = 34
X = X Y = 56 Z = 34
])

AT_CLEANUP

AT_SETUP([CALL BY VALUE PICX])

AT_DATA([prog.cob], [
 identification division.
 program-id. "prog".
 working-storage section.
  01  ma_var3X    pic x(1).
  01  ma_var3     pic 9(1).
  01  ma_varA     pic x(1).
  01  ma_varz     pic x(1).
  01  ma_varxx    pic x(2).
  01  ma_varGrp.
      02  ma_varGrpN pic 9(1).

 procedure division.
     move  3  to ma_var3.
     move "A" to ma_varA.
     move "3" to ma_var3X.
     move "4" to ma_varGrp.
     move "56" to ma_varxx
     move "z" to ma_varz.
     call "printf" using "   litX    <%c>"    by value "2".                display " expect <2>".
     call "printf" using "hx litX    <%2.2x>" by value "2".                display " expect <32>".

     call "printf" using "   varN    <%c>"    by value ma_var3.            display " expect <" ma_var3 ">".
     call "printf" using "hx varN    <%2.2x>" by value ma_var3.            display " expect <33>".

     call "printf" using "   varX    <%c>"    by value ma_var3X.           display " expect <" ma_var3X ">".
     call "printf" using "hx varX    <%2.2x>" by value ma_var3X.           display " expect <33>".

     call "printf" using "   varX    <%c>"    by value ma_varA.            display " expect <" ma_varA ">".
     call "printf" using "hx varX    <%2.2x>" by value ma_varA.            display " expect <41>".

     call "printf" using "   varxx   <%c%c>"  by value ma_varxx(1:1) by value ma_varxx(2:1).       display " expect <" ma_varxx ">".
     call "printf" using "hx varxx   <%2.2x %2.2x>" by value ma_varxx(1:1) by value ma_varxx(2:1). display " expect <35 36>".

     call "printf" using "   varz    <%c>"    by value ma_varz.            display " expect <" ma_varz ">".
     call "printf" using "hx varz    <%2.2x>" by value ma_varz.            display " expect <7a>".
*    call "printf" using "   varGrp  <%c>"    by value ma_varGrp.          display " expect <" ma_varGrp ">".
*    call "printf" using "hx varGrp  <%2.2x>" by value ma_varGrp.          display " expect <34>".

     call "printf" using "   varGrpN <%c>"    by value ma_varGrpN.         display " expect <" ma_varGrpN ">".
     call "printf" using "hx varGrpN <%2.2x>" by value ma_varGrpN.         display " expect <34>".
     STOP RUN RETURNING 0.
     .
])

AT_CHECK([${COMPILE} -free -std=mf  prog.cob])
AT_CHECK([./prog], [0],
[   litX    <2> expect <2>
hx litX    <32> expect <32>
   varN    <3> expect <3>
hx varN    <33> expect <33>
   varX    <3> expect <3>
hx varX    <33> expect <33>
   varX    <A> expect <A>
hx varX    <41> expect <41>
   varxx   <56> expect <56>
hx varxx   <35 36> expect <35 36>
   varz    <z> expect <z>
hx varz    <7a> expect <7a>
   varGrpN <4> expect <4>
hx varGrpN <34> expect <34>
])

AT_CLEANUP

# Program parameters

AT_SETUP([PROCEDURE DIVISION USING in WORKING..])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X VALUE 'A'.
       01 Grp.
       02 Y             PIC 99 VALUE '0'.
       02 Z             PIC 99 USAGE COMP.
       LINKAGE   SECTION.
       01 T             PIC X.
       PROCEDURE        DIVISION
           USING X Grp T.
           DISPLAY X Y Z T
           END-DISPLAY.
           MOVE "Z" TO X.
           MOVE "Z" TO T.
           MOVE 56 TO Y.
           MOVE 78 TO Z.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       01 Grp.
       02 Y             PIC 99.
       02 Z             PIC 99 USAGE COMP.
       01 T             PIC X VALUE "T".
       PROCEDURE        DIVISION.
           MOVE "X" TO X.
           MOVE 12 TO Y.
           MOVE 34 TO Z.
           CALL "callee" USING X grp T
           END-CALL.
           DISPLAY X Y Z T
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} caller.cob])
AT_CHECK([${COMPILE_MODULE} -w callee.cob])
AT_CHECK([./caller], [0],
[X1234T
X1234Z
])

AT_CLEANUP

AT_SETUP([PROCEDURE DIVISION CHAINING ...])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X.
       01  ABCD         PIC X(4).
       PROCEDURE        DIVISION
                        CHAINING X ABCD.
           DISPLAY X
           END-DISPLAY.
           DISPLAY ABCD
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])

AT_CHECK([./prog X ABCD], [0],
[X
ABCD
])

AT_CLEANUP


AT_SETUP([STOP RUN RETURNING])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           STOP RUN RETURNING 1.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [1])

AT_CLEANUP


# ENTRY

AT_SETUP([ENTRY])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "hello" USING "COBOL"
           END-CALL.
           CALL "bye" USING "COBOL"
           END-CALL.
           STOP RUN.
])

AT_DATA([hello.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      hello.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MSG-HELLO     PIC X(7) VALUE "Hello, ".
       01 MSG-BYE       PIC X(5) VALUE "Bye, ".
       LINKAGE          SECTION.
       01 X             PIC X(5).
       01 Y             PIC X(5).
       PROCEDURE        DIVISION USING X.
           DISPLAY MSG-HELLO X "!"
           END-DISPLAY.
           EXIT PROGRAM.

           ENTRY "bye" USING Y.
           DISPLAY MSG-BYE Y "!"
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([${COMPILE} -std=mvs caller.cob])
AT_CHECK([${COMPILE_MODULE} -std=mvs hello.cob])
AT_CHECK([./caller], [0],
[Hello, COBOL!
Bye, COBOL!
])

AT_CLEANUP

AT_SETUP([INITCALL])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "hello" USING "COBOL"
           END-CALL.
           CALL "bye" USING "COBOL"
           END-CALL.
           STOP RUN.
])

AT_DATA([fake.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      fake.
       PROCEDURE        DIVISION.
       DISPLAY "Fake".
       .
])

AT_DATA([hello.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      hello.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MSG-HELLO     PIC X(7) VALUE "Hello, ".
       01 MSG-BYE       PIC X(5) VALUE "Bye, ".
       LINKAGE          SECTION.
       01 X             PIC X(5).
       01 Y             PIC X(5).
       PROCEDURE        DIVISION USING X.
           DISPLAY MSG-HELLO X "!"
           END-DISPLAY.
           EXIT PROGRAM.

           ENTRY "bye" USING Y.
           DISPLAY MSG-BYE Y "!"
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([${COMPILE} -std=mf caller.cob])
AT_CHECK([${COMPILE_MODULE} -std=mf  hello.cob])
AT_CHECK([${COMPILE_MODULE} -std=mf  fake.cob])
AT_CHECK([./caller], [0],
[Hello, COBOL!
Bye, COBOL!
])
AT_CHECK([${COMPILE_MODULE} -std=mf hello.cob -initcall="fake"])
AT_CHECK([./caller], [0],
[Fake
Hello, COBOL!
Bye, COBOL!
])

AT_CLEANUP


## LINE SEQUENTIAL

AT_SETUP([LINE SEQUENTIAL RECORDING MODE F])

AT_DATA([testy.conf], [
include "default.conf"
line-seq-recording-mode: yes
])

AT_DATA([testn.conf], [
include "default.conf"
line-seq-recording-mode: no
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE 
          RECORDING MODE IS F.
       01 TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
	01 uf-file-info.
	05 uf-file-size pic x(08) comp-x.
	05 uf-file-date pic 9(08) comp-x.
	05 uf-file-time pic 9(08) comp-x.

       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           MOVE "a"    TO TEST-REC. 
           WRITE TEST-REC.
           WRITE TEST-REC.
           CLOSE TEST-FILE.
	   CALL "C$FILEINFO" USING "TEST-FILE" uf-file-info 
	   DISPLAY uf-file-size.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog -conf=testy.conf prog.cob])
AT_CHECK([./prog], [0], 
[000000000000000010
])
AT_CHECK([${COMPILE} -o prog -conf=testn.conf prog.cob])
AT_CHECK([./prog], [0], 
[000000000000000004
])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL RECORDING MODE V])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE 
          RECORDING MODE IS V.
       01 TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
	01 uf-file-info.
	05 uf-file-size pic x(08) comp-x.
	05 uf-file-date pic 9(08) comp-x.
	05 uf-file-time pic 9(08) comp-x.

       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           MOVE "a"    TO TEST-REC. 
           WRITE TEST-REC.
           WRITE TEST-REC.
           CLOSE TEST-FILE.
	   CALL "C$FILEINFO" USING "TEST-FILE" uf-file-info 
	   DISPLAY uf-file-size.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[000000000000000004
])

AT_CLEANUP

AT_SETUP([SEQUENTIAL write AFTER/BEFORE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS SEQUENTIAL.
       SELECT TEST-FILE1 ASSIGN       "./TEST-FILE1"
                        ORGANIZATION IS SEQUENTIAL.
       SELECT TEST-FILE2 ASSIGN       "./TEST-FILE2"
                        ORGANIZATION IS SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       FD TEST-FILE1.
       01 TEST-REC1     PIC X(4).
       FD TEST-FILE2.
       01 TEST-REC2     PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           MOVE "a"    TO TEST-REC. WRITE TEST-REC
           END-WRITE.
           MOVE "ab"   TO TEST-REC. WRITE TEST-REC AFTER 1 LINES
           END-WRITE.
           MOVE "abc"  TO TEST-REC. WRITE TEST-REC BEFORE 2 LINES
           END-WRITE.
           MOVE "abcd" TO TEST-REC. WRITE TEST-REC
           END-WRITE.
           CLOSE TEST-FILE.
           OPEN OUTPUT TEST-FILE1.
           MOVE "a"    TO TEST-REC1. WRITE TEST-REC1 AFTER 0
           END-WRITE.
           MOVE "ab"   TO TEST-REC1. WRITE TEST-REC1 AFTER 1 LINES
           END-WRITE.
           CLOSE TEST-FILE1.
           OPEN OUTPUT TEST-FILE2.
           MOVE "a"    TO TEST-REC2. WRITE TEST-REC2
           END-WRITE.
           MOVE "ab"   TO TEST-REC2. WRITE TEST-REC2 AFTER 1 LINES
           END-WRITE.
           MOVE "a"    TO TEST-REC2. WRITE TEST-REC2
           END-WRITE.
           MOVE "a"    TO TEST-REC2. WRITE TEST-REC2
           END-WRITE.
           CLOSE TEST-FILE2.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog -fline-seq-dos prog.cob])
AT_CHECK([./prog])
AT_CHECK([od -a TEST-FILE], [0], 
[0000000   a  sp  sp  sp  nl   a   b  sp  sp  cr   a   b   c  sp  cr  nl
0000020  nl   a   b   c   d
0000025
])
AT_CHECK([od -a TEST-FILE1], [0], 
[0000000   a  sp  sp  sp  cr  nl   a   b  sp  sp  cr
0000013
])
AT_CHECK([od -a TEST-FILE2], [0], 
[0000000   a  sp  sp  sp  nl   a   b  sp  sp  cr   a  sp  sp  sp   a  sp
0000020  sp  sp
0000022
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL write])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           MOVE "a"    TO TEST-REC. WRITE TEST-REC
           END-WRITE.
           MOVE "ab"   TO TEST-REC. WRITE TEST-REC AFTER 1 LINES
           END-WRITE.
           MOVE "abc"  TO TEST-REC. WRITE TEST-REC BEFORE 2 LINES
           END-WRITE.
           MOVE "abcd" TO TEST-REC. WRITE TEST-REC
           END-WRITE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog -fline-seq-dos prog.cob])
AT_CHECK([./prog])
AT_CHECK([od -a TEST-FILE], [0], 
[0000000   a  cr  nl  nl   a   b  cr   a   b   c  cr  nl  nl   a   b   c
0000020   d  cr  nl
0000023
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL write CHANNEL])
AT_DATA([test.sh], [
export COBLPFORM="1:8:13:29:45:51:63"
./prog
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TEST_CHANNEL.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
        C01 IS CHANNEL-1
        C02 IS CHANNEL-2
        C03 IS CHANNEL-3
        .
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
        SELECT CTGAPP ASSIGN LINE ADVANCING CTGAPP
        ORGANIZATION SEQUENTIAL .

        SELECT IMPAPP1 ASSIGN IMPAPP1
        ORGANIZATION SEQUENTIAL .
       DATA DIVISION.
       FILE SECTION.
       FD CTGAPP.
       01 LIGNE-CTG.
        02 FILLER PIC X(132).

       FD IMPAPP1.
       01 LIGNE-IMPAPP1.
        02 FILLER PIC X(132).

       WORKING-STORAGE SECTION.
      *
       PROCEDURE DIVISION.

        OPEN OUTPUT CTGAPP.
		
000507  MOVE SPACES TO LIGNE-CTG.
        MOVE "AFTER CHANNEL-1 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-CTG.
000508  WRITE LIGNE-CTG AFTER CHANNEL-1.
        MOVE "AFTER CHANNEL-2 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-CTG.
000508  WRITE LIGNE-CTG AFTER CHANNEL-2.
        MOVE "AFTER 2          " TO LIGNE-CTG.
000508  WRITE LIGNE-CTG AFTER 2.
        MOVE "AFTER CHANNEL-3 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-CTG.
000508  WRITE LIGNE-CTG AFTER CHANNEL-3.
		
        CLOSE CTGAPP.
		
        OPEN OUTPUT IMPAPP1.
		

000507  MOVE SPACES TO LIGNE-IMPAPP1.
        MOVE "AFTER CHANNEL-1 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-IMPAPP1.
000508  WRITE LIGNE-IMPAPP1 AFTER CHANNEL-1.
        MOVE "AFTER CHANNEL-2 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-IMPAPP1.
000508  WRITE LIGNE-IMPAPP1 AFTER CHANNEL-2.
        MOVE "AFTER 2          " TO LIGNE-IMPAPP1.
000508  WRITE LIGNE-IMPAPP1 AFTER 2.
        MOVE "AFTER CHANNEL-3 COBLPFORM 1:8:13:29:45:51:63" 
		TO LIGNE-IMPAPP1.
000508  WRITE LIGNE-IMPAPP1 AFTER CHANNEL-3.
		
        CLOSE IMPAPP1.
		
        EXIT.
])

AT_CHECK([${COMPILE} -std=mf -fline-seq-dos -w -o prog prog.cob])
AT_CHECK([sh ./test.sh])
AT_CHECK([od -a CTGAPP], [0], 
[0000000  cr  ff   A   F   T   E   R  sp   C   H   A   N   N   E   L   -
0000020   1  sp   C   O   B   L   P   F   O   R   M  sp   1   :   8   :
0000040   1   3   :   2   9   :   4   5   :   5   1   :   6   3  cr  nl
0000060  nl  nl  nl  nl  nl  nl   A   F   T   E   R  sp   C   H   A   N
0000100   N   E   L   -   2  sp   C   O   B   L   P   F   O   R   M  sp
0000120   1   :   8   :   1   3   :   2   9   :   4   5   :   5   1   :
0000140   6   3  cr  nl  nl   A   F   T   E   R  sp   2  cr  nl  nl  nl
0000160   A   F   T   E   R  sp   C   H   A   N   N   E   L   -   3  sp
0000200   C   O   B   L   P   F   O   R   M  sp   1   :   8   :   1   3
0000220   :   2   9   :   4   5   :   5   1   :   6   3  cr
0000235
])
AT_CHECK([od -a IMPAPP1], [0], 
[0000000  ff   A   F   T   E   R  sp   C   H   A   N   N   E   L   -   1
0000020  sp   C   O   B   L   P   F   O   R   M  sp   1   :   8   :   1
0000040   3   :   2   9   :   4   5   :   5   1   :   6   3  sp  sp  sp
0000060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000200  sp  sp  sp  sp  sp  cr  nl  nl  nl  nl  nl  nl  nl   A   F   T
0000220   E   R  sp   C   H   A   N   N   E   L   -   2  sp   C   O   B
0000240   L   P   F   O   R   M  sp   1   :   8   :   1   3   :   2   9
0000260   :   4   5   :   5   1   :   6   3  sp  sp  sp  sp  sp  sp  sp
0000300  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000420  sp  cr  nl  nl   A   F   T   E   R  sp   2  sp  sp  sp  sp  sp
0000440  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000620  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl   A   F   T   E
0000640   R  sp   C   H   A   N   N   E   L   -   3  sp   C   O   B   L
0000660   P   F   O   R   M  sp   1   :   8   :   1   3   :   2   9   :
0000700   4   5   :   5   1   :   6   3  sp  sp  sp  sp  sp  sp  sp  sp
0000720  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001040  cr
0001041
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL AFTER ...])
AT_DATA([prog.cob], [
000010 IDENTIFICATION DIVISION.
000020 PROGRAM-ID.  prog.
000360 ENVIRONMENT DIVISION.
000370 CONFIGURATION SECTION.
000430 INPUT-OUTPUT SECTION.
000440 FILE-CONTROL.                                                            
000450     SELECT SEQFILE1 ASSIGN TO "WS-FILE1"
000460         ORGANIZATION IS SEQUENTIAL.
000470     SELECT SEQFILE2 ASSIGN TO "WS-FILE2"
000480         ORGANIZATION IS SEQUENTIAL.
000470     SELECT SEQFILE3 ASSIGN TO "WS-FILE3"
000480         ORGANIZATION IS LINE SEQUENTIAL.   
000470     SELECT SEQFILE4 ASSIGN TO "WS-FILE4"  
000480         ORGANIZATION IS LINE SEQUENTIAL.
000490 I-O-CONTROL.                                                             
000500 DATA DIVISION.                                                           
000510 FILE SECTION.                                                            
000520 FD  SEQFILE1.
       01  SREC1             pic x(80).
000590 FD  SEQFILE2.
000600 01  SREC2             pic x(80).
000590 FD  SEQFILE3.
000600 01  SREC3             pic x(80).
000590 FD  SEQFILE4.
000600 01  SREC4             pic x(80).
000630 WORKING-STORAGE SECTION.
005490 PROCEDURE DIVISION.
005500 PSTART SECTION.                                                
005510 TRANS-STRT.
           OPEN OUTPUT SEQFILE1. 
           MOVE SPACES TO SREC1.
           MOVE "AAAAAAA" TO SREC1.
           WRITE SREC1 AFTER advancing PAGE.
           MOVE "BBBBBBB" TO SREC1.
           WRITE SREC1 AFTER 1.
           MOVE "CCCCCCCC" To SREC1.
           WRITE SREC1 AFTER 2.
           CLOSE SEQFILE1.


           OPEN OUTPUT SEQFILE2. 
           MOVE SPACES TO SREC2.
           MOVE "AAAAAAA" TO SREC2.
           WRITE SREC2.
           MOVE "BBBBBBB" TO SREC2.
           WRITE SREC2.
           MOVE "CCCCCCCC" To SREC2.
           WRITE SREC2.
           CLOSE SEQFILE2.


           OPEN OUTPUT SEQFILE3.
           MOVE SPACES TO SREC3.
           MOVE "AAAAAAA" TO SREC3.
           WRITE SREC3.
           MOVE "BBBBBBB" TO SREC3.   
           WRITE SREC3.
           MOVE "CCCCCCCC" To SREC3.  
           WRITE SREC3.
           CLOSE SEQFILE3.

           OPEN OUTPUT SEQFILE4.
           MOVE SPACES TO SREC4.
           MOVE "AAAAAAA" TO SREC4.
           WRITE SREC4 AFTER PAGE.
           MOVE "BBBBBBB" TO SREC4.
           WRITE SREC4 AFTER 1. 
           MOVE "CCCCCCCC" To SREC4.
           WRITE SREC4 AFTER 2.
           CLOSE SEQFILE4.

           STOP RUN.
       EXIT-STAT. EXIT.
])
AT_CHECK([${COMPILE} -o prog -fline-seq-dos prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a WS-FILE*], [0], 
[0000000  ff   A   A   A   A   A   A   A  sp  sp  sp  sp  sp  sp  sp  sp
0000020  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000120  sp  cr  nl   B   B   B   B   B   B   B  sp  sp  sp  sp  sp  sp
0000140  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000240  sp  sp  sp  cr  nl  nl   C   C   C   C   C   C   C   C  sp  sp
0000260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000360  sp  sp  sp  sp  sp  sp  cr   A   A   A   A   A   A   A  sp  sp
0000400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000500  sp  sp  sp  sp  sp  sp  sp   B   B   B   B   B   B   B  sp  sp
0000520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000620  sp  sp  sp  sp  sp  sp  sp   C   C   C   C   C   C   C   C  sp
0000640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000740  sp  sp  sp  sp  sp  sp  sp   A   A   A   A   A   A   A  cr  nl
0000760   B   B   B   B   B   B   B  cr  nl   C   C   C   C   C   C   C
0001000   C  cr  nl  ff   A   A   A   A   A   A   A  cr  nl   B   B   B
0001020   B   B   B   B  cr  nl  nl   C   C   C   C   C   C   C   C  cr
0001040
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL AFTER II...])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TEST_SEQUENTIAL.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT FTEST   ASSIGN TO EXTERNAL FTEST_SEQUENTIAL
              ORGANIZATION SEQUENTIAL.
      
            SELECT FLTEST   ASSIGN TO EXTERNAL FTEST_LINE_SEQUENTIAL
              ORGANIZATION LINE SEQUENTIAL.
      
       DATA DIVISION.
       FILE SECTION.
      *
       FD FTEST.
       01 LTEST PIC X(50).

       FD FLTEST.
       01 LLTEST PIC X(50).
      
       WORKING-STORAGE SECTION.
      
       PROCEDURE DIVISION.
           OPEN OUTPUT FTEST.
           MOVE SPACES TO LTEST.
           WRITE LTEST AFTER PAGE.
           WRITE LTEST AFTER 2.
           MOVE "WRITE 2 AFTER 2" TO LTEST.
           WRITE LTEST AFTER 2.
           MOVE SPACES TO LTEST.
           MOVE "WRITE 3 AFTER 2" TO LTEST.
           WRITE LTEST AFTER 2.
           CLOSE FTEST.

           OPEN OUTPUT FLTEST.
           MOVE SPACES TO LLTEST.
           WRITE LLTEST AFTER PAGE.
           WRITE LLTEST AFTER 2.
           MOVE "WRITE 2 AFTER 2" TO LLTEST.
           WRITE LLTEST AFTER 2.
           MOVE SPACES TO LLTEST.
           MOVE "WRITE 3 AFTER 2" TO LLTEST.
           WRITE LLTEST AFTER 2.
           CLOSE FLTEST.
           EXIT.
])
AT_CHECK([${COMPILE} -o prog -fline-seq-dos prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_SEQUENTIAL FTEST_LINE_SEQUENTIAL], [0], 
[0000000  ff  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000020  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000060  sp  sp  sp  cr  nl  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000100  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000140  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl   W   R   I   T   E
0000160  sp   2  sp   A   F   T   E   R  sp   2  sp  sp  sp  sp  sp  sp
0000200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl
0000240   W   R   I   T   E  sp   3  sp   A   F   T   E   R  sp   2  sp
0000260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000320  sp  sp  cr  ff  cr  nl  nl  cr  nl  nl   W   R   I   T   E  sp
0000340   2  sp   A   F   T   E   R  sp   2  cr  nl  nl   W   R   I   T
0000360   E  sp   3  sp   A   F   T   E   R  sp   2  cr
0000374
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL AFTER III...])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
        C01 IS TOP-FORM
        C02 IS TO-CP.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
        SELECT PRINT-FILE ASSIGN TO dynamic OUT-NAME-1
        ORGANIZATION IS LINE SEQUENTIAL.
      *>
       DATA DIVISION.
      *>
       FILE SECTION.

       FD PRINT-FILE.
       01 PRINT-LINE.
        05 FILLER PIC X(160).
      *>
       WORKING-STORAGE SECTION.
      *>-------------------------------------------------------
      *>
       01 OUT-NAME-1    pic x(11)        value "rv_test.prt".
       01 output-line.
          05  filler            pic x(5) value "Line ".
          05  prt-line-nbr      pic z9   value zero.
          05  filler            pic x(11)  value " Advancing ".
          05  adv-nbr           pic xx   value zero.

       PROCEDURE DIVISION.
       A010-MAIN-LINE.
           open output print-file
           move 1       to prt-line-nbr
           move " 0"    to adv-nbr
           write print-line from output-line after 0
           move 2       to prt-line-nbr
           move " 1"    to adv-nbr
           write print-line from output-line after 1
           move 3       to prt-line-nbr
           move " 1"    to adv-nbr
           write print-line from output-line after 1
        PERFORM 100-RUN THRU 100-EXIT
        move spaces to print-line
           move 99      to prt-line-nbr
           move "PG"    to adv-nbr
           write print-line from output-line after page
        CLOSE PRINT-FILE .
        STOP RUN.
       100-RUN.
           move 4       to prt-line-nbr
           move " 1"    to adv-nbr
           write print-line from output-line after advancing 1
        PERFORM 1000-TOP-RIGHT.
           move 11      to prt-line-nbr
           move "PG"    to adv-nbr
           write print-line from output-line after page
           move 12      to prt-line-nbr
           move " 0"    to adv-nbr
           write print-line from output-line after 0.
       100-EXIT.
        EXIT.
      *>------------------------------------------------------------
       1000-top-right.
      *> 1st begin
           move 5       to prt-line-nbr
           move "PG"    to adv-nbr
           write print-line from output-line after page
        move spaces to print-line
           move 6       to prt-line-nbr
           move " 0"    to adv-nbr
*           write print-line from output-line after 0
           string "      " output-line delimited by size
                into print-line
           write print-line after 0
           move 7       to prt-line-nbr
           move " 0"    to adv-nbr
*           write print-line from output-line after 0
           string "Advancing " output-line delimited by size
                into print-line
           write print-line after advancing 0
           move 8       to prt-line-nbr
           move " 1"    to adv-nbr
           write print-line from output-line after 1
           move 9       to prt-line-nbr
           move " 0"    to adv-nbr
*           write print-line from output-line after 0
           string "No Advancing " output-line delimited by size
                into print-line
           write print-line after 0
           move 10      to prt-line-nbr
           move " 2"    to adv-nbr
           write print-line from output-line after 2.
])
AT_CHECK([${COMPILE} -std=mf -fline-seq-dos -o prog prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a rv_test.prt], [0], 
[0000000   L   i   n   e  sp  sp   1  sp   A   d   v   a   n   c   i   n
0000020   g  sp  sp   0  cr  nl   L   i   n   e  sp  sp   2  sp   A   d
0000040   v   a   n   c   i   n   g  sp  sp   1  cr  nl   L   i   n   e
0000060  sp  sp   3  sp   A   d   v   a   n   c   i   n   g  sp  sp   1
0000100  cr  nl   L   i   n   e  sp  sp   4  sp   A   d   v   a   n   c
0000120   i   n   g  sp  sp   1  cr  ff   L   i   n   e  sp  sp   5  sp
0000140   A   d   v   a   n   c   i   n   g  sp   P   G  cr  sp  sp  sp
0000160  sp  sp  sp   L   i   n   e  sp  sp   6  sp   A   d   v   a   n
0000200   c   i   n   g  sp  sp   0  cr   A   d   v   a   n   c   i   n
0000220   g  sp   L   i   n   e  sp  sp   7  sp   A   d   v   a   n   c
0000240   i   n   g  sp  sp   0  cr  nl   L   i   n   e  sp  sp   8  sp
0000260   A   d   v   a   n   c   i   n   g  sp  sp   1  cr   N   o  sp
0000300   A   d   v   a   n   c   i   n   g  sp   L   i   n   e  sp  sp
0000320   9  sp   A   d   v   a   n   c   i   n   g  sp  sp   0  cr  nl
0000340  nl   L   i   n   e  sp   1   0  sp   A   d   v   a   n   c   i
0000360   n   g  sp  sp   2  cr  ff   L   i   n   e  sp   1   1  sp   A
0000400   d   v   a   n   c   i   n   g  sp   P   G  cr   L   i   n   e
0000420  sp   1   2  sp   A   d   v   a   n   c   i   n   g  sp  sp   0
0000440  cr  ff   L   i   n   e  sp   9   9  sp   A   d   v   a   n   c
0000460   i   n   g  sp   P   G  cr
0000467
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL BEFORE/AFTER/PAGE])

AT_DATA([prog.cob],
[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION .
       FILE-CONTROL .
           SELECT  E1
                   ASSIGN EXTERNAL E1
                   ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION .
      *
       FD  E1
           RECORDING MODE IS FIXED.
       01  LIGNE1                  PIC X(12).
       WORKING-STORAGE SECTION.
       01 ARG1.
            05 ARG1C        PIC 9(4) COMP.
            05 ARG1G.
                10 ARG1S     PIC X
                            OCCURS 100.
       01 SORTIE.
            05 RETOUR       PIC 9.
      *            ITEMS POUR GESTION PARAMETRAGE DU PROGRAMME.
       01 W-BLANC                     PIC X(20) VALUE SPACES.
      *            ITEMS POUR TEST CODES SAUT 
       01 W-SAUT-PAGE              PIC X(12) VALUE "SAUT DE PAGE".
       01 W-PAGE1                  PIC X(12) VALUE "1 Implicite ".
       01 W-PAGE2                  PIC X(12) VALUE "2 Before    ".
       01 W-PAGE3                  PIC X(12) VALUE "3 After     ".
       01 W-AFTER-1                PIC X(12) VALUE "AFTER       ".
       01 W-BEFORE-1               PIC X(12) VALUE "BEFORE      ".
       01 W-IMPLICITE              PIC X(12) VALUE "IMPLICITE   ".
       PROCEDURE DIVISION .
       PRINCIPALE SECTION.
       PR-010.
           OPEN OUTPUT E1.
           WRITE LIGNE1 FROM W-SAUT-PAGE BEFORE ADVANCING PAGE.
           WRITE LIGNE1 FROM W-PAGE1 BEFORE 1.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 1.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 2.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 3.
           WRITE LIGNE1 FROM W-IMPLICITE.
      *
      *
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 1.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 2.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 3.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-IMPLICITE.
      *  AJOUT TEST IMPRESSION LIGNE A BLANC AVANT SAUT DE PAGE 
      *     EN FIN D'IMPRESSION
           MOVE SPACES TO LIGNE1.
           WRITE LIGNE1 BEFORE PAGE. 
      *
      *
           CLOSE E1.
       PR-990.
           STOP RUN RETURNING 0.
           EXIT.
])
AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a E1], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   1  sp
0000020   I   m   p   l   i   c   i   t   e  cr  nl   B   E   F   O   R
0000040   E  cr  nl   I   M   P   L   I   C   I   T   E  nl   B   E   F
0000060   O   R   E  cr  nl  nl   I   M   P   L   I   C   I   T   E  nl
0000100   B   E   F   O   R   E  cr  nl  nl  nl   I   M   P   L   I   C
0000120   I   T   E  nl  nl   A   F   T   E   R  cr   I   M   P   L   I
0000140   C   I   T   E  nl  nl  nl   A   F   T   E   R  cr   I   M   P
0000160   L   I   C   I   T   E  nl  nl  nl  nl   A   F   T   E   R  cr
0000200   I   M   P   L   I   C   I   T   E  nl   I   M   P   L   I   C
0000220   I   T   E  nl   I   M   P   L   I   C   I   T   E  nl  cr  ff
0000240
])
AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL BEFORE/AFTER/PAGE II])

AT_DATA([prog.cob],
[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. OOVCOS.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. MF-UNIX.
       OBJECT-COMPUTER. MF-UNIX.
       INPUT-OUTPUT SECTION .
       FILE-CONTROL .
           SELECT  E1
                  ASSIGN EXTERNAL PRINTER E1.
      *             ASSIGN EXTERNAL E1
      *             ORGANIZATION IS LINE SEQUENTIAL.
           SELECT  E2
                  ASSIGN EXTERNAL PRINTER E2.
      *             ASSIGN EXTERNAL E2
      *             ORGANIZATION IS LINE SEQUENTIAL.
           SELECT  E3
                  ASSIGN EXTERNAL PRINTER E3.
      *             ASSIGN EXTERNAL E3
      *             ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION .
      *
       FD  E1
           RECORDING MODE IS FIXED.
       01  LIGNE1                  PIC X(12).
       FD  E2
           RECORDING MODE IS FIXED.
       01  LIGNE2                  PIC X(12).
       FD  E3
           RECORDING MODE IS FIXED.
       01  LIGNE3                  PIC X(12).
       WORKING-STORAGE SECTION.
       01 ARG1.
            05 ARG1C        PIC 9(4) COMP.
            05 ARG1G.
                10 ARG1S     PIC X
                            OCCURS 100.
       01 SORTIE.
            05 RETOUR       PIC 9.
      *            ITEMS POUR GESTION PARAMETRAGE DU PROGRAMME.
       01 W-BLANC                     PIC X(20) VALUE SPACES.
      *            ITEMS POUR TEST CODES SAUT 
       01 W-SAUT-PAGE              PIC X(12) VALUE "SAUT DE PAGE".
       01 W-PAGE1                  PIC X(12) VALUE "1 Implicite ".
       01 W-PAGE2                  PIC X(12) VALUE "2 Before    ".
       01 W-PAGE3                  PIC X(12) VALUE "3 After     ".
       01 W-AFTER-1                PIC X(12) VALUE "AFTER       ".
       01 W-BEFORE-1               PIC X(12) VALUE "BEFORE      ".
       01 W-IMPLICITE              PIC X(12) VALUE "IMPLICITE   ".
       PROCEDURE DIVISION .
           OPEN OUTPUT E1 E2 E3.
           WRITE LIGNE1 FROM W-SAUT-PAGE BEFORE ADVANCING PAGE.
           WRITE LIGNE1 FROM W-PAGE1 BEFORE 1.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 1.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 2.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-BEFORE-1 BEFORE 3.
           WRITE LIGNE1 FROM W-IMPLICITE.
      *
      *
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 1.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 2.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-AFTER-1 AFTER 3.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-IMPLICITE.
           WRITE LIGNE1 FROM W-IMPLICITE.
      *  AJOUT TEST IMPRESSION LIGNE A BLANC AVANT SAUT DE PAGE 
      *     EN FIN D'IMPRESSION
           MOVE SPACES TO LIGNE1.
           WRITE LIGNE1 BEFORE PAGE. 
      *
      *
           WRITE LIGNE2 FROM W-SAUT-PAGE BEFORE PAGE.
           WRITE LIGNE2 FROM W-PAGE2 BEFORE 1.
           WRITE LIGNE2 FROM W-BEFORE-1 BEFORE 1.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE2 FROM W-BEFORE-1 BEFORE 2.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE2 FROM W-BEFORE-1 BEFORE 3.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
      *
      *
           WRITE LIGNE2 FROM W-AFTER-1 AFTER 1.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE2 FROM W-AFTER-1 AFTER 2.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE2 FROM W-AFTER-1 AFTER 3.
           WRITE LIGNE2 FROM W-IMPLICITE BEFORE 1.
      *
      *
           WRITE LIGNE3 FROM W-SAUT-PAGE BEFORE PAGE.
           WRITE LIGNE3 FROM W-PAGE3 BEFORE 1.
           WRITE LIGNE3 FROM W-BEFORE-1 BEFORE 1.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE3 FROM W-BEFORE-1 BEFORE 2.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE3 FROM W-BEFORE-1 BEFORE 3.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
      *
      *
           WRITE LIGNE3 FROM W-AFTER-1 AFTER 1.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE3 FROM W-AFTER-1 AFTER 2.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
           WRITE LIGNE3 FROM W-AFTER-1 AFTER 3.
           WRITE LIGNE3 FROM W-IMPLICITE BEFORE 1.
           CLOSE E1 E2 E3.
           STOP RUN RETURNING 0.
])
AT_CHECK([${COMPILE} -w -o prog prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a E1], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   1  sp
0000020   I   m   p   l   i   c   i   t   e  cr  nl   B   E   F   O   R
0000040   E  cr  nl   I   M   P   L   I   C   I   T   E  cr  nl   B   E
0000060   F   O   R   E  cr  nl  nl   I   M   P   L   I   C   I   T   E
0000100  cr  nl   B   E   F   O   R   E  cr  nl  nl  nl   I   M   P   L
0000120   I   C   I   T   E  cr  nl  nl   A   F   T   E   R  cr   I   M
0000140   P   L   I   C   I   T   E  cr  nl  nl  nl   A   F   T   E   R
0000160  cr   I   M   P   L   I   C   I   T   E  cr  nl  nl  nl  nl   A
0000200   F   T   E   R  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000220   I   M   P   L   I   C   I   T   E  cr  nl   I   M   P   L   I
0000240   C   I   T   E  cr  nl  cr  ff
0000250
])
AT_CHECK([od -a E2], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   2  sp
0000020   B   e   f   o   r   e  cr  nl   B   E   F   O   R   E  cr  nl
0000040   I   M   P   L   I   C   I   T   E  cr  nl   B   E   F   O   R
0000060   E  cr  nl  nl   I   M   P   L   I   C   I   T   E  cr  nl   B
0000100   E   F   O   R   E  cr  nl  nl  nl   I   M   P   L   I   C   I
0000120   T   E  cr  nl  nl   A   F   T   E   R  cr   I   M   P   L   I
0000140   C   I   T   E  cr  nl  nl  nl   A   F   T   E   R  cr   I   M
0000160   P   L   I   C   I   T   E  cr  nl  nl  nl  nl   A   F   T   E
0000200   R  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000215
])

AT_CHECK([od -a E3], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   3  sp
0000020   A   f   t   e   r  cr  nl   B   E   F   O   R   E  cr  nl   I
0000040   M   P   L   I   C   I   T   E  cr  nl   B   E   F   O   R   E
0000060  cr  nl  nl   I   M   P   L   I   C   I   T   E  cr  nl   B   E
0000100   F   O   R   E  cr  nl  nl  nl   I   M   P   L   I   C   I   T
0000120   E  cr  nl  nl   A   F   T   E   R  cr   I   M   P   L   I   C
0000140   I   T   E  cr  nl  nl  nl   A   F   T   E   R  cr   I   M   P
0000160   L   I   C   I   T   E  cr  nl  nl  nl  nl   A   F   T   E   R
0000200  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000214
])

AT_CHECK([export COBEXTFH=disamextfh && ./prog], [0])

AT_CHECK([od -a E1], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   1  sp
0000020   I   m   p   l   i   c   i   t   e  cr  nl   B   E   F   O   R
0000040   E  cr  nl   I   M   P   L   I   C   I   T   E  cr  nl   B   E
0000060   F   O   R   E  cr  nl  nl   I   M   P   L   I   C   I   T   E
0000100  cr  nl   B   E   F   O   R   E  cr  nl  nl  nl   I   M   P   L
0000120   I   C   I   T   E  cr  nl  nl   A   F   T   E   R  cr   I   M
0000140   P   L   I   C   I   T   E  cr  nl  nl  nl   A   F   T   E   R
0000160  cr   I   M   P   L   I   C   I   T   E  cr  nl  nl  nl  nl   A
0000200   F   T   E   R  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000220   I   M   P   L   I   C   I   T   E  cr  nl   I   M   P   L   I
0000240   C   I   T   E  cr  nl  cr  ff
0000250
])
AT_CHECK([od -a E2], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   2  sp
0000020   B   e   f   o   r   e  cr  nl   B   E   F   O   R   E  cr  nl
0000040   I   M   P   L   I   C   I   T   E  cr  nl   B   E   F   O   R
0000060   E  cr  nl  nl   I   M   P   L   I   C   I   T   E  cr  nl   B
0000100   E   F   O   R   E  cr  nl  nl  nl   I   M   P   L   I   C   I
0000120   T   E  cr  nl  nl   A   F   T   E   R  cr   I   M   P   L   I
0000140   C   I   T   E  cr  nl  nl  nl   A   F   T   E   R  cr   I   M
0000160   P   L   I   C   I   T   E  cr  nl  nl  nl  nl   A   F   T   E
0000200   R  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000215
])

AT_CHECK([od -a E3], [0],
[0000000   S   A   U   T  sp   D   E  sp   P   A   G   E  cr  ff   3  sp
0000020   A   f   t   e   r  cr  nl   B   E   F   O   R   E  cr  nl   I
0000040   M   P   L   I   C   I   T   E  cr  nl   B   E   F   O   R   E
0000060  cr  nl  nl   I   M   P   L   I   C   I   T   E  cr  nl   B   E
0000100   F   O   R   E  cr  nl  nl  nl   I   M   P   L   I   C   I   T
0000120   E  cr  nl  nl   A   F   T   E   R  cr   I   M   P   L   I   C
0000140   I   T   E  cr  nl  nl  nl   A   F   T   E   R  cr   I   M   P
0000160   L   I   C   I   T   E  cr  nl  nl  nl  nl   A   F   T   E   R
0000200  cr   I   M   P   L   I   C   I   T   E  cr  nl
0000214
])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL read])
AT_DATA([TEST-FILE],
[a
ab
abc
abcd
abcde
abcdef
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ. DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[(a   )
(ab  )
(abc )
(abcd)
(abcd)
(abcd)
])

AT_CLEANUP

AT_SETUP([LINE SEQUENTIAL WRITE AFTER])

AT_DATA([prog.cob], [
       ID DIVISION.
       PROGRAM-ID. WRITEADV.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       SPECIAL-NAMES.
           DECIMAL-POINT         IS               COMMA.
      
       INPUT-OUTPUT SECTION.
      
       FILE-CONTROL.
           SELECT OA      ASSIGN TO               OA
           FILE   STATUS         IS               W-D-OA-STATUS
           ORGANIZATION          IS LINE          SEQUENTIAL.
      
       DATA DIVISION.
       FILE SECTION.
      
       FD   OA
            RECORDING      F
            BLOCK CONTAINS 0      RECORDS.
      
       01   OA-RECORD            PIC  X(26).
      
       WORKING-STORAGE SECTION.
      
       01 W-D-DATEN.
          05 W-D-OA-REC-CNT             PIC S9(04) COMP VALUE ZERO.
          05 W-D-OA-STATUS              PIC  X(02)      VALUE ZEROES.
             88 W-D-OA-STATUS-OK                        VALUE ZEROES.
          05 W-D-OA-SATZ                PIC  X(26)      VALUE
             'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
      
       LINKAGE SECTION.
      
       PROCEDURE DIVISION.
      
           PERFORM F0000-OPEN-OA
      
           PERFORM VARYING  W-D-OA-REC-CNT FROM 1 BY 1
                   UNTIL   (W-D-OA-REC-CNT > 5)
             PERFORM F0100-WRITE-OA
           END-PERFORM
      
           PERFORM F0200-CLOSE-OA
      
           GOBACK.
      
       F0000-OPEN-OA SECTION.
           OPEN OUTPUT OA
      
           EVALUATE TRUE
           WHEN W-D-OA-STATUS-OK
             CONTINUE
           WHEN OTHER
             DISPLAY 'ERROR OPEN OA:' W-D-OA-STATUS
           END-EVALUATE
      
           EXIT.
      
       F0100-WRITE-OA SECTION.
           WRITE OA-RECORD FROM W-D-OA-SATZ AFTER ADVANCING 1
      
           EVALUATE TRUE
           WHEN W-D-OA-STATUS-OK
             CONTINUE
           WHEN OTHER
             DISPLAY 'ERROR WRITE OA:' W-D-OA-STATUS
           END-EVALUATE
      
           EXIT.
      
       F0200-CLOSE-OA SECTION.
           CLOSE OA
      
           EVALUATE TRUE
           WHEN W-D-OA-STATUS-OK
             CONTINUE
           WHEN OTHER
             DISPLAY 'ERROR CLOSE OA:' W-D-OA-STATUS
           END-EVALUATE
      
           EXIT.
      
       END PROGRAM WRITEADV.
])

AT_CHECK([${COMPILE} -o prog -w prog.cob])
AT_CHECK([./prog], [0], [])
AT_CHECK([od -a OA], [0], 
[0000000  nl   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O
0000020   P   Q   R   S   T   U   V   W   X   Y   Z  cr  nl   A   B   C
0000040   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S
0000060   T   U   V   W   X   Y   Z  cr  nl   A   B   C   D   E   F   G
0000100   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W
0000120   X   Y   Z  cr  nl   A   B   C   D   E   F   G   H   I   J   K
0000140   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z  cr
0000160  nl   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O
0000200   P   Q   R   S   T   U   V   W   X   Y   Z  cr
0000214
])

AT_CLEANUP

AT_SETUP([ASSIGN to KEYBOARD/DISPLAY])

AT_DATA([TEST-FILE],
[a
ab
abc
abcd
abcde
abcdef
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN  KEYBOARD
                        ORGANIZATION IS LINE SEQUENTIAL.
       SELECT TEST-OUT  ASSIGN  DISPLAY
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(80).
       FD TEST-OUT.
       01 TEST-REC-OUT  PIC X(80).
       PROCEDURE        DIVISION.
       A00.
           OPEN INPUT  TEST-FILE.
           OPEN OUTPUT TEST-OUT.
       A01.
           READ TEST-FILE AT END
                GO TO Z99
           END-READ.
           WRITE TEST-REC-OUT FROM TEST-REC
           END-WRITE.
           GO TO A01.
       Z99.
           CLOSE TEST-FILE.
           CLOSE TEST-OUT.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([cat TEST-FILE | ./prog], [0],
[a
ab
abc
abcd
abcde
abcdef
])

AT_CLEANUP

AT_SETUP([Environment/Argument variable])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4).
       01 Y             PIC X(8).
       01 Z             PIC 9(4).
       PROCEDURE        DIVISION.
           DISPLAY "TEST_ENV" UPON ENVIRONMENT-NAME
           END-DISPLAY.
           ACCEPT X FROM ENVIRONMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" X ")"
           END-DISPLAY.
           DISPLAY "RXW" UPON ENVIRONMENT-VALUE
           END-DISPLAY.
           ACCEPT X FROM ENVIRONMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" X ")"
           END-DISPLAY.
           ACCEPT Y FROM ARGUMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" Y ")"
           END-DISPLAY.
           ACCEPT Z FROM ARGUMENT-NUMBER
           END-ACCEPT.
           DISPLAY "(" Z ")"
           END-DISPLAY.
           STOP RUN.
])

export TEST_ENV=OK
AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog CHECKPAR], [0],
[(OK  )
(RXW )
(CHECKPAR)
(0001)
])

AT_CLEANUP

AT_SETUP([DECIMAL-POINT is COMMA (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00,50
])

AT_CLEANUP

AT_SETUP([DECIMAL-POINT is COMMA (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[03,00
])

AT_CLEANUP

AT_SETUP([DECIMAL-POINT is COMMA (3)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[01,50
])

AT_CLEANUP

AT_SETUP([DECIMAL-POINT is COMMA (4)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00,10
])

AT_CLEANUP

AT_SETUP([DECIMAL-POINT is COMMA (5)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           COMPUTE X=1 + ,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           COMPUTE X=1*,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[01,10
00,10
])

AT_CLEANUP

AT_SETUP([78 Level (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       78  X            VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([78 Level (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z.
       78  X            VALUE "OK".
       78  Y            VALUE "OK".
           03  FILLER   PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY X Z Y
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OKOKOK
])

AT_CLEANUP

AT_SETUP([78 Level (3)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       78  X            VALUE "OK".
       01  Z            PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY Z X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OKOK
])

AT_CLEANUP

AT_SETUP([SYMBOLIC CHARACTERS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       SYMBOLIC CHARACTERS CHARA  CHARB  CHARC
                 ARE       041     042     043.
       WORKING-STORAGE SECTION.
       01 CX PIC X VALUE CHARC.
       01 BX PIC X(3) .


       PROCEDURE        DIVISION.
           MOVE ALL CHARC TO BX
           DISPLAY CHARA  CHARB  CX  BX
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[()****
])

AT_CLEANUP

AT_SETUP([Unreachable statement])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       P01.
           GO TO P02.
           DISPLAY "INVALID"
           END-DISPLAY.
       P02.
           STOP RUN.
])

AT_CHECK([${COMPILE} -Wunreachable prog.cob], [0], ,
[prog.cob: In paragraph 'P01':
prog.cob:8: Warning: Unreachable statement
])

AT_CLEANUP

AT_SETUP([CHECKPOINT CONTINUE ])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC XX VALUE "KO".
       PROCEDURE        DIVISION.
           DISPLAY Z .
	   MOVE "OK" TO Z
	   CHECKPOINT CONTINUE
           DISPLAY Z.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} -fcheckpoint prog.cob])
AT_CHECK([cobcrun prog], [0],
[KO
OK
])
AT_CHECK([cobcrun --reload prog], [0],
[OK
])
AT_CHECK([cobcrun --checkpoint-erase prog], [0],
[KO
OK
])
AT_CHECK([cobcrun --checkpoint-erase --reload prog], [0],
[OK
])

AT_CHECK([cobcrun --checkpoint-erase --reload prog], [147],,
[prog.cob:0: libcob: Can't open context file prog.ctx for reading
])


AT_CLEANUP

AT_SETUP([CHECKPOINT CONTINUE II ])

AT_DATA([called.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      called.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       LINKAGE          SECTION. 
       01  Y            PIC XX.
       PROCEDURE        DIVISION USING Y.
           DISPLAY Y .
	   MOVE "33" TO Y
	   CHECKPOINT CONTINUE
           DISPLAY Y.          
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC XX VALUE "KO".
       PROCEDURE        DIVISION.
	   MOVE "OK" TO Z
	   CALL "called" USING Z.
           DISPLAY Z.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} -fcheckpoint prog.cob called.cob])
AT_CHECK([cobcrun prog], [0],
[OK
33
33
])
AT_CHECK([cobcrun --reload prog], [0],
[33
33
])

AT_CLEANUP

AT_SETUP([CHECKPOINT EXIT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC XX VALUE "KO".
       PROCEDURE        DIVISION.
           DISPLAY Z .
	   MOVE "OK" TO Z
	   CHECKPOINT EXIT 5
           DISPLAY Z.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} -fcheckpoint prog.cob])
AT_CHECK([cobcrun prog], [5],
[KO
])
AT_CHECK([cobcrun --reload prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([CHECKPOINT EXIT II ])

AT_DATA([called.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      called.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       LINKAGE          SECTION. 
       01  Y            PIC XX.
       PROCEDURE        DIVISION USING Y.
           DISPLAY Y .
	   MOVE "33" TO Y
	   CHECKPOINT EXIT 5
           DISPLAY Y.          
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC XX VALUE "KO".
       PROCEDURE        DIVISION.
	   MOVE "OK" TO Z
	   CALL "called" USING Z.
           DISPLAY Z.
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} -fcheckpoint prog.cob called.cob])
AT_CHECK([cobcrun prog], [5],
[OK
])
AT_CHECK([cobcrun --reload prog], [0],
[33
33
])

AT_CLEANUP

AT_SETUP([ALTER GO TO & PERFORM])

AT_DATA([prog.cob], [
      *-----------------------------------------------------------------
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
      *-----------------------------------------------------------------
       PROCEDURE DIVISION.
      *-----------------------------------------------------------------
       main section.
           GO TO AA-00.
       AA-NEXT00.
           ALTER AA-00 TO BB-01
           GO TO AA-00.
       AA-NEXT01.
           ALTER AA-00 TO BB-02
           PERFORM AA-00 thru BB-END .
       AA-NEXT02.
           ALTER AA-00 TO BB-03
           PERFORM AA-00 thru BB-END .
           DISPLAY "EXIT"
           stop run.
       AA-00.
            GO TO BB-00.
       BB-00.
            DISPLAY "BB-00"
            GO TO AA-NEXT00.
       BB-01.
            DISPLAY "BB-01"
            GO TO AA-NEXT01.
       BB-02.
            DISPLAY "BB-02"
            .
       BB-03.
            DISPLAY "BB-03"
            .
       BB-END.
      *-----------------------------------------------------------------
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[BB-00
BB-01
BB-02
BB-03
BB-03
EXIT
])

AT_CLEANUP

AT_SETUP([MF5.0 DISPLAY NUMERIC EMULATION])

AT_DATA([myconf.cnf], [
include "default.conf"
binary-truncate: no
move-spaces-to-displaynumeric:  ok
initalize-to-value: yes
displaynumeric-mf50: yes
])

AT_CHECK([${COMPILE} -w -conf=myconf.cnf ${TEMPLATE}/TSTMFC5.cbl])
AT_CHECK([./TSTMFC5], [0],
[Case                           | Init Type            | 0        | ZEROES   | "0000"   | SPACES   | "    "   | DISPLAY.
Test PIC 9                     | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9                     | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9                     | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9                     | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9                     | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9                     | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9                     | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9                     | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9                    | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9 REDEFINES PIC X     | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | Initialization       | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 REDEFINES PIC X     | Initialization       | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC S9 REDEFINES PIC X    | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 REDEFINES PIC X    | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9 IN GROUP            | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP            | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9 IN GROUP            | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP           | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC 9 IN GROUP REDEFINES  | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | No initialization    | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | MOVE SPACES          | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | MOVE X               | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | Initialization       | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC 9 IN GROUP REDEFINES  | Initialization       | <>       | <>       | <>       | ==       | ==       | ##    ##
Test PIC S9 IN GROUP REDEFINES | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | No initialization    | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | MOVE SPACES          | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | MOVE X               | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
Test PIC S9 IN GROUP REDEFINES | Initialization       | ==       | ==       | ==       | <>       | <>       | ##0000##
])

AT_CLEANUP

AT_SETUP([MF5.0 DISPLAY NUMERIC EMULATION II])

AT_DATA([myconf.cnf], [
include "mf.conf"
move-spaces-to-displaynumeric:  ok
initalize-to-value: yes
displaynumeric-mf50: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       1 W-ITEMNUM-D PIC 9(5) VALUE 0.
          88 FOPTION VALUES 13.
          88 CA VALUES 1 THRU 4,23,25,27,33,34,35,43,45.
          88 VA VALUES 38.
          88 U16 VALUES 6,7,8,10,11,13,21,37,42,53.
          88 U32 VALUES 5,19,20,24,28 THRU 32,36,39,47,48.
          88 I16 VALUES 9,14 THRU 18.
          88 I32 VALUES 12,22,40,41,44,46,50,51,52,54 THRU 61,64.
          88 I64 VALUES 49,62,63.

       1 W-ITEMNUM-D-R REDEFINES W-ITEMNUM-D PIC X(5).
       1 W-ITEMNUM-AC PIC XX VALUE SPACES.
       01 WS-DAGNR.
         03 WS-DAGNR-R PIC 9(3).
       01 LU1-WEEKDAG.
         03 LU1-WEEKDAG-R PIC 9.

       PROCEDURE DIVISION.      

       0000-MAIN.
           MOVE "13" TO W-ITEMNUM-AC.
           UNSTRING W-ITEMNUM-AC DELIMITED BY SPACES INTO W-ITEMNUM-D.
           DISPLAY "W-ITEMNUM-D   IS '" W-ITEMNUM-D "'".
           DISPLAY "W-ITEMNUM-D-R IS '" W-ITEMNUM-D-R "'".
           EVALUATE TRUE
       
             WHEN FOPTION
               DISPLAY "FLAG  FOPTION"       
             WHEN CA
               DISPLAY "FLAG  CA"

             WHEN VA
               DISPLAY "FLAG  VA"
             WHEN U16
               DISPLAY "FLAG013"
             WHEN U32
               DISPLAY "FLAG014"
             WHEN I16
               DISPLAY "FLAG015"
             WHEN I32
               DISPLAY "FLAG016"
             WHEN I64
               DISPLAY "FLAG017"
             WHEN OTHER
               DISPLAY "FLAG018"
           END-EVALUATE.
           MOVE "13" TO W-ITEMNUM-D.
           DISPLAY "W-ITEMNUM-D   IS '" W-ITEMNUM-D "'".
           DISPLAY "W-ITEMNUM-D-R IS '" W-ITEMNUM-D-R "'".
           move 2 to LU1-WEEKDAG-R .
           move 135 to WS-DAGNR-R.

           IF   LU1-WEEKDAG-R < WS-DAGNR-R
                display "OK"
           ELSE
                display "KO"
           END-IF.
           STOP RUN RETURNING 0.
])

AT_CHECK([${COMPILE} -w -conf=myconf.cnf prog.cob])
AT_CHECK([./prog], [0],
[W-ITEMNUM-D   IS '00013'
W-ITEMNUM-D-R IS '00013'
FLAG  FOPTION
W-ITEMNUM-D   IS '00013'
W-ITEMNUM-D-R IS '00013'
OK
])

AT_CLEANUP

AT_SETUP([MF5.0 DISPLAY NUMERIC EMULATION III])

AT_DATA([myconf_yy.cnf], [
include "mf.conf"
move-spaces-to-displaynumeric:  ok
displaynumeric-mf50: yes
])

AT_DATA([myconf_yn.cnf], [
include "mf.conf"
move-spaces-to-displaynumeric:  ok
displaynumeric-mf50: yes
displaynumeric-edited-mf50:no
])
AT_DATA([myconf_nn.cnf], [
include "mf.conf"
move-spaces-to-displaynumeric:  ok
displaynumeric-mf50: no
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TEST_FILLER.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. LEVEL-64.
       OBJECT-COMPUTER. LEVEL-64.
       SPECIAL-NAMES.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT FTEST   ASSIGN TO EXTERNAL FTEST_FILLER
              ORGANIZATION SEQUENTIAL.
      
       DATA DIVISION.
       FILE SECTION.
      *
       FD FTEST.
        01  L1.
         02  FILLER                          PIC X(24).


       WORKING-STORAGE SECTION.
        01  L2.
          02  FILLER                          PIC X VALUE "'".
          02  ENTETE                          PIC X.
          02  PR-NUMGRILLE  PIC 9(4) COMP-3.
          02  ENR-PARAM-2-PAGE                PIC 99.
          02  ENR-PARAM-FILLER                PIC X(3).
          02  Borne1                          PIC X VALUE "'".
          02  L1-PAGE                         PIC ZBZZ9B999.
          02  Borne2                          PIC X VALUE "'".
          02  BINField                        COMP PIC 9999.
          02  FILLER                          PIC X VALUE "'".
      
       PROCEDURE DIVISION.
           OPEN OUTPUT FTEST.
           MOVE "AAA" TO ENR-PARAM-FILLER.
           MOVE L2 TO L1.
           WRITE L1 .
           initialize L2.
           MOVE "BBB" TO ENR-PARAM-FILLER.
           MOVE L2 TO L1.
           WRITE L1 .
           CLOSE FTEST.
           move 0 to L1-PAGE.
           EXIT.
])

AT_CHECK([${COMPILE} -w -conf=myconf_yy.cnf prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_FILLER], [0],
[0000000   '  sp nul nul  si  sp  sp   A   A   A   '  sp  sp  sp  sp  sp
0000020  sp  sp  sp  sp   ' nul nul   '   '  sp nul nul  si   0   0   B
0000040   B   B  sp  sp  sp  sp  sp   0  sp   0   0   0  sp nul nul   '
0000060
])
AT_CHECK([${COMPILE} -w -conf=myconf_yn.cnf prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_FILLER], [0],
[0000000   '  sp nul nul  si  sp  sp   A   A   A   '  sp  sp  sp  sp   0
0000020  sp   0   0   0   ' nul nul   '   '  sp nul nul  si   0   0   B
0000040   B   B  sp  sp  sp  sp  sp   0  sp   0   0   0  sp nul nul   '
0000060
])
AT_CHECK([${COMPILE} -w -conf=myconf_nn.cnf prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_FILLER], [0],
[0000000   '  sp nul nul  si   0   0   A   A   A   '  sp  sp  sp  sp   0
0000020  sp   0   0   0   ' nul nul   '   '  sp nul nul  si   0   0   B
0000040   B   B  sp  sp  sp  sp  sp   0  sp   0   0   0  sp nul nul   '
0000060
])
AT_CLEANUP

AT_SETUP([MF5.0 DISPLAY NUMERIC EMULATION IV])

AT_DATA([myconf.cnf], [
include "mf.conf"
move-spaces-to-displaynumeric:  ok
initalize-to-value: yes
displaynumeric-mf50: yes
move-picx-to-pic9: mf50
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.   prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01  GRP1.
           05  GRP1-VAR PIC X(3).
       01  FILLER REDEFINES GRP1.
           05  VAR1   PIC 9(3).
       PROCEDURE DIVISION.
         MOVE '@@@' TO GRP1-VAR.
         PERFORM EXEC-TEST.
         MOVE '   ' TO GRP1-VAR.
         PERFORM EXEC-TEST.
         MOVE '001' TO GRP1-VAR.
         PERFORM EXEC-TEST.
         MOVE '000' TO GRP1-VAR.
         PERFORM EXEC-TEST.
         STOP RUN.

       EXEC-TEST.
         DISPLAY 'GRP1-VAR=' GRP1-VAR "|".
         IF VAR1 = 0 THEN
           DISPLAY '= 0 TRUE'
         ELSE
           DISPLAY '= 0 FALSE'
         END-IF.
         IF VAR1 NOT = 0 THEN
           DISPLAY 'NOT = 0 TRUE'
         ELSE
           DISPLAY 'NOT = 0 FALSE'
         END-IF.
])

AT_CHECK([${COMPILE} -w -conf=myconf.cnf prog.cob])
AT_CHECK([./prog], [0],
[]GRP1-VAR=@@@|
= 0 FALSE
NOT = 0 TRUE
GRP1-VAR=   |
= 0 FALSE
NOT = 0 TRUE
GRP1-VAR=001|
= 0 FALSE
NOT = 0 TRUE
GRP1-VAR=000|
= 0 TRUE
NOT = 0 FALSE
)

AT_CLEANUP


AT_SETUP([MF5.0 DISPLAY NUMERIC EMULATION V])

AT_DATA([prog.cob], [
00001  IDENTIFICATION DIVISION.                                         01/09/16
00002  PROGRAM-ID.    TESTPROG.                                         TESTPROG
00012  DATA DIVISION.
00015  WORKING-STORAGE SECTION.
00016
00017  01  WS-CONSTANTS.
00018      05  WS-10000                 PIC S9(5)   VALUE   +10000.
00019      05  WS-SERIAL-NO             PIC 9(4)    VALUE  1.
00020  PROCEDURE DIVISION.
00021  0000-MAINLINE.
00022      MOVE 1 TO WS-SERIAL-NO.
00023      PERFORM UNTIL WS-SERIAL-NO >= WS-10000
00025          ADD 1 TO  WS-SERIAL-NO
               if ws-serial-no = 0 then 
                   DISPLAY "EXIT ws-serial-no = 0"
                   exit perform
               END-IF
00026      END-PERFORM.
00027      DISPLAY  "Out of loop ws-serial-no:" WS-SERIAL-NO.
00028      DISPLAY  "Out of loop ws-10000:" WS-10000.
00029      STOP RUN.
])

AT_DATA([myconf.cnf], [
include "ibm.conf"
#assign-clause: mf
#accept-but-ignore-comp6-signed=yes
signed-comp6-as-comp3=yes
complex-odo=yes
eject-statement: ok
entry-statement: ok
larger-redefines-ok: yes
relaxed-syntax-check: yes
relax-level-hierarchy: yes
top-level-occurs-clause:ok
move-spaces-to-displaynumeric: yes
move-picx-to-pic9: mvs
move-spaces-to-displaynumeric:yes
move-picx-to-pic9:mf50
div-check: yes
relax-bounds-check: yes
notrunc: yes
#sign-ebcdic: ok

# OK default byte tested : MF DEFAULTBYTE"00"
defaultbyte: 00
use-defaultbyte: yes

# corresponds to MF opt : NOTRUNC
binary-truncate: no
binary-size: 2-4-8

# Enable compatible runtime MF 5.0 behaviors for move and initialize of DISPLAY NUMERIC
displaynumeric-mf50: yes

#If set to .yes., EXIT PROGRAM , will never be ignored; MF never ignore EXIT PROGRAM
exit-program-forced: yes

#NOSPZERO -MF
spzero: yes
#spzero: no
sticky-linkage: fixed

external-mapping: yes
C-cmd-line: yes
variable-rec-pad-mf:yes
])

AT_CHECK([${COMPILE} -w -conf=myconf.cnf prog.cob])
AT_CHECK([./prog], [0],
[EXIT ws-serial-no = 0
Out of loop ws-serial-no:0000
Out of loop ws-10000:10000+
])

AT_CLEANUP

AT_SETUP([cob_lonjump & cob_rtd_tidy TS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC XX VALUE "KO".
       PROCEDURE        DIVISION.
	   MOVE "OK" TO Z
           DISPLAY Z.
           STOP RUN.
])

AT_DATA([caller.c], [
#include "libcob.h"
int main (int argc, char **argv)
{
	cit_runtime_t * const rtd = cob_get_rtd();
	int (*func)();

	cob_init(rtd, argc, argv);
	func = cob_resolve(rtd, "prog");
	if (cob_setjmp(rtd) == 0) {
		func();
	        printf ("CRETURN\n");

	}
	printf ("C1\n");
	cob_rtd_tidy(rtd);
	cob_set_rtd(NULL);
	printf ("C2\n");
	return 0;
}
])

AT_CHECK([${COMPILE} -fno-main -fthread-safe caller.c prog.cob])
AT_CHECK([./caller], [0],
[OK
C1
C2
])

AT_CHECK([${COMPILE} -fno-main caller.c prog.cob])
AT_CHECK([./caller], [0],
[OK
C1
C2
])

AT_CLEANUP

AT_SETUP([CALL INTO])

AT_DATA([citconf.conf], [
])


AT_DATA([cfunction.c], [
typedef struct
{
    unsigned short a1;
    unsigned short a2;
    unsigned short a3;
} datastruct;

static datastruct work;

datastruct * cfunction (datastruct*in)
{
    work = *in;
    work.a1 ++;
    return &work;
}
])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.  
       data division.
       working-storage section.
       01 RCUNIVPTR  USAGE POINTER.
       01 STRUCT.
         02 A1 pic 9(4) COMP-5.
         02 A2 pic 9(4) COMP-5.
         02 A3 pic 9(4) COMP-5.

       01 STRUCT2  BASED.
         02 B1 pic 9(4) COMP-5.
         02 B2 pic 9(4) COMP-5.
         02 B3 pic 9(4) COMP-5.
       01 STRUCT3.
         02 C1 pic 9(4) COMP-5.
         02 C2 pic 9(4) COMP-5.
         02 C3 pic 9(4) COMP-5.
       procedure division.
       INITIALIZE STRUCT.
       INITIALIZE STRUCT3.
       CALL "cfunction" USING
	        BY REFERENCE STRUCT
       GIVING RCUNIVPTR .
       SET ADDRESS OF STRUCT2 TO RCUNIVPTR.
       IF A1 = 0 AND B1 = 1 AND C3 = 0 
       THEN
           DISPLAY "OK"
       ELSE
           DISPLAY "ERROR PTR"
       END-IF.
       INITIALIZE STRUCT.
       INITIALIZE STRUCT2.
       CALL "cfunction" USING
	        BY REFERENCE STRUCT
       GIVING ADDRESS OF STRUCT2 .
       IF A1 = 0 AND B1 = 1 AND C3 = 0 
       THEN
           DISPLAY "OK"
       ELSE
           DISPLAY "ERROR ADDR"
       END-IF.
       INITIALIZE STRUCT.
       INITIALIZE STRUCT2.
       INITIALIZE RCUNIVPTR.
       SET ADDRESS OF STRUCT2 TO RCUNIVPTR.
       CALL "cfunction" USING
	        BY REFERENCE STRUCT
       GIVING INTO STRUCT3 .
       IF A1 = 0  AND C1 = 1 
       THEN
           DISPLAY "OK"
       ELSE
           DISPLAY "ERROR INTO"
       END-IF.
])

AT_CHECK([${COMPILE} prog.cob cfunction.c])
AT_CHECK([./prog], [0],
[OK
OK
OK
])

AT_CLEANUP

AT_SETUP([CALL static-link name ])

AT_DATA([citconf.conf], [
include "mf.conf"
static-link:cFunction
static-link:PROG-2
external-link:cFunction-1
])



AT_DATA([cfunction.c], [

int cFunction (char *in)
{
    printf (in);
    return 0;
}

int cFunction_1 (char *in)
{
    printf (in);
    return 0;
}

int cFunction2 (char *in)
{
    printf (in);
    return 0;
}
int CFUNCTION3 (char *in)
{
    printf (in);
    return 0;
}
])

AT_DATA([prog2.cob], [
       identification division.
       program-id. Prog-2.  
       data division.
       working-storage section.
       procedure division.
       CALL "cfunction-1" USING "OK"
       CALL "CFUNCTION-1" USING "OK"
       CALL "cFunction-1" USING "OK"
       .
])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.  
       data division.
       working-storage section.
       procedure division.
       CALL "cfunction" USING "OK"
       CALL "CFUNCTION" USING "OK"
       CALL "cFunction" USING "OK"
       CALL "PROG-2"
       CALL "cFunction2" USING "OK"
       CALL "cFunction3" USING "OK"
       .
])

AT_CHECK([${COMPILE} -conf=citconf.conf prog.cob cfunction.c prog2.cob])
AT_CHECK([./prog], [0],
[OKOKOKOKOKOKOKOK])
AT_CHECK([${COMPILE} -conf=citconf.conf -fcall-opt prog.cob cfunction.c prog2.cob])
AT_CHECK([./prog], [0],
[OKOKOKOKOKOKOKOK])

AT_CLEANUP

AT_SETUP([CALL prototype ])

AT_DATA([cfunction.c], [
#include "stdio.h"

int cfunction_val(char *s, char c1, short c2, int c3, long long c4)
{
    printf("'%s' %d %d %d %d %lld\n", s, strlen(s), (int)c1, (int)c2, c3, c4);
    return 0;
}

int cfunction_ref(char *s, char *c1, short *c2, int *c3, long long *c4)
{
    printf("'%s' %d ", s, strlen(s));
    if (c1) {
        printf("%d ",  (int)(*c1));        
    } else {
        printf("<NULL>");
    }
    if (c2) {
        printf("%d ",  (int)(*c2));        
    } else {
        printf("<NULL>");
    }
    if (c3) {
        printf("%d ", (int)(*c3));        
    } else {
        printf("<NULL>");
    }
    if (c4) {
        printf("%lld\n",  (*c4));        
    } else {
        printf("<NULL>\n");
    }
    return 0;
}

int cfunction_any(void *any , int c1)
{
    printf("'%s' %d\n", (char*)any, (int)c1);
    return 0;
}

])
AT_DATA([cproto.cpy], [
       program-id. "c_typedefs" is external.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  schar                   pic x is typedef.
       77  uns-schar               pic  9(2)  comp-5 is typedef.
       77  short                  pic s9(4)  comp-5 is typedef.
       77  uns-short              pic  9(4)  comp-5 is typedef.
       77  int                    pic s9(9)  comp-5 is typedef.
       77  uns-int                pic  9(9)  comp-5 is typedef.
       77  long                   pic s9(9)  comp-5 is typedef.
       77  uns-long               pic  9(9)  comp-5 is typedef.
       77  l-long                 pic s9(18) comp-5 is typedef.
       77  uns-l-long             pic  9(18) comp-5 is typedef.
       end program "c_typedefs".

       program-id. "c_typedefs" is external.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
	 special-names.
           call-convention 3 is Pascal
           call-convention 0 is c-call.
      $set constant C-FUNCTION-VAL "cfunction_val"
      $set constant C-FUNCTION-REF "cfunction_ref"
      $set constant C-FUNCTION-ANY "cfunction_any"
       
       PROCEDURE DIVISION.
        entry 
	      C-FUNCTION-VAL
	      c-call using
               by reference  schar delimited
               by value  uns-schar
               by value  uns-short
               by value  uns-int
               by value  uns-l-long
           returning         int

        entry 
	      C-FUNCTION-REF
	      c-call using
               by reference  schar delimited
               by reference  uns-schar
               by reference  uns-short
               by reference  uns-int
               by reference  uns-l-long
           returning         int

        entry 
	      C-FUNCTION-ANY
	      c-call using
               by reference  any
               by value      uns-int
           returning         int
        .
       end program "c_typedefs".
])

AT_DATA([prog.cob], [
       COPY "cproto.cpy".
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 maingrp.
         02 grpstr.
           03 AV-STR PIC XX VALUE 'AV'.
           03 STR PIC X(10) VALUE "STR10".
           03 AP-STR PIC XX VALUE 'AP'.
         02 zz-STR PIC 0  VALUE X'00'.
       01 A1  PIC 99 VALUE 1.
       01 A2  PIC 99 VALUE 2.
       01 A3  PIC 99 VALUE 3.
       01 A4  PIC 99 VALUE 4.

       PROCEDURE        DIVISION.
       CALL "cfunction_val" USING "vallit" 1 2 3 4.
       CALL "cfunction_ref" USING "reflit" 1 2 3 4.
       DISPLAY "'" grpstr "'"
       CALL "cfunction_val" USING STR A1 A2 A3 A4.
       CALL "cfunction_ref" USING STR A1 A2 A3 A4.
       DISPLAY "'" grpstr "'"
       CALL "cfunction_any" USING maingrp function BYTE-LENGTH(maingrp).
       .
])

AT_CHECK([${COMPILE} -std=mf -w  prog.cob cfunction.c])
AT_CHECK([./prog], [0],
['vallit' 6 1 2 3 4
'reflit' 6 1 2 3 4
'AVSTR10     AP'
'STR10     ' 10 1 2 3 4
'STR10     ' 10 1 2 3 4
'AVSTR10     AP'
'AVSTR10     AP' 15
])

AT_CLEANUP


AT_SETUP([TYPEDEF])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       DATA      DIVISION.
       WORKING-STORAGE SECTION.
       01 broll PIC XXX.
       01 bd is typedef. 
         02 keya PIC S9(5)V99 USAGE DISPLAY.
	 02 keybb PIC X(10).
       01 COCO.
         04 b  USAGE bd.
         04 c  USAGE bd.
       PROCEDURE        DIVISION.
       MOVE 88 TO keya of b IN COCO.
       MOVE 88 TO keybb of b IN COCO.
       CALL "prog2" 
       .
       END PROGRAM prog.



      * IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       DATA      DIVISION.
       WORKING-STORAGE SECTION.
       01 char PIC 99999 USAGE COMP-X is typedef.
       01 broll PIC XXX.

       01 bx USAGE char.
       01 COCO.
         04 a  usage char.
         04 b  USAGE bd.
         04 c  USAGE bd.
       01 COCO2.
         04 a  usage char.
         04 b  USAGE bd.
       01 COCO3.
         04 a  usage char.
         04 b  USAGE bd.
         
      
       PROCEDURE        DIVISION.
         MOVE 9  TO a IN COCO2.
         MOVE 9  TO bx.
         MOVE 99 TO keya of b IN COCO.
         MOVE 99 TO keybb of b IN COCO.

         DISPLAY "'" b IN COCO "'". 
         DISPLAY "'" b IN COCO2 "'".
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
['000990099        '
'0000000          '
])

AT_CLEANUP

AT_SETUP([TYPEDEF II])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01 PGM-TEXT-INFO-TYPE IS TYPEDEF.
        05 RETURN-LANGID PIC X(3).
        05 RETURN-CCSID PIC 9(5).

       01 PGM-TEXT-INFO-TYPEL IS TYPEDEF.
        05 RETURN-LANGIDL PIC X(3).
        05 RETURN-CCSIDL PIC 9(5).

       01 PGM-TEXT-INFO-TYPE2 IS TYPEDEF.
        05 CC1 PIC 9(5) VALUE 5.
        05 VALA.
          10 VALA1 OCCURS 1 TO 5 TIMES 
	         DEPENDING ON 
                 CC1 OF PGM-TEXT-INFO-TYPE2 PIC X.
       
       01 PGM-TEXT-INFOS .
        02 COCO1 .
            05 CC1 PIC 9(5).
        02 COCO2 .
            05 VALA OCCURS 1 TO 7 TIMES 
              DEPENDING ON CC1 OF PGM-TEXT-INFOS .
                10 VALA01 PIC X(3).

       01 PGM-TEXT-INFO USAGE PGM-TEXT-INFO-TYPE.       
       01 PGM-TEXT-INFO2 USAGE PGM-TEXT-INFO-TYPE2.       
       01 PGM-TEXT-INFO3 USAGE PGM-TEXT-INFO-TYPE2.       

       LINKAGE SECTION.
       01 PGM-TEXT-INFOL USAGE PGM-TEXT-INFO-TYPEL.       
      *****************************************************************
       PROCEDURE DIVISION.
      *****************************************************************
       MAIN SECTION.
           MOVE "ABC" TO RETURN-LANGID
           MOVE 123 TO RETURN-CCSID.
           MOVE 5 TO CC1 OF PGM-TEXT-INFO2.
           MOVE 5 TO CC1 OF PGM-TEXT-INFO3.
           MOVE "12345" TO VALA OF PGM-TEXT-INFO2.
           MOVE "12345" TO VALA OF PGM-TEXT-INFO3.
           DISPLAY  VALA OF PGM-TEXT-INFO2.
           DISPLAY  VALA OF PGM-TEXT-INFO3.
           MOVE 2 TO CC1 OF PGM-TEXT-INFO2.
           MOVE 3 TO CC1 OF PGM-TEXT-INFO3.
           DISPLAY  VALA OF PGM-TEXT-INFO2.
           DISPLAY  VALA OF PGM-TEXT-INFO3.
       MAIN-END.
           EXIT.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[12345
12345
12
123
])

AT_CLEANUP

AT_SETUP([TYPEDEF III])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
        WORKING-STORAGE SECTION.
        01 LGSAX-REC-TYP IS TYPEDEF.
            05 XLREC PIC X(4).
            05 XLEBENE PIC 9(5).
        
        01 XML-TAB.
        05 XML-REC OCCURS 1000 TIMES USAGE LGSAX-REC-TYP .
        01 XML-TAB-2.
        05 XML-REC-2 USAGE LGSAX-REC-TYP OCCURS 1000 TIMES  .
        01 DUMMY PIC X(4).
        
        01 group2.
          03 XML-REC-3 OCCURS 1000 TIMES.
            05 XLREC PIC X(4).
            05 XLEBENE PIC 9(5).
        PROCEDURE DIVISION.
        STEUER SECTION.
        STEUER-START.
        
       MOVE "AAAA" to  XLREC OF XML-REC(5) .
       MOVE "BBBB" to XLREC OF XML-REC-2(5) .
       MOVE "CCCC" to XLREC OF XML-REC-3(5) .
        
       DISPLAY "'" XLREC OF XML-REC(4) "'"
       DISPLAY "'" XLREC OF XML-REC(5) "'"
       DISPLAY "'" XLREC OF XML-REC(6) "'"
       DISPLAY "'" XLREC OF XML-REC-2(4) "'"
       DISPLAY "'" XLREC OF XML-REC-2(5) "'"
       DISPLAY "'" XLREC OF XML-REC-2(6) "'"
       DISPLAY "'" XLREC OF XML-REC-3(4) "'"
       DISPLAY "'" XLREC OF XML-REC-3(5) "'"
       DISPLAY "'" XLREC OF XML-REC-3(6) "'"

        EXIT PROGRAM
        STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
['    '
'AAAA'
'    '
'    '
'BBBB'
'    '
'    '
'CCCC'
'    '
])

AT_CLEANUP

AT_SETUP([TYPEDEF IV])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.              prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01  PAGENUM-TYPE IS TYPEDEF.
           05 PXMLFFDL2-RECORD            PIC X(12).
           05 PXMLFFDF REDEFINES PXMLFFDL2-RECORD.
      *    05 PXMLFFDF.
              06 MARK1                    PIC X(1).
              06 WHNAME                   PIC X(10).
              06 MARK2                    PIC X(1).

       01  PRTMAIN-STRUCT.
           05 OUTQ-AKT                    PIC X(100).
           05 PAGENUM-REC1 USAGE PAGENUM-TYPE.
           05 PAGENUM-REC2 redefines PAGENUM-REC1
                           USAGE PAGENUM-TYPE.
           05 PAGENUM-REC3 USAGE PAGENUM-TYPE.

       01  INSTALL-FLAG  PIC X COMP-X VALUE 0.
       01  INSTALL-ADDRS USAGE PROCEDURE-POINTER.

       PROCEDURE DIVISION.
       STEUER SECTION.
       ANFANG.
           move "B" to MARK1 OF PAGENUM-REC3.
           move "E" to MARK2 OF PAGENUM-REC3.
           MOVE "1234567890" TO WHNAME OF PAGENUM-REC3.
           move "B" to MARK1 OF PAGENUM-REC1.
           move "E" to MARK2 OF PAGENUM-REC1.
           MOVE "1234567890" TO WHNAME OF PAGENUM-REC1.
           DISPLAY "'" PAGENUM-REC1 "'".
           INITIALIZE PAGENUM-REC1.
           DISPLAY "'" PAGENUM-REC1 "'".
           move "B" to MARK1 OF PAGENUM-REC2.
           move "E" to MARK2 OF PAGENUM-REC2.
           MOVE "1234567890" TO WHNAME OF PAGENUM-REC2.
           DISPLAY "'" PAGENUM-REC1 "'".
           INITIALIZE PAGENUM-REC2.
           DISPLAY "'" PAGENUM-REC3 "'".
           INITIALIZE PAGENUM-REC3.
           DISPLAY "'" PAGENUM-REC1 "'".
           DISPLAY "'" PAGENUM-REC3 "'".
       ENDE.
           GOBACK.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
['B1234567890E'
'            '
'B1234567890E'
'B1234567890E'
'            '
'            '
])

AT_CLEANUP

AT_SETUP([CALL USING GIVING order ])

AT_DATA([called.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      called.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       LINKAGE          SECTION. 
       01  Y            PIC 99.
       01  R            PIC 99.
       PROCEDURE        DIVISION USING Y RETURNING R.
	   COMPUTE Y = Y + 1.
           MOVE Y TO R.  
	   GOBACK.
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC 99 VALUE 10.
       01  X            PIC 99 VALUE 10.
       PROCEDURE        DIVISION.
	   CALL "called" USING Z GIVING X.
           DISPLAY X .
	   MOVE 20 TO Z
	   CALL "called" GIVING X USING Z.
           DISPLAY X .
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} prog.cob called.cob])
AT_CHECK([cobcrun prog], [0],
[11
21
])

AT_CLEANUP

AT_SETUP([CALL Empty param ])

AT_DATA([called.cob], [
       identification division.
       program-id. called.
       environment division.
       configuration section.
       data division.
       file section.
       working-storage section.
       LINKAGE SECTION.
       01 ARG1 PIC X(500).
       01 ARG2 PIC X(10).
      ******************************************
       procedure division.
       prog section.
       debut.
           DISPLAY "called".
           GOBACK.
           
       ENTRY "OPENIPX" USING ARG1 ARG2.
       B.
           DISPLAY "OPENIPX".
           IF ADDRESS OF ARG1 = NULL THEN
                 DISPLAY "ARG1 NULL" 
           ELSE 
              IF ADDRESS OF ARG2 = NULL
                 DISPLAY "ARG2 NULL"
           END-IF.
           GOBACK.
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
    20 PROGRAM-ID. prog.
    40 ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
    90 INPUT-OUTPUT SECTION.
   100 FILE-CONTROL.
   170 DATA DIVISION.
   180 FILE SECTION.
   250 WORKING-STORAGE SECTION.
       01 FILE1 PIC X(500) VALUE "TEM.CBL".
       01 FILE2 PIC X(10) VALUE "TEM.dat".
       01 ST PIC 999.
       PROCEDURE DIVISION. 
       BEGIN.
          CALL "called".
          CALL "OPENIPX" USING FILE1 FILE2.
          CALL "OPENIPX" USING FILE1.
          CALL "OPENIPX" .
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} -std=mf -fnull-param prog.cob called.cob])
AT_CHECK([cobcrun prog], [0],
[called
OPENIPX
OPENIPX
ARG2 NULL
OPENIPX
ARG1 NULL
])

AT_CLEANUP


AT_SETUP([USAGE BITS ])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01 abd1.
         02 abd OCCURS 5 USAGE COMP-2.
       01 COCOBB.
         03 bd PIC S9(5) USAGE DISPLAY.
         03 bbb  REDEFINES bd PIC X(5) .
	 03 bitGrp REDEFINES bd.
	   05 bbit  PIC 1(40) USAGE BIT.
       01 bx PIC 1(24) USAGE COMP-5.
       01 ptr USAGE POINTER .
       01 COCO.
         02 a  PIC X.
         02 AR1.
            03 b1 PIC 1 USAGE BIT.
            03 b2 PIC 1(4) USAGE BIT.
            03 b3 PIC 1 USAGE BIT.
            03 b4 PIC 1 USAGE BIT.
            03 b5 PIC 1 USAGE BIT.
         02 AR22.
            03 b226 PIC 1(4) USAGE BIT.
            03 b227 PIC 1(6) USAGE BIT.
            03 AR222.
                05 b2226 PIC 1(4) USAGE BIT.
                05 b2227 PIC 1(6) USAGE BIT.
         02 AR2.
            03 b6 PIC 1(4) USAGE BIT.
            03 b7 PIC 1(60) USAGE BIT.
         02 AR3.
            03 b8 PIC 1(4) USAGE BIT.
            03 b9 PIC 1(61) USAGE BIT.
         02 AR4 REDEFINES AR3 .
            03 b10 PIC 1(60) USAGE COMP-5.
            03 b11 PIC 1(8) USAGE BIT.    
         02 AR5 .
            03 ba1 PIC 1 occurs 100 USAGE BIT.
            03 ba2 PIC 1 occurs 5   USAGE BIT.    
            03 ba3 PIC 1 occurs 2   USAGE BIT.    
            03 ba4 PIC 1(3) occurs 100 USAGE BIT.    
            03 b12 PIC 1(4) USAGE BIT.
            03 b13 PIC 1(6) USAGE BIT.

       PROCEDURE        DIVISION.
       MOVE 1 TO b2226.
       MOVE 1 TO b1.
       MOVE 3 TO b2.
       DISPLAY  b1 ":" b2 ":" b3 ":" b4 ":" b5 ":" b2226
       DISPLAY  FUNCTION LENGTH(AR1) ":" FUNCTION LENGTH(AR2).

       COMPUTE b2 = b2 + b1.
       DISPLAY  b1 ":" b2 ":" b3 ":" b4 ":" b5
       MOVE B'10101010' TO bx.
       MOVE bx TO bd.
       COMPUTE bx = bx + 1.
       DISPLAY bx ":" FUNCTION LENGTH(bx).
       MOVE -7777 TO bd
       DISPLAY bd ":" bbb ":" bbit ":" FUNCTION LENGTH(bd).
       MOVE H'FFFFFFFFFFFFFFFF' TO b6.
       MOVE H'FFFFFFFFFFFFFFFF' TO b7.
       DISPLAY  b6 ":" b7 ":" FUNCTION LENGTH(AR2).
       MOVE H'FFFFFFFFFFFFFFFF' TO b8.
       MOVE H'FFFFFFFFFFFFFFFF' TO b9.
       DISPLAY  b8 ":" b9 ":" FUNCTION LENGTH(AR3).
       DISPLAY  b10 ":" b11 ":" FUNCTION LENGTH(AR4).
       MOVE 1 TO b12.
       MOVE 1 TO b13.
       MOVE 1 TO ba1(5).
       MOVE 1 TO ba1(55).
       MOVE 1 TO ba2(4).
       MOVE 1 TO ba3(2).
       MOVE 1 TO ba4(5).
       MOVE 1 TO ba4(55).
       MOVE 1 TO bx.
       PERFORM UNTIL BX > 10 
          DISPLAY ba1(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       MOVE 50 TO bx.
       PERFORM UNTIL BX > 60 
          DISPLAY ba1(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       MOVE 1 TO bx.
       PERFORM UNTIL BX > 6 
          DISPLAY ba2(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       MOVE 1 TO bx.
       PERFORM UNTIL BX > 2 
          DISPLAY ba3(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       MOVE 1 TO bx.
       PERFORM UNTIL BX > 10 
          DISPLAY ba4(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       MOVE 50 TO bx.
       PERFORM UNTIL BX > 60 
          DISPLAY ba4(bx) NO ADVANCING
          ADD 1 TO BX   .
       DISPLAY  ":".
       DISPLAY  b12 ":" b13 ":" FUNCTION LENGTH(AR5).
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[1:0011:0:0:0:0001
1:8
1:0100:0:0:0
000000000000000010101011:3
-07777:0777w:0011000000110111001101110011011101110111:5
1111:111111111111111111111111111111111111111111111111111111111111:8
1111:1111111111111111111111111111111111111111111111111111111111111:9
111111111111111111111111111111111111111111111111111111111111:10000000:9
0000100000:
00000100000:
000100:
01:
000000000000001000000000000000:
000000000000000001000000000000000:
0001:000001:53
])

AT_CLEANUP

AT_SETUP([USAGE BITS 2 ])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01  WS-COMM-BESTGRUPPE   OCCURS 10000 PIC 1 BIT.
       01  T-BIT OCCURS 16.
           04 T-BEST            PIC 1 USAGE BIT OCCURS 10000.
       PROCEDURE        DIVISION.
	move 1 to T-BEST(2,2) WS-COMM-BESTGRUPPE(2).
        DISPLAY T-BEST(1,1) T-BEST(1,2) T-BEST(1,3) .
        DISPLAY T-BEST(2,1) T-BEST(2,2) T-BEST(2,3) . 
        DISPLAY T-BEST(3,1) T-BEST(3,2) T-BEST(3,3) . 
	DISPLAY WS-COMM-BESTGRUPPE(1) 
	        WS-COMM-BESTGRUPPE(2)
	        WS-COMM-BESTGRUPPE(3).
        STOP RUN.
])

AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[000
010
000
010
])

AT_CLEANUP

AT_SETUP([USAGE BITS 3 ])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01 MyType IS TYPEDEF .
         03  T-BIT OCCURS 16.
           04 T-BEST            PIC 1 USAGE BIT OCCURS 10000.
       01 Truc USAGE MyType.
       01  WS-COMM-BESTGRUPPE   OCCURS 10000 PIC 1 BIT.
       PROCEDURE        DIVISION.
	move 1 to T-BEST(2,2) WS-COMM-BESTGRUPPE(2).
        DISPLAY T-BEST(1,1) T-BEST(1,2) T-BEST(1,3) .
        DISPLAY T-BEST(2,1) T-BEST(2,2) T-BEST(2,3) . 
        DISPLAY T-BEST(3,1) T-BEST(3,2) T-BEST(3,3) . 
	DISPLAY WS-COMM-BESTGRUPPE(1) 
	        WS-COMM-BESTGRUPPE(2)
	        WS-COMM-BESTGRUPPE(3).
        STOP RUN.
])

AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[000
010
000
010
])

AT_CLEANUP

AT_SETUP([USAGE BITS 4 ])

AT_DATA([prog.cob], [
 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  FILEOUT-RECORD.
     02 GRP-DATA.
        05  GRPBITS.
          10 B1 PIC 1 USAGE BIT.
          10 B2 PIC 1 USAGE BIT.
          10 B3 PIC 1 USAGE BIT.
          10 B4 PIC 1 USAGE BIT.
          10 B5 PIC 1 USAGE BIT.
          10 B6 PIC 1 USAGE BIT.
          10 B7 PIC 1 USAGE BIT.
          10 B8 PIC 1 USAGE BIT.
        05  T-BIT PIC 1 USAGE BIT OCCURS 80.
        05  FILLER PIC X(69).
 01  I                       PIC 999.
 01 INIT-DATA PIC X(10) VALUE 
     X"274A7C372760F12FC5C6".
 PROCEDURE DIVISION.
 LAB1.
         MOVE INIT-DATA TO FILEOUT-RECORD.
         IF B1 = B'1'
                DISPLAY 'B1 ON'.
         IF B2 = B'1'
                DISPLAY 'B2 ON'.
         IF B3 = B'1'
                DISPLAY 'B3 ON'.
         IF B4 = B'1'
                DISPLAY 'B4 ON'.
         IF B5 = B'1'
                DISPLAY 'B5 ON'.
         IF B6 = B'1'
                DISPLAY 'B6 ON'.
         IF B7 = B'1'
                DISPLAY 'B7 ON'.
         IF B8 = B'1'
                DISPLAY 'B8 ON'.
         PERFORM VARYING I FROM 1 BY 1 UNTIL I > 72 
           IF T-BIT (I) = B"1" 
              DISPLAY " T-BIT " I " IS ON"
           END-IF
         END-PERFORM.
 END-PRG.
         STOP RUN.
])
AT_CHECK([${COMPILE} -free -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[B3 ON
B6 ON
B7 ON
B8 ON
 T-BIT 002 IS ON
 T-BIT 005 IS ON
 T-BIT 007 IS ON
 T-BIT 010 IS ON
 T-BIT 011 IS ON
 T-BIT 012 IS ON
 T-BIT 013 IS ON
 T-BIT 014 IS ON
 T-BIT 019 IS ON
 T-BIT 020 IS ON
 T-BIT 022 IS ON
 T-BIT 023 IS ON
 T-BIT 024 IS ON
 T-BIT 027 IS ON
 T-BIT 030 IS ON
 T-BIT 031 IS ON
 T-BIT 032 IS ON
 T-BIT 034 IS ON
 T-BIT 035 IS ON
 T-BIT 041 IS ON
 T-BIT 042 IS ON
 T-BIT 043 IS ON
 T-BIT 044 IS ON
 T-BIT 048 IS ON
 T-BIT 051 IS ON
 T-BIT 053 IS ON
 T-BIT 054 IS ON
 T-BIT 055 IS ON
 T-BIT 056 IS ON
 T-BIT 057 IS ON
 T-BIT 058 IS ON
 T-BIT 062 IS ON
 T-BIT 064 IS ON
 T-BIT 065 IS ON
 T-BIT 066 IS ON
 T-BIT 070 IS ON
 T-BIT 071 IS ON
])
AT_CLEANUP

AT_SETUP([USAGE BITS 5 ])

AT_DATA([prog.cob], [
 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  FILEOUT-RECORD.
     02 DATA-X PIC X VALUE 'A'.
     02 GRP-DATA REDEFINES DATA-X.
        05  GRPBITS.
          10 B1 PIC 1 USAGE BIT.
          10 B2 PIC 1 USAGE BIT.
          10 B3 PIC 1 USAGE BIT.
          10 B4 PIC 1 USAGE BIT.
          10 B5 PIC 1 USAGE BIT.
          10 B6 PIC 1 USAGE BIT.
          10 B7 PIC 1 USAGE BIT.
 01  FILEOUT-RECORD.
     02 DATA-X2 PIC XX VALUE 'AA'.
     02 GRP-DATA2 REDEFINES DATA-X2.
        05  GRPBITS2.
          10 B21 PIC 1 USAGE BIT.
          10 B22 PIC 1 USAGE BIT.
          10 B23 PIC 1 USAGE BIT.
          10 B24 PIC 1 USAGE BIT.
          10 B25 PIC 1 USAGE BIT.
          10 B26 PIC 1 USAGE BIT.
          10 B27 PIC 1 USAGE BIT.
          10 B28 PIC 1 USAGE BIT.
          10 B29 PIC 1 USAGE BIT.
          10 B30 PIC 1 USAGE BIT.
          10 B31 PIC 1 USAGE BIT.
          10 B32 PIC 1 USAGE BIT.
 PROCEDURE DIVISION.
 LAB1.
         IF B1 = B'1'
                DISPLAY 'B1 ON'.
         IF B2 = B'1'
                DISPLAY 'B2 ON'.
         IF B3 = B'1'
                DISPLAY 'B3 ON'.
         IF B4 = B'1'
                DISPLAY 'B4 ON'.
         IF B5 = B'1'
                DISPLAY 'B5 ON'.
         IF B6 = B'1'
                DISPLAY 'B6 ON'.
         IF B7 = B'1'
                DISPLAY 'B7 ON'.

         IF B21 = B'1'
                DISPLAY 'B21 ON'.
         IF B22 = B'1'
                DISPLAY 'B22 ON'.
         IF B23 = B'1'
                DISPLAY 'B23 ON'.
         IF B24 = B'1'
                DISPLAY 'B24 ON'.
         IF B25 = B'1'
                DISPLAY 'B25 ON'.
         IF B26 = B'1'
                DISPLAY 'B26 ON'.
         IF B27 = B'1'
                DISPLAY 'B27 ON'.
         IF B28 = B'1'
                DISPLAY 'B28 ON'.
         IF B29 = B'1'
                DISPLAY 'B29 ON'.
         IF B30 = B'1'
                DISPLAY 'B30 ON'.
         IF B31 = B'1'
                DISPLAY 'B31 ON'.
         IF B32 = B'1'
                DISPLAY 'B32 ON'.
	END-PRG.
         STOP RUN.
])
AT_CHECK([${COMPILE} -free -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[B2 ON
B22 ON
B28 ON
B30 ON
])
AT_CLEANUP

AT_SETUP([USAGE BITS 6 ])

AT_DATA([prog.cob], [
 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  I                       PIC 999.
 01  FILEOUT-RECORD.
     02 DATA-X PIC XX VALUE 'AA'.
     02 GRP-DATA REDEFINES DATA-X.
        05  GRPBITS.
          10 B1 PIC 1 USAGE BIT.
          10 B2 PIC 1 USAGE BIT.
          10 B3 PIC 1 USAGE BIT.
          10 B4 PIC 1 USAGE BIT.
	  10 BA1 PIC 1 OCCURS 4 
	               USAGE BIT.
          10 B21 PIC 1 USAGE BIT.
          10 B22 PIC 1 USAGE BIT.
	  10 BA2 PIC 1 OCCURS 4 
	               USAGE BIT.

          10 B27 PIC 1 USAGE BIT.
          10 B28 PIC 1 USAGE BIT.
 PROCEDURE DIVISION.
 LAB1.
         IF B1 = B'1'
                DISPLAY 'B1 ON'.
         IF B2 = B'1'
                DISPLAY 'B2 ON'.
         IF B3 = B'1'
                DISPLAY 'B3 ON'.
         IF B4 = B'1'
                DISPLAY 'B4 ON'.
         PERFORM VARYING I FROM 1 BY 1 UNTIL I > 4 
           IF BA1 (I) = B"1" 
              DISPLAY "BA1 " I " ON"
           END-IF
         END-PERFORM.

         IF B21 = B'1'
                DISPLAY 'B21 ON'.
         IF B22 = B'1'
                DISPLAY 'B22 ON'.
         PERFORM VARYING I FROM 1 BY 1 UNTIL I > 4 
           IF BA2 (I) = B"1" 
              DISPLAY "BA2 " I " ON"
           END-IF
         END-PERFORM.
         IF B27 = B'1'
                DISPLAY 'B27 ON'.
         IF B28 = B'1'
                DISPLAY 'B28 ON'.
	END-PRG.
         STOP RUN.
])
AT_CHECK([${COMPILE} -free -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[B2 ON
BA1 004 ON
B22 ON
B28 ON
])
AT_CLEANUP

AT_SETUP([USAGE BITS 7 ])

AT_DATA([prog.cob], [
 IDENTIFICATION DIVISION.
 PROGRAM-ID. prog.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  I                       PIC 999.
 01  FILEOUT-RECORD.
     02 DATA-X PIC XX VALUE 'AA'.
     02 GRP-DATA REDEFINES DATA-X.
        05  GRPBITS.
          10 B1 PIC 1 USAGE BIT.
          10 B2 PIC 1 USAGE BIT.
          10 B3 PIC 1 USAGE BIT.
          10 B4 PIC 1 USAGE BIT.
          10 B21 PIC 1 USAGE BIT
	      SYNC.
          10 B22 PIC 1 USAGE BIT.
          10 B27 PIC 1 USAGE BIT.
          10 B28 PIC 1 USAGE BIT.
 PROCEDURE DIVISION.
 LAB1.
         IF B1 = B'1'
                DISPLAY 'B1 ON'.
         IF B2 = B'1'
                DISPLAY 'B2 ON'.
         IF B3 = B'1'
                DISPLAY 'B3 ON'.
         IF B4 = B'1'
                DISPLAY 'B4 ON'.
         IF B21 = B'1'
                DISPLAY 'B21 ON'.
         IF B22 = B'1'
                DISPLAY 'B22 ON'.
         IF B27 = B'1'
                DISPLAY 'B27 ON'.
         IF B28 = B'1'
                DISPLAY 'B28 ON'.
	END-PRG.
         STOP RUN.
])
AT_CHECK([${COMPILE} -free -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[B2 ON
B22 ON
])
AT_CLEANUP

AT_SETUP([USAGE BITS b-and b-not ])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        data division.
        working-storage section.
        01 grp1.
        02 bit11 pic 1 usage bit.
        02 bit12 pic 1 usage bit.
        01 filler redefines grp1.
        02 r-grp1 pic 1(2) usage bit.
        01 grp2.
        02 bit2 pic 1(2) usage bit.
        01 filler redefines grp2.
        02 r-bit2 pic 1 occurs 2 usage bit.
        procedure division.
        initialize grp1 grp2

        if length of grp1 = 1 then
        display "length 1 ok"
        else
        display "length 1 not ok"
        end-if

	move b"1" to bit11
        move b"1" to r-bit2(1)
        move b"10" to r-grp1 
        move b"01" to bit2
        if bit11 then
        display "if b11 ok"
        else
        display "if b11 NOT ok"
        end-if.
        
        if bit11 B-AND bit12 then
        display "if b-and NOT ok"
        else
        display "if b-and ok"
        end-if.
        
        if bit11 B-AND  (b-not bit12) then
        display "if b-and b-not ok"
        else
        display "if b-and b-not NOT ok"
        end-if.
        
        if b-not r-bit2(2)  zero then
        display "if b-not r-bit2(2) ok"
        else
        display "if b-not r-bit2(2) NOT ok"                   
        end-if.
        
        compute r-grp1 = r-grp1 b-or bit2
        display "grp1 = " r-grp1
        display "bit2 = " bit2
        compute r-grp1 = r-grp1 b-xor bit2
        display "b-xor = " r-grp1.
])
AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0],
[length 1 ok
if b11 ok
if b-and ok
if b-and b-not ok
if b-not r-bit2(2) ok
grp1 = 11
bit2 = 01
b-xor = 10
])
AT_CLEANUP


AT_SETUP([RTD Region ])

AT_DATA([proga.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      proga.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01   fa PIC X VALUE "I".

       PROCEDURE        DIVISION.
       DISPLAY "A" fa NO ADVANCING .
       MOVE "N" TO fa .
       CALL "progb"  .
       CALL "progb"  .
       DISPLAY "CB" NO ADVANCING.
       CANCEL "progb".
       CALL "progb"  .
])

AT_DATA([progb.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      progb.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01   fa PIC X VALUE "I".

       PROCEDURE        DIVISION.
       DISPLAY "B" fa NO ADVANCING.
       MOVE "N" TO fa.
])

AT_DATA([progfail.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      progfail.
       ENVIRONMENT      DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01   fa PIC X VALUE "I".

       PROCEDURE        DIVISION.
       DISPLAY "F" fa  .
       MOVE "N" TO fa.
       CALL "FAIL"  .
])

AT_DATA([testregion.c], [
#include <stdio.h>
#include <assert.h>
#include "libcob.h"

jmp_buf jump_buffer;

void cob_exit_proc (COB_RTD, int status)
{
    /* terminate the current region */
    cob_terminate_exec(rtd );

    /* then go back to call*/
    longjmp(jump_buffer, 1);
}

void call_prog (COB_RTD, int region,  char *prog_name, char * mess) {
    union {
        int (*func)();
        void    *func_void;
    } unifunc;
    cit_runtime_t * rtd_region;
    rtd_region = cob_enterprise_set_current_region(rtd, region);
    unifunc.func_void = cob_resolve (rtd_region, prog_name);
    if ( unifunc.func_void == NULL ) {
        cob_call_error (rtd_region);
    }
    printf("%s ", mess);
    unifunc.func (NULL,NULL,NULL);
    printf("\n");
}
int main (int argc, char **argv)
{
    COB_RTD = cob_get_rtd(); 
    cit_runtime_t * rtd_region1;
    cit_runtime_t * rtd_region2;

    cob_init (rtd, 0, NULL);

    /* set up termanate Proc in Region 0*/
    cob_set_exit_rtd_proc(rtd,cob_exit_proc);

    /* test Long jump*/
    if (setjmp(jump_buffer) == 0) {

        call_prog(rtd, 0, "proga", "main");
        call_prog(rtd, 0, "proga", "main");
    
        call_prog(rtd, 1, "proga", "r1  ");
        call_prog(rtd, 1, "proga", "r1  ");
        call_prog(rtd, 2, "proga", "r2  ");
        printf("cancel r1\n");
        cob_enterprise_cancel_region(rtd, 1, 0);
        call_prog(rtd, 0, "proga", "main");
        call_prog(rtd, 1, "proga", "r1  ");
        call_prog(rtd, 2, "proga", "r2  ");
        cob_enterprise_cancel_region(rtd, 2, 0);
        call_prog(rtd, 2, "proga", "r2  ");

        call_prog(rtd, 2, "progfail", "r1  ");
        printf("We should never display this message");
	return 1;
	
    } else {
        printf("After long jump\n");
        call_prog(rtd, 1, "proga", "r1  ");
	return 0;
    }
}
])
AT_CHECK([${COMPILE_MODULE} -fthread-safe -fno-realpath proga.cob])
AT_CHECK([${COMPILE_MODULE} -fthread-safe -fno-realpath progb.cob])
AT_CHECK([${COMPILE_MODULE} -fthread-safe -fno-realpath progfail.cob])
AT_CHECK([${COMPILE} -fno-main -fthread-safe testregion.c])
AT_CHECK([./testregion], [0],
[main AIBIBNCBBI
main ANBNBNCBBI
r1   AIBIBNCBBI
r1   ANBNBNCBBI
r2   AIBIBNCBBI
cancel r1
main ANBNBNCBBI
r1   AIBIBNCBBI
r2   ANBNBNCBBI
r2   AIBIBNCBBI
r1   FI
After long jump
r1   ANBNBNCBBI
], 
[progfail.cob:12: libcob: Cannot find module 'FAIL'
])
AT_CLEANUP

AT_SETUP([SYSFile redirect ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
      *
       WORKING-STORAGE SECTION.
      
       PROCEDURE DIVISION.
           DISPLAY 'DISPLAY'.
           DISPLAY 'DISPLAY UPON CONSOLE' UPON CONSOLE.
           DISPLAY 'DISPLAY UPON SYSOUT'  UPON SYSOUT.
           DISPLAY 'DISPLAY UPON TERMINAL' UPON TERMINAL.
           DISPLAY 'DISPLAY UPON SYSERR' UPON SYSERR.
           EXIT.
])

AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0], 
[DISPLAY
DISPLAY UPON CONSOLE
DISPLAY UPON SYSOUT
DISPLAY UPON TERMINAL
], 
[DISPLAY UPON SYSERR
])

AT_CHECK([${COMPILE} -w -std=mf -sysout=outfile -syserr=errfile prog.cob])
AT_CHECK([./prog], [0], 
[DISPLAY UPON CONSOLE
DISPLAY UPON TERMINAL
])

AT_CHECK([cat outfile], [0],
[DISPLAY
DISPLAY UPON SYSOUT
])

AT_CHECK([cat errfile], [0],
[DISPLAY UPON SYSERR
])

AT_CLEANUP

AT_SETUP([INPUT REVERSED ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       INPUT-OUTPUT SECTION.
      
       FILE-CONTROL.
           select optional log-file
               assign      to "logfile"
               file status is log-status.

       data division.
       file section.
       
       fd  log-file.
       01  log-record.
           05  log-text               pic  x(10).

       WORKING-STORAGE SECTION.
       01  ws-log-record pic x(10).

       01  file-status.
           03  log-status              pic  x(02)  value "ZZ".
           03  stat-status             pic  x(02)  value "ZZ".
       PROCEDURE DIVISION.
       0000-MAIN.
               open output log-file .
               move "AAAAAAAAAA" to log-text.
               write log-record.
               move "BBBBBBBBBB" to log-text.
               write log-record.
               move "CCCCCCCCCC" to log-text.
               write log-record.
               move "DDDDDDDDDD" to log-text.
               write log-record.
               CLOSE log-file.
               open input log-file .
               perform  0001-READLOOP THRU 0001-EXITLOOP .
               CLOSE log-file.

               open input log-file  reversed.
               perform  0001-READLOOP THRU 0001-EXITLOOP .
               CLOSE log-file.
               
               STOP RUN.
       
       0001-READLOOP.
               read log-file         into   ws-log-record.
               IF  log-status Not EQual "00" 
                   DISPLAY "EXIT CODE " log-status 
                   GO TO 0001-ENDLOOP.           
               DISPLAY ws-log-record.
               GO TO 0001-READLOOP.
    
       0001-ENDLOOP.
       0001-EXITLOOP.
])

AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0], 
[AAAAAAAAAA
BBBBBBBBBB
CCCCCCCCCC
DDDDDDDDDD
EXIT CODE 10
DDDDDDDDDD
CCCCCCCCCC
BBBBBBBBBB
AAAAAAAAAA
EXIT CODE 10
])
AT_CLEANUP

AT_SETUP([XML PARSE])

AT_DATA([prog.cob], [
       Identification division.
         Program-id. prog.

       Data division.
        Working-storage section.
      ******************************************************************
      * XML document, encoded as initial values of data items.         *
      ******************************************************************
         1 xml-document.
          2 pic x(39) value '<?xml version="1.0"'.
          2 pic x(19) value ' standalone="yes"?>'.
          2 pic x(39) value '<!--This document is just an example-->'.
          2 pic x(10) value '<sandwich>'.
          2 pic x(35) value '  <bread type="baker&apos;s best"'.
          2 pic x(35) value '         size="small"/>'.
          2 pic x(41) value '  <?spread please use real mayonnaise  ?>'.
          2 pic x(31) value '  <meat>Ham &amp; turkey</meat>'.
          2 pic x(40) value '  <filling>Cheese, lettuce, tomato, etc.'.
          2 pic x(10) value '</filling>'.
          2 pic x(35) value '  <![[CDATA[We should add a <relish>'.
          2 pic x(22) value ' element in future!]]]>'.
          2 pic x(31) value '  <listprice>$4.99 </listprice>'.
          2 pic x(27) value '  <discount>0.10</discount>'.
          2 pic x(11) value '</sandwich>'.
         1 xml-document-length computational pic 999.

      ******************************************************************
      * Sample data definitions for processing numeric XML content.    *
      ******************************************************************
         1 current-element pic x(30).
         1 list-price computational pic 9v99 value 0.
         1 discount computational pic 9v99 value 0.
         1 display-price pic $$9.99.

       Procedure division.
        mainline section.

           XML PARSE xml-document PROCESSING PROCEDURE xml-handler
             ON EXCEPTION
               display 'XML document error ' XML-CODE
               end-display
             NOT ON EXCEPTION
               display 'XML document successfully parsed'
           END-XML.

      ******************************************************************
      *    Process the transformed content and calculate promo price.  *
      ******************************************************************
           display '-----+++++***** Using information from XML '
               '*****+++++-----'
           move list-price to display-price
           display '  Sandwich list price: ' display-price
           compute display-price = list-price * (1 - discount)
           display '  Promotional price:   ' display-price
           display '  Get one today!'

           goback.

        xml-handler section.
           evaluate XML-EVENT
      * ==> Order XML events most frequent first
             when 'START-OF-ELEMENT'
               display 'Start element tag: <' XML-TEXT '>'
               move XML-TEXT to current-element
             when 'CONTENT-CHARACTERS'
               display 'Content characters: <' XML-TEXT '>'
      * ==> Transform XML content to operational COBOL data item...
               evaluate current-element
                 when 'listprice'
      * ==> Using function NUMVAL-C...
                   compute list-price = function numval-c(XML-TEXT)
                 when 'discount'
                   compute discount = function numval-c(XML-TEXT)
               end-evaluate
             when 'END-OF-ELEMENT'
               display 'End element tag: <' XML-TEXT '>'
               move spaces to current-element
             when 'START-OF-DOCUMENT'
               display 'Start of document'
             when 'END-OF-DOCUMENT'
               display 'End of document.'
             when 'VERSION-INFORMATION'
               display 'Version: <' XML-TEXT '>'
             when 'ENCODING-DECLARATION'
               display 'Encoding: <' XML-TEXT '>'
             when 'STANDALONE-DECLARATION'
               display 'Standalone: <' XML-TEXT '>'
             when 'ATTRIBUTE-NAME'
               display 'Attribute name: <' XML-TEXT '>'
             when 'ATTRIBUTE-CHARACTERS'
               display 'Attribute value characters: <' XML-TEXT '>'
             when 'ATTRIBUTE-CHARACTER'
               display 'Attribute value character: <' XML-TEXT '>'
             when 'START-OF-CDATA-SECTION'
               display 'Start of CData: <' XML-TEXT '>'
             when 'END-OF-CDATA-SECTION'
               display 'End of CData: <' XML-TEXT '>'
             when 'CONTENT-CHARACTER'
               display 'Content character: <' XML-TEXT '>'
             when 'PROCESSING-INSTRUCTION-TARGET'
               display 'PI target: <' XML-TEXT '>'
             when 'PROCESSING-INSTRUCTION-DATA'
               display 'PI data: <' XML-TEXT '>'
             when 'COMMENT'
               display 'Comment: <' XML-TEXT '>'
             when 'EXCEPTION'
               compute xml-document-length = function length (XML-TEXT)
               display 'Exception ' XML-CODE ' at offset '
                   xml-document-length '.'
             when other
               display 'Unexpected XML event: ' XML-EVENT '.'
           end-evaluate
           .
       End program prog.
])

AT_CHECK([${COMPILE} -w -std=mf -fxparse-event prog.cob])
AT_CHECK([./prog], [0], 
[Start of document
Version: <1.0>
Standalone: <yes>
Comment: <This document is just an example>
Start element tag: <sandwich>
Content characters: <  >
Start element tag: <bread>
Attribute name: <type>
Attribute value characters: <baker's best>
Attribute name: <size>
Attribute value characters: <small>
End element tag: <bread>
Content characters: <              >
PI target: <spread>
PI data: <please use real mayonnaise  >
Content characters: <  >
Start element tag: <meat>
Content characters: <Ham >
Content character: <&>
Content characters: < turkey>
End element tag: <meat>
Content characters: <  >
Start element tag: <filling>
Content characters: <Cheese, lettuce, tomato, etc.>
End element tag: <filling>
Content characters: <  >
Start of CData: <<![[CDATA[>
Content characters: <We should add a <relish> element in future!>
End of CData: <]]]>>
Content characters: <  >
Start element tag: <listprice>
Content characters: <$4.99 >
End element tag: <listprice>
Content characters: <  >
Start element tag: <discount>
Content characters: <0.10>
End element tag: <discount>
End element tag: <sandwich>
End of document.
XML document successfully parsed
-----+++++***** Using information from XML *****+++++-----
  Sandwich list price:  $4.99
  Promotional price:    $4.49
  Get one today!
])
AT_CLEANUP

AT_SETUP([XML GENERATE])

AT_DATA([prog.cob], [
       Identification division.
         Program-id. prog.
       Data division.
        Working-storage section.
          01 numItems pic 99 global.
          01 purchaseOrder global.
            05 orderDate pic x(10).
            05 shipTo.
              10 country pic xx value 'US'.
              10 name pic x(30).
              10 street pic x(30).
              10 city pic x(30).
              10 state pic xx.
              10 zip pic x(10).
            05 billTo.
              10 country pic xx value 'US'.
              10 name pic x(30).
              10 street pic x(30).
              10 city pic x(30).
              10 state pic xx.
              10 zip pic x(10).
            05 orderComment pic x(80).
            05 items occurs 0 to 20 times depending on numItems.
              10 item.
                15 partNum pic x(6).
                15 productName pic x(50).
                15 quantity pic 99.
                15 USPrice pic 999v99.
                15 shipDate pic x(10).
                15 itemComment pic x(40).
          01 numChars comp pic 9(9).
          01 xmlPO pic x(999).
          01 xmlPO2 pic x(299).
       Procedure division.
         m.
           Move 20 to numItems
           Move spaces to purchaseOrder

           Move '1999-10-20' to orderDate

           Move 'US' to country of shipTo
           Move 'Alice Smith' to name of shipTo
           Move '123 Maple Street' to street of shipTo
           Move 'Mill Valley' to city of shipTo
           Move 'CA' to state of shipTo
           Move '90952' to zip of shipTo
        
           Move 'US' to country of billTo
           Move 'Robert Smith' to name of billTo
           Move '8 Oak Avenue' to street of billTo
           Move 'Old Town' to city of billTo
           Move 'PA' to state of billTo
           Move '95819' to zip of billTo
           Move 'Hurry, my lawn is going wild!' to orderComment

           Move 0 to numItems
           Call 'addFirstItem'
           Call 'addSecondItem'
           Move space to xmlPO
           Xml generate xmlPO from purchaseOrder count in numChars 
               on exception display "error " XML-CODE.
           DISPLAY "'" xmlPO "'".
           DISPLAY " Size : " numChars
           DISPLAY " Code : " XML-CODE
           DISPLAY "-----------------------------------"
           Xml generate xmlPO2 from purchaseOrder count in numChars 
               on exception 
                   display "error " XML-CODE.
           DISPLAY "'" xmlPO2 "'".
           DISPLAY " Size : " numChars
           DISPLAY " Code : " XML-CODE
           Goback
           .

       Identification division.
         Program-id. 'addFirstItem'.
       Procedure division.
           Add 1 to numItems
           Move '872-AA' to partNum(numItems)
           Move 'Lawnmower' to productName(numItems)
           Move 1 to quantity(numItems)
           Move 148.95 to USPrice(numItems)
           Move 'Confirm this is electric' to itemComment(numItems)
           Goback.
       End program 'addFirstItem'.

       Identification division.
         Program-id. 'addSecondItem'.
       Procedure division.
           Add 1 to numItems
           Move '926-AA' to partNum(numItems)
           Move 'Baby Monitor' to productName(numItems)
           Move 1 to quantity(numItems)
           Move 39.98 to USPrice(numItems)
           Move '1999-05-21' to shipDate(numItems)
           Goback.
       End program 'addSecondItem'.

       End program prog.
])

AT_CHECK([${COMPILE} -w -std=mf prog.cob])
AT_CHECK([./prog], [0], 
['<purchaseOrder><orderDate>1999-10-20</orderDate><shipTo><country>US</country><name>Alice Smith</name><street>123 Maple Street</street><city>Mill Valley</city><state>CA</state><zip>90952</zip></shipTo><billTo><country>US</country><name>Robert Smith</name><street>8 Oak Avenue</street><city>Old Town</city><state>PA</state><zip>95819</zip></billTo><orderComment>Hurry, my lawn is going wild!</orderComment><items><item><partNum>872-AA</partNum><productName>Lawnmower</productName><quantity>1</quantity><USPrice>148.95</USPrice><shipDate> </shipDate><itemComment>Confirm this is electric</itemComment></item></items><items><item><partNum>926-AA</partNum><productName>Baby Monitor</productName><quantity>1</quantity><USPrice>39.98</USPrice><shipDate>1999-05-21</shipDate><itemComment> </itemComment></item></items></purchaseOrder>                                                                                                                                                                             '
 Size : 0000000826
 Code : +0000000000
-----------------------------------
error +0000000400
'<purchaseOrder><orderDate>1999-10-20</orderDate><shipTo><country>US</country><name>Alice Smith</name><street>123 Maple Street</street><city>Mill Valley</city><state>CA</state><zip>90952</zip></shipTo><billTo><country>US</country><name>Robert Smith</name><street>8 Oak Avenue</street><city>Old Town  '
 Size : 0000000297
 Code : +0000000400
])
AT_CLEANUP

AT_SETUP([move-spaces-to-displaynumeric])

AT_DATA([conf0.cfg], [
include "default.conf"
move-spaces-to-displaynumeric:error
])

AT_DATA([conf1.cfg], [
include "default.conf"
move-spaces-to-displaynumeric:zero
])

AT_DATA([conf2.cfg], [
include "default.conf"
move-spaces-to-displaynumeric:space
])

AT_DATA([prog.cob], [
       Identification division.
         Program-id. prog.
       Data division.
        Working-storage section.
          01 GRPNUM.
             02 numItems pic 99.
       Procedure division.
        MOVE SPACE TO numItems
        DISPLAY "'" GRPNUM "'"
              .
])

AT_CHECK([${COMPILE} -w -conf=conf0.cfg prog.cob -fno-realpath], [1] ,,
[prog.cob:9: Error: Invalid MOVE statement
])

AT_CHECK([${COMPILE} -w -conf=conf1.cfg prog.cob -fno-realpath])
AT_CHECK([./prog], [0], 
['00'
])

AT_CHECK([${COMPILE} -w -conf=conf2.cfg prog.cob -fno-realpath])
AT_CHECK([./prog], [0], 
['  '
])

AT_CLEANUP

AT_SETUP([move-high-low-to-displaynumeric])

AT_DATA([conf0.cfg], [
include "default.conf"
move-high-low-to-displaynumeric:error
])

AT_DATA([conf1.cfg], [
include "default.conf"
move-high-low-to-displaynumeric:zero
])

AT_DATA([conf2.cfg], [
include "default.conf"
move-high-low-to-displaynumeric:value
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM9    PIC 9(6).
       PROCEDURE DIVISION.

           MOVE LOW-VALUES TO NUM9

           IF NUM9 = LOW-VALUES
               DISPLAY "9(6) tests OK for LOW-VALUES"
           ELSE
               DISPLAY "9(6) Does NOT test OK for LOW-VALUES"
               IF NUM9 = ZERO  
                   DISPLAY "9(6) tests as ZERO instead of LOW-VALUES"
               END-IF
           END-IF.
           MOVE HIGH-VALUES TO NUM9
           IF NUM9 = HIGH-VALUES
               DISPLAY "9(6) tests OK for HIGH-VALUES"
           ELSE
               DISPLAY "9(6) Does NOT test OK for HIGH-VALUES"
               IF NUM9 = ZERO  
                   DISPLAY "9(6) tests as ZERO instead of HIGH-VALUES"
               END-IF
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -w -conf=conf0.cfg prog.cob ], [1] ,,
[prog.cob:9: Error: Invalid MOVE statement
prog.cob:19: Error: Invalid MOVE statement
])

AT_CHECK([${COMPILE} -w -conf=conf1.cfg prog.cob ])
AT_CHECK([./prog], [0], 
[9(6) Does NOT test OK for LOW-VALUES
9(6) tests as ZERO instead of LOW-VALUES
9(6) Does NOT test OK for HIGH-VALUES
9(6) tests as ZERO instead of HIGH-VALUES
])

AT_CHECK([${COMPILE} -w -conf=conf2.cfg prog.cob ])
AT_CHECK([./prog], [0], 
[9(6) tests OK for LOW-VALUES
9(6) tests OK for HIGH-VALUES
])

AT_CLEANUP

AT_SETUP([USAGE INDEX])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. USEINDEX.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01  W-K-NUMERISCH.
           05 W-K-1                          PIC 9(4) VALUE 1.
       01  W-V-GLOBAL-VARIABLE.
           05 W-V-SAVE-TAB-F                 PIC X(1).
           05 W-V-SAVE-TAB-I        USAGE IS INDEX.
       01  TAB-MAP-GRP-ERR.
           05 TAB-ERROR-RANGE.
              10 TAB-ERROR-CODE     OCCURS 50 INDEXED BY TAB-I.
                 15 TAB-ERROR-CODE-DATA.
                    20 TAB-ERROR-SEVERITY   PIC 9(1).
       LINKAGE SECTION.
       PROCEDURE DIVISION.
       H1000-PROC SECTION.
              SET W-V-SAVE-TAB-I             TO TAB-I
              SET TAB-I                      TO W-K-1
              GOBACK.
       END PROGRAM USEINDEX.
      *##
])

AT_CHECK([${COMPILE} -w prog.cob ], [0])
AT_CHECK([./prog], [0])
AT_CLEANUP

AT_SETUP([BY DESCRIPTOR])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 C PIC X(10) VALUE '<cccccccc>'.
       01 N1 PIC S9(4) COMP VALUE 2435.
       01 N2 PIC 9(4)  VALUE 5768.
       01 I PIC 99 COMP-5 VALUE 5 .
       01 Z.
       02 A PIC X OCCURS 1 TO 100 DEPENDING ON I.
       PROCEDURE DIVISION.
           DISPLAY 'FUNCTION UPPER-CASE(C)'
           CALL 'subd' USING BY DESCRIPTOR FUNCTION UPPER-CASE(C)
           DISPLAY 'C'
           CALL 'subd' USING BY DESCRIPTOR C
           DISPLAY '3033'
           CALL 'subd' USING BY DESCRIPTOR 3033
           DISPLAY '''ABC'''
           CALL 'subd' USING BY DESCRIPTOR 'ABC'
           DISPLAY 'N1'
           CALL 'subd' USING BY DESCRIPTOR N1
           DISPLAY 'N2'
           CALL 'subd' USING BY DESCRIPTOR N2
           DISPLAY 'LENGTH OF N2'
           CALL 'subd' USING BY DESCRIPTOR LENGTH OF N2
           DISPLAY 'A'
           CALL 'subd' USING BY DESCRIPTOR A
           MOVE 0 TO RETURN-CODE
       GOBACK.
])

AT_DATA([subd.c], [
#include<stdio.h>
#include "libcob.h"
void dump(char *p, int size)
{
    int i = 0;
    for (i; i< size; i++, p++) {
        printf("%02x", (int)*((unsigned char *)p));
    }
}
void subd(call_by_descriptor_struct *descriptor)
{
    printf("    dsc_w_length  : %d\n", descriptor->dsc_w_length);
    printf("    dsc_b_dtype   : %d\n", descriptor->dsc_b_dtype);
    printf("    dsc_b_class   : %d\n", descriptor->dsc_b_class);
    printf("    *dsc_a_pointer: ");
    dump((char *)descriptor->dsc_a_pointer, descriptor->dsc_w_length);
    printf("\n");
    return 0;
}
])

AT_CHECK([${COMPILE} -w prog.cob subd.c ], [0])
AT_CHECK([./prog], [0], 
[FUNCTION UPPER-CASE(C)
    dsc_w_length  : 10
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 3c43434343434343433e
C
    dsc_w_length  : 10
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 3c63636363636363633e
3033
    dsc_w_length  : 4
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: d90b0000
'ABC'
    dsc_w_length  : 3
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 414243
N1
    dsc_w_length  : 2
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 0983
N2
    dsc_w_length  : 4
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 35373638
LENGTH OF N2
    dsc_w_length  : 4
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 04000000
A
    dsc_w_length  : 5
    dsc_b_dtype   : 0
    dsc_b_class   : 0
    *dsc_a_pointer: 2020202020
])
AT_CLEANUP

AT_SETUP([XML GENERATE NUMBER])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       01  XXX-INPUT.
           05 XXXXXX       PIC S9(9)       VALUE -999.
       01  XXX-INPUT2.
           05 XXXXXX2      PIC S9(9)V99    VALUE -999.9.
       01  XML-OUTPUT      PIC X(50)       VALUE SPACES.
       01  XML-LENGTH      PIC S9(9)  COMP VALUE ZERO.
      *
       PROCEDURE DIVISION.
       XML-TEST SECTION.
           MOVE 1 TO XXXXXX
           PERFORM DO-OUT
           MOVE 999 TO XXXXXX
           PERFORM DO-OUT
           MOVE -99 TO XXXXXX
           PERFORM DO-OUT
           MOVE  1 TO XXXXXX2
           PERFORM DO-OUT2
           MOVE  -1 TO XXXXXX2
           PERFORM DO-OUT2
           MOVE  -99.1 TO XXXXXX2
           PERFORM DO-OUT2
           STOP RUN.

        DO-OUT.
           XML GENERATE XML-OUTPUT FROM XXX-INPUT COUNT IN XML-LENGTH
           DISPLAY 'XML-OUTPUT: "' XML-OUTPUT '"'
           DISPLAY 'XML-LENGTH: ' XML-LENGTH
           .
        DO-OUT2.
           XML GENERATE XML-OUTPUT FROM XXX-INPUT2 COUNT IN XML-LENGTH
           DISPLAY 'XML-OUTPUT: "' XML-OUTPUT '"'
           DISPLAY 'XML-LENGTH: ' XML-LENGTH
           .
])
AT_CHECK([${COMPILE} -w prog.cob ], [0])
AT_CHECK([./prog], [0], 
[XML-OUTPUT: "<XXX-INPUT><XXXXXX>1</XXXXXX></XXX-INPUT>         "
XML-LENGTH: +000000041
XML-OUTPUT: "<XXX-INPUT><XXXXXX>999</XXXXXX></XXX-INPUT>       "
XML-LENGTH: +000000043
XML-OUTPUT: "<XXX-INPUT><XXXXXX>-99</XXXXXX></XXX-INPUT>       "
XML-LENGTH: +000000043
XML-OUTPUT: "<XXX-INPUT2><XXXXXX2>1.00</XXXXXX2></XXX-INPUT2>  "
XML-LENGTH: +000000048
XML-OUTPUT: "<XXX-INPUT2><XXXXXX2>-1.00</XXXXXX2></XXX-INPUT2> "
XML-LENGTH: +000000049
XML-OUTPUT: "<XXX-INPUT2><XXXXXX2>-99.10</XXXXXX2></XXX-INPUT2>"
XML-LENGTH: +000000050
])
AT_CLEANUP

AT_SETUP([IS SUCCESS])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 Len PIC 9(9) COMP.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
        MOVE 1 TO Len;
        IF Len is SUCCESS THEN
                DISPLAY "OK".
        IF LEN is FAILURE THEN
                DISPLAY "FAIL".
        MOVE 2 TO Len;
        IF Len is SUCCESS THEN
                DISPLAY "FAIL".
        IF LEN is FAILURE THEN
                DISPLAY "OK".

        EXIT.
])
AT_CHECK([${COMPILE} -w prog.cob ], [0])
AT_CHECK([./prog], [0], 
[OK
OK
])
AT_CLEANUP

