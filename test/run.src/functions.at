### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2005-2007 Roger While
## Copyright (C) 2008 Cobol-IT
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### ISO+IEC+1989-2002 15 Intrinsic Functions

AT_SETUP([FUNCTION ABS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -1.2345.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION ABS ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+0001.2345
])

AT_CLEANUP

AT_SETUP([FUNCTION ACOS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -0.2345.
       01  Z   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION ACOS ( X ) TO Z.
           IF Z >= 1.80750052110824325 AND
              Z <= 1.80750052110824345
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Z
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION ANNUITY])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4) VALUE 3.
       01  Y   PIC   S9(4) VALUE 5.
       01  Z   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION ANNUITY ( X, Y ) TO Z.
           IF Z >= 3.002932551319648080 AND
              Z <= 3.002932551319648110
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Z
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION ASIN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -0.2345.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION ASIN ( X ) TO Y.
           IF Y >= -0.23670419431334685 AND
              Y <= -0.23670419431334675
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION ATAN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION ATAN ( X ) TO Y.
           IF Y >= 0.78539816339744825 AND
              Y <= 0.78539816339744835
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION CHAR])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 108.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION CHAR ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[k
])

AT_CLEANUP

AT_SETUP([FUNCTION COMBINED-DATETIME])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION COMBINED-DATETIME ( 987, 345 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[0000987.00345
])

AT_CLEANUP

AT_SETUP([FUNCTION CONCATENATE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(4).
       PROCEDURE        DIVISION.
           MOVE "defx" TO Y.
           DISPLAY FUNCTION CONCATENATE ( Y "abc" "zz" "55" "666" )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[defxabczz55666
])

AT_CLEANUP

AT_SETUP([FUNCTION CONCATENATE with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(4).
       PROCEDURE        DIVISION.
           MOVE "defx" TO Y.
           DISPLAY FUNCTION CONCATENATE
                   ( Y "abc" "zz" "55" "666" ) (2 : 9)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[efxabczz5
])

AT_CLEANUP

AT_SETUP([FUNCTION COS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -0.2345.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION COS ( X ) TO Y.
           IF Y >= 0.97263064125625815 AND
              Y <= 0.97263064125625825
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION DATE-OF-INTEGER])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION DATE-OF-INTEGER ( 146000 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[20000925
])

AT_CLEANUP

AT_SETUP([FUNCTION DATE-TO-YYYYMMDD])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION DATE-TO-YYYYMMDD ( 981002, -10, 1994 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[18981002
])

AT_CLEANUP

AT_SETUP([FUNCTION DAY-OF-INTEGER])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION DAY-OF-INTEGER ( 146000 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[2000269
])

AT_CLEANUP

AT_SETUP([FUNCTION DAY-TO-YYYYDDD])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION DAY-TO-YYYYDDD ( 95005, -10, 2013 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[01995005
])

AT_CLEANUP

AT_SETUP([FUNCTION E])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION E
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[2.7182818284590452353602874713526625
])

AT_CLEANUP

AT_SETUP([FUNCTION EXCEPTION-FILE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT TEST-FILE ASSIGN "NOTEXIST"
           FILE STATUS IS TEST-STATUS.
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
       01  TEST-STATUS  PIC XX.
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           DISPLAY FUNCTION EXCEPTION-FILE
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[35TEST-FILE
])

AT_CLEANUP

AT_SETUP([FUNCTION EXCEPTION-LOCATION])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT TEST-FILE ASSIGN "NOTEXIST"
           FILE STATUS IS TEST-STATUS.
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
       01  TEST-STATUS  PIC XX.
       PROCEDURE        DIVISION.
       A00-MAIN SECTION.
       A00.
           OPEN INPUT TEST-FILE.
       B00-MAIN SECTION.
       B00.
           DISPLAY FUNCTION EXCEPTION-LOCATION
                   NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -debug -o prog prog.cob])
AT_CHECK([./prog], [0],
[prog; A00 OF A00-MAIN; 18])

AT_CLEANUP

AT_SETUP([FUNCTION EXCEPTION-STATEMENT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT TEST-FILE ASSIGN "NOTEXIST"
           FILE STATUS IS TEST-STATUS.
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
       01  TEST-STATUS  PIC XX.
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           DISPLAY FUNCTION EXCEPTION-STATEMENT
                   NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -debug -o prog prog.cob])
AT_CHECK([./prog], [0],
[OPEN                           ])

AT_CLEANUP

AT_SETUP([FUNCTION EXCEPTION-STATUS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT TEST-FILE ASSIGN "NOTEXIST"
           FILE STATUS IS TEST-STATUS.
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC      PIC X(4).
       WORKING-STORAGE SECTION.
       01  TEST-STATUS  PIC XX.
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           DISPLAY FUNCTION EXCEPTION-STATUS
                   NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[EC-I-O-PERMANENT-ERROR         ])

AT_CLEANUP

AT_SETUP([FUNCTION EXP])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   S99V9(16)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION EXP ( 3 ) TO Y.
           IF Y >= 20.0855369231876636 AND
              Y <= 20.0855369231876644
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION FACTORIAL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION FACTORIAL ( 6 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[000000000000000720
])

AT_CLEANUP

AT_SETUP([FUNCTION FRACTION-PART])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION FRACTION-PART ( 3.12345 )
           END-DISPLAY.
           DISPLAY FUNCTION FRACTION-PART ( -3.12345 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+.123450000000000000
-.123450000000000000
])

AT_CLEANUP

AT_SETUP([FUNCTION INTEGER])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -1.5.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION INTEGER ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-000000000000000002
])

AT_CLEANUP

AT_SETUP([FUNCTION INTEGER-OF-DATE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION INTEGER-OF-DATE ( 20000925 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00146000
])

AT_CLEANUP

AT_SETUP([FUNCTION INTEGER-OF-DAY])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION INTEGER-OF-DAY ( 2000269 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00146000
])

AT_CLEANUP

AT_SETUP([FUNCTION INTEGER-PART])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -1.5.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION INTEGER-PART ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-000000000000000001
])

AT_CLEANUP

AT_SETUP([FUNCTION LENGTH])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE -1.5.
       01  Var1     PIC 9(05).
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION LENGTH ( X )
           END-DISPLAY.
           PERFORM LENGTH OF Var1 TIMES
           DISPLAY "A" NO ADVANCING
           END-PERFORM.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[8
AAAAA])

AT_CLEANUP

AT_SETUP([FUNCTION LOCALE-DATE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(32)   VALUE SPACES.
       PROCEDURE        DIVISION.
           MOVE FUNCTION LOCALE-DATE ( "19630302" ) TO X.
           IF X NOT = SPACES
                DISPLAY "OK"
                END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION LOCALE-TIME])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(32)   VALUE SPACES.
       PROCEDURE        DIVISION.
           MOVE FUNCTION LOCALE-TIME ( "233012" ) TO X.
           IF X NOT = SPACES
                DISPLAY "OK"
                END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION LOCALE-TIME-FROM-SECONDS])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(32)   VALUE SPACES.
       PROCEDURE        DIVISION.
           MOVE FUNCTION LOCALE-TIME-FROM-SECONDS ( 33012 ) TO X.
           IF X NOT = SPACES
                DISPLAY "OK"
                END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION LOG])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.5.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION LOG ( X ) TO Y.
           IF Y >= 0.40546510810816435 AND
              Y <= 0.40546510810816445
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION LOG10])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.5.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION LOG10 ( X ) TO Y.
           IF Y >= 0.17609125905568120 AND
              Y <= 0.17609125905568128
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION LOWER-CASE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "A#B.C%D+E$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION LOWER-CASE ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[a#b.c%d+e$
])

AT_CLEANUP

AT_SETUP([FUNCTION LOWER-CASE with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "A#B.C%D+E$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION LOWER-CASE ( X ) (1 : 3)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[a#b
])

AT_CLEANUP

AT_SETUP([FUNCTION MAX])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MAX ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[8
])

AT_CLEANUP

AT_SETUP([FUNCTION MEAN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MEAN ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-1.20000000000000000
])

AT_CLEANUP

AT_SETUP([FUNCTION MEDIAN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MEDIAN ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[0
])

AT_CLEANUP

AT_SETUP([FUNCTION MIDRANGE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MIDRANGE ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-3.000000000000000000
])

AT_CLEANUP

AT_SETUP([FUNCTION MIN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MIN ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-14
])

AT_CLEANUP

AT_SETUP([FUNCTION MOD])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION MOD ( -11 5 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+000000000000000004
])

AT_CLEANUP

AT_SETUP([FUNCTION NUMVAL])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(12) VALUE " -9876.1234 ".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION NUMVAL ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-00000000009876.1234
])

AT_CLEANUP

AT_SETUP([FUNCTION NUMVAL-C])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(14) VALUE " % -9876.1234 ".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION NUMVAL-C ( X , "%" )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-00000000009876.1234
])

AT_CLEANUP

AT_SETUP([FUNCTION NUMVAL with validation])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. X.
       SPECIAL-NAMES.
       CURRENCY SIGN IS "$".
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 x PIC x(20).
       77 res pic +(20)9.9(3).
       PROCEDURE DIVISION.
       MAIN.
           move '12345678901234567890' to x
           perform getres
           perform getres-c
           move '1234567890123456789' to x
           perform getres
           move '1234567890123456789+' to x
           perform getres
           move '123456789012345678DB' to x
           perform getres
           perform getres-c-eur
           move '-123' to x
           perform getres
           move '-123.45' to x
           perform getres
           move '  + 123' to x
           perform getres
           move '   123  -' to x
           perform getres
           move ' 123.5 CR  ' to x
           perform getres
           move '.5 +' to x
           perform getres
           move '  +   123   ' to x
           perform getres
           move '.12  ' to x
           perform getres
           move ' $ 9.25  ' to x
           perform getres-c
           move ' $ 9.25  ' to x
           perform getres-c-pct
           move ' % 9.25  ' to x
           perform getres-c-pct
           move 'EUR 9.25  ' to x
           perform getres-c-eur
           move 'EUR 9.25 -' to x
           perform getres-c-eur
           move '99.9 DB' to x
           perform getres-c-eur
           stop run
           .
       getres section.
           compute res = function numval(x) 
                ON SIZE ERROR DISPLAY     "NUMVAL      : " x " " res 
                                         " Exception"
                NOT ON SIZE ERROR DISPLAY "NUMVAL      : " x " " res
           end-compute
           .
       getres-c section.
           compute res = function numval-c(x, "%") 
                ON SIZE ERROR DISPLAY     "NUMVAL-C    : " x " " res 
                                         " Exception"
                NOT ON SIZE ERROR DISPLAY "NUMVAL-C    : " x " " res
           end-compute
           .
       getres-c-pct section.
           compute res = function numval-c(x, "%") 
                ON SIZE ERROR DISPLAY     "NUMVAL-C %  : " x " " res 
                                         " Exception"
                NOT ON SIZE ERROR DISPLAY "NUMVAL-C %  : " x " " res
           end-compute
           .
       getres-c-eur section.
           compute res = function numval-c(x, "EUR") 
                ON SIZE ERROR DISPLAY     "NUMVAL-C EUR: " x " " res 
                                         " Exception"
                NOT ON SIZE ERROR DISPLAY "NUMVAL-C EUR: " x " " res
           end-compute
           .
])
AT_CHECK([${COMPILE} -fnumval-validate -o prog prog.cob])
AT_CHECK([./prog], [0],
[NUMVAL      : 12345678901234567890 +12345678901234567168.000
NUMVAL-C    : 12345678901234567890 +12345678901234567168.000
NUMVAL      : 1234567890123456789   +1234567890123456768.000
NUMVAL      : 1234567890123456789+  +1234567890123456768.000
NUMVAL      : 123456789012345678DB   -123456789012345678.000
NUMVAL-C EUR: 123456789012345678DB   -123456789012345678.000
NUMVAL      : -123                                  -123.000
NUMVAL      : -123.45                               -123.450
NUMVAL      :   + 123                               +123.000
NUMVAL      :    123  -                             -123.000
NUMVAL      :  123.5 CR                             -123.500
NUMVAL      : .5 +                                    +0.500
NUMVAL      :   +   123                             +123.000
NUMVAL      : .12                                     +0.120
NUMVAL-C    :  $ 9.25                                 +9.250
NUMVAL-C %  :  $ 9.25                                 +9.250
NUMVAL-C %  :  % 9.25                                 +9.250
NUMVAL-C EUR: EUR 9.25                                +9.250
NUMVAL-C EUR: EUR 9.25 -                              -9.250
NUMVAL-C EUR: 99.9 DB                                -99.900
])
AT_CLEANUP

AT_SETUP([FUNCTION ORD])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION ORD ( "k" )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00000108
])

AT_CLEANUP

AT_SETUP([FUNCTION ORD-MAX])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION ORD-MAX ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00000004
])

AT_CLEANUP

AT_SETUP([FUNCTION ORD-MIN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION ORD-MIN ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00000002
])

AT_CLEANUP

AT_SETUP([FUNCTION PI])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION PI
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[3.1415926535897932384626433832795029
])

AT_CLEANUP

AT_SETUP([FUNCTION PRESENT-VALUE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION PRESENT-VALUE ( 3 2 1 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[0.562500000000000000
])

AT_CLEANUP

AT_SETUP([FUNCTION RANGE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION RANGE ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+000000000000000022
])

AT_CLEANUP

AT_SETUP([FUNCTION REM])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION REM ( -11 5 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[-000000000000000001
])

AT_CLEANUP

AT_SETUP([FUNCTION REVERSE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "A#B.C%D+E$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION REVERSE ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[$E+D%C.B#A
])

AT_CLEANUP

AT_SETUP([FUNCTION REVERSE with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "A#B.C%D+E$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION REVERSE ( X ) (1 : 4)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[$E+D
])

AT_CLEANUP

AT_SETUP([FUNCTION SECONDS-FROM-FORMATTED-TIME])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC      X(6)   VALUE "hhmmss".
       01  Y   PIC      9(8)   COMP-5.
       01  Z   PIC      X(6)   VALUE "010203".
       PROCEDURE        DIVISION.
           MOVE FUNCTION SECONDS-FROM-FORMATTED-TIME (X, Z) TO Y.
           IF Y = 3723
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION SECONDS-PAST-MIDNIGHT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC      9(8)   COMP-5.
       PROCEDURE        DIVISION.
           MOVE FUNCTION SECONDS-PAST-MIDNIGHT TO Y.
           IF Y < 86402
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION SIGN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION SIGN ( 3.12345 )
           END-DISPLAY.
           DISPLAY FUNCTION SIGN ( -0.0 )
           END-DISPLAY.
           DISPLAY FUNCTION SIGN ( 0.0 )
           END-DISPLAY.
           DISPLAY FUNCTION SIGN ( -3.12345 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+00000001
+00000000
+00000000
-00000001
])

AT_CLEANUP

AT_SETUP([FUNCTION SIN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.5.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION SIN ( X ) TO Y.
           IF Y >= 0.99749498660405440 AND
              Y <= 0.99749498660405450
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION SQRT])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.5.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION SQRT ( X ) TO Y.
           IF Y >= 1.22474487139158890 AND
              Y <= 1.22474487139158899
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION STANDARD-DEVIATION])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   S9V9(17)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION STANDARD-DEVIATION ( 3 -14 0 8 -3 ) TO Y.
           IF Y >= 7.35934779718963925 AND
              Y <= 7.35934779718964025
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION STORED-CHAR-LENGTH])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(24).
       PROCEDURE        DIVISION.
           MOVE "123456789012" TO Y.
           DISPLAY FUNCTION STORED-CHAR-LENGTH ( Y )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[00000012
])

AT_CLEANUP

AT_SETUP([FUNCTION SUBSTITUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(20).
       PROCEDURE        DIVISION.
           MOVE "abc111444555defxxabc" TO Y.
           DISPLAY FUNCTION SUBSTITUTE ( Y "abc" "zz" "55" "666" )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[zz1114446665defxxzz
])

AT_CLEANUP

AT_SETUP([FUNCTION SUBSTITUTE with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(20).
       PROCEDURE        DIVISION.
           MOVE "abc111444555defxxabc" TO Y.
           DISPLAY FUNCTION SUBSTITUTE
                   ( Y "abc" "zz" "55" "666" ) (2 : 9)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[z11144466
])

AT_CLEANUP

AT_SETUP([FUNCTION SUBSTITUTE-CASE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(20).
       PROCEDURE        DIVISION.
           MOVE "ABC111444555defxxabc" TO Y.
           DISPLAY FUNCTION SUBSTITUTE-CASE (Y "abc" "zz" "55" "666")
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[zz1114446665defxxzz
])

AT_CLEANUP

AT_SETUP([FUNCTION SUBSTITUTE-CASE with reference mod])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Y   PIC   X(20).
       PROCEDURE        DIVISION.
           MOVE "abc111444555defxxabc" TO Y.
           DISPLAY FUNCTION SUBSTITUTE-CASE
                   ( Y "ABC" "zz" "55" "666" ) (2 : 9)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[z11144466
])

AT_CLEANUP

AT_SETUP([FUNCTION TAN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   S9(4)V9(4) VALUE 1.5.
       01  Y   PIC   S99V9(16)   COMP.
       PROCEDURE        DIVISION.
           MOVE FUNCTION TAN ( X ) TO Y.
           IF Y >= 14.1014199471717185 AND
              Y <= 14.1014199471717205
                   DISPLAY "OK"
                   END-DISPLAY
           ELSE
                   DISPLAY Y
                   END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION TRIM])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(12) VALUE " a#b.c%d+e$ ".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION TRIM ( X )
           END-DISPLAY.
           DISPLAY FUNCTION TRIM ( X TRAILING )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[a#b.c%d+e$
 a#b.c%d+e$
])

AT_CLEANUP

AT_SETUP([FUNCTION TRIM with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(12) VALUE " a#b.c%d+e$ ".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION TRIM ( X ) (2 : 3)
           END-DISPLAY.
           DISPLAY FUNCTION TRIM ( X TRAILING ) (2 : 3)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[#b.
a#b
])

AT_CLEANUP

AT_SETUP([FUNCTION TRIM (NATIONAL)])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                                                                                                       
       PROGRAM-ID.              prog.                                                                                                           
       ENVIRONMENT DIVISION.                                                                                                                          
       CONFIGURATION SECTION.                                                                                                                        
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.                                                                                                      
                                                                                                                                                      
       INPUT-OUTPUT SECTION.                                                                                                                          
       FILE-CONTROL.                                                                                                                                
       DATA DIVISION.                                                                                                                                 
       FILE SECTION.                                                                                                                                  

       WORKING-STORAGE SECTION.                                                                                                                       
       01  NATIONAL-WRK                   PIC N(10) NATIONAL.                                                                                         
       01  ANZ                            PIC 9(3).                                                                                                   

       PROCEDURE DIVISION.                                                                                                                            
       ANFANG.                                                                                                                                        
           MOVE     LENGTH OF NATIONAL-WRK        TO ANZ.                                                                                             
           if ANZ <> 20 display "Expect 20 got " ANZ.
           COMPUTE  ANZ = FUNCTION LENGTH(NATIONAL-WRK).                                                                                              
           if ANZ <> 10 display "Expect 10 got " ANZ.
           MOVE     " ABC " TO NATIONAL-WRK.                                                                                                            
           COMPUTE  ANZ = FUNCTION LENGTH(                                                                                                            
                          FUNCTION TRIM(NATIONAL-WRK)).                                                                                              
           if ANZ <> 3  display "Expect 3 got " ANZ.
           MOVE     " ABC" TO NATIONAL-WRK.                                                                                                            
           if "ABC" NOT = FUNCTION TRIM(NATIONAL-WRK)
              display "Not Equalok   ".                                                                                                                                                      
           STOP RUN.                                                                                                                                    
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [])

AT_CLEANUP

AT_SETUP([FUNCTION UPPER-CASE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "a#b.c%d+e$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION UPPER-CASE ( X )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[A#B.C%D+E$
])

AT_CLEANUP

AT_SETUP([FUNCTION UPPER-CASE with reference modding])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X   PIC   X(10) VALUE "a#b.c%d+e$".
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION UPPER-CASE ( X ) (1 : 3)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[A#B
])

AT_CLEANUP

AT_SETUP([FUNCTION VARIANCE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY FUNCTION VARIANCE ( 3 -14 0 8 -3 )
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[+54.1600000000000000
])

AT_CLEANUP

AT_SETUP([FUNCTION WHEN-COMPILED])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  XYZ.
           03 X         PIC X.
           03 FILLER    PIC X(20).
       PROCEDURE        DIVISION.
           MOVE FUNCTION WHEN-COMPILED TO XYZ.
           IF X = "2"
              DISPLAY "OK"
              END-DISPLAY
           ELSE
              DISPLAY "NOT OK"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([FUNCTION UPPERCASE/LOWERCASE WITH ICU])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  LOWER-NATIONAL   PIC N(3) NATIONAL.
       01  UPPER-NATIONAL   PIC N(3) NATIONAL.
       PROCEDURE        DIVISION.
           MOVE     NX"0068006b0073" TO LOWER-NATIONAL.
           MOVE     SPACES   TO UPPER-NATIONAL.
           MOVE     FUNCTION UPPER-CASE(LOWER-NATIONAL) TO 
                    UPPER-NATIONAL. 

           IF       UPPER-NATIONAL = NX"0048004b0053"
                    DISPLAY "OK"
           END-IF.
           MOVE     NX"0048004b0053" TO UPPER-NATIONAL.
           MOVE     SPACES   TO LOWER-NATIONAL.
           MOVE     FUNCTION LOWER-CASE(UPPER-NATIONAL) TO 
                    LOWER-NATIONAL. 

           IF       LOWER-NATIONAL = NX"0068006b0073"
                   DISPLAY "OK"
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
OK
])

AT_CLEANUP

AT_SETUP([FUNCTION INTEGER-PART WITH DIVISION])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
       SPECIAL-NAMES.
            DECIMAL-POINT is comma.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  ws-gesmenge       pic s9(9)v9(2)    comp-3.
       01  ws-inhalt         pic 9(6). 
       01  ws-ganzzahl       pic 9(9).
       PROCEDURE DIVISION.
       MOVE 1,00 TO ws-gesmenge.
       MOVE 60 TO ws-inhalt.
       COMPUTE  ws-ganzzahl =
              FUNCTION INTEGER-PART (ws-gesmenge / ws-inhalt).
       IF ws-ganzzahl = "000000000"
            DISPLAY "OK"
       END-IF.
       STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([DIVISION with bin opt])
AT_DATA([prog.cob], [
       Identification Division.
       Program-ID. prog.

       Working-Storage Section.  
       01     ug-mesi   pic   S9(8) COMP  value  +00000012.              
       01     ug-freq           COMP-2  value  +0.02000000000000000.
       01     UG-V              COMP-2 value zero.                
       01 WS-CONSERVATO-APPL    PIC S9(12)V9(3).
       01 WS-CONSERVATO-TESTA   PIC S9(12)V9(3).
       01 UGR-RISULTATO         COMP-2.

       Procedure Division.
           compute  UG-V = ( 1 + ug-freq ) ** ( -1 / ug-mesi ).
           display "'" ug-v "'".
           compute  UG-V = ( 1 + ug-freq ) ** ( - 1 / ug-mesi ).
           display "'" ug-v "'".
           COMPUTE WS-CONSERVATO-APPL = FUNCTION LOG(.001).                         
           DISPLAY WS-CONSERVATO-APPL
           MOVE 250000 TO   UGR-RISULTATO
           MOVE ZERO           TO WS-CONSERVATO-TESTA
           COMPUTE  WS-CONSERVATO-APPL  =
                    UGR-RISULTATO - WS-CONSERVATO-TESTA
           END-COMPUTE.
           DISPLAY "'" WS-CONSERVATO-APPL 
           "' '" UGR-RISULTATO
           "' '" WS-CONSERVATO-TESTA "'".
       stop run.
])

AT_CHECK([${COMPILE} -o prog prog.cob ])
AT_CHECK([./prog], [0],
['0.998351141921252183'
'0.998351141921252183'
-000000000006.907
'+000000250000.000' '250000.000000000000000000' '+000000000000.000'
])

AT_CHECK([${COMPILE} -o prog prog.cob -fbin-opt-strict])
AT_CHECK([./prog], [0],
['0.998351141921252183'
'0.998351141921252183'
-000000000006.907
'+000000250000.000' '250000.000000000000000000' '+000000000000.000'
])

AT_CHECK([${COMPILE} -o prog prog.cob -fcompute-ibm])
AT_CHECK([./prog], [0],
['0.998351141921252183'
'0.998351141921252183'
-000000000006.907
'+000000250000.000' '250000.000000000000000000' '+000000000000.000'
])

AT_CLEANUP

AT_SETUP([DIVISION with -fcompute-ibm])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                       
       PROGRAM-ID.    VIXP247.                                        
       DATA DIVISION.                                                   
       WORKING-STORAGE SECTION.  
       01 UG-V COMP-2    VALUE ZERO.  
       01 WS-CONSERVATO-APPL    PIC S9(12)V9(3).                                                
       01 WS-CONSERVATO-TESTA   PIC S9(12)V9(3).                                                
       01 UGR-RISULTATO         COMP-2. 
       01 WS-CAMPO-NUM          PIC 9(5).
       01 WS-PCNT               PIC S9(03)V9(6) VALUE ZERO.
       01  CAB                  COMP-2  VALUE ZERO.
       01  CA2                  COMP-2  VALUE ZERO.
       01  CMB                  COMP-2  VALUE ZERO.
       01  CM2                  COMP-2  VALUE ZERO.
       01  PREMIO-TOT           PIC S9(9)V9(3)  VALUE 0.
       01  ARROT                PIC S9V9(4)     VALUE 0.
       01  RIP                  PIC S9(9)V9(3)  VALUE 0.
       PROCEDURE DIVISION.                                              
           MOVE 250000 TO   UGR-RISULTATO
           MOVE ZERO           TO WS-CONSERVATO-TESTA
      
           COMPUTE  WS-CONSERVATO-APPL  =
                    UGR-RISULTATO - WS-CONSERVATO-TESTA
           END-COMPUTE.
REPLY      DISPLAY 'WS-CONSERVATO-APPL ' WS-CONSERVATO-APPL
           ' ' UGR-RISULTATO
           ' ' WS-CONSERVATO-TESTA
            MOVE 2016    TO CA2
            MOVE 1       TO CM2
            MOVE 2015    TO CAB
            MOVE 9       TO CMB
            MOVE 221.040 TO PREMIO-TOT
            MOVE 0.005   TO ARROT  
            
             COMPUTE WS-PCNT  = ((2 * ((12 * CA2 + CM2) -
                                   (12 * CAB + CMB)) - 1) / 24)
             COMPUTE RIP   = (PREMIO-TOT * WS-PCNT) + ARROT
            

REPLY        DISPLAY 'WS-PCNT ' WS-PCNT
             DISPLAY 'CA2 ' CA2
             DISPLAY 'CM2 ' CM2
             DISPLAY 'CAB ' CAB
             DISPLAY 'CMB ' CMB
             DISPLAY 'RIP ' RIP
             DISPLAY 'PREMIO-TOT ' PREMIO-TOT
             DISPLAY 'ARROT ' ARROT
      
           STOP RUN.                                                    
])

AT_CHECK([${COMPILE} -o prog prog.cob ])
AT_CHECK([./prog], [0],
[WS-CONSERVATO-APPL +000000250000.000 250000.000000000000000000 +000000000000.000
WS-PCNT +000.291666
CA2 2016.000000000000000000
CM2 1.000000000000000000
CAB 2015.000000000000000000
CMB 9.000000000000000000
RIP +000000064.474
PREMIO-TOT +000000221.040
ARROT +0.0050
])

AT_CHECK([${COMPILE} -o prog prog.cob -fcompute-ibm])
AT_CHECK([./prog], [0],
[WS-CONSERVATO-APPL +000000250000.000 250000.000000000000000000 +000000000000.000
WS-PCNT +000.291667
CA2 2016.000000000000000000
CM2 1.000000000000000000
CAB 2015.000000000000000000
CMB 9.000000000000000000
RIP +000000064.475
PREMIO-TOT +000000221.040
ARROT +0.0050
])

AT_CHECK([${COMPILE} -o prog prog.cob -fround-fp])
AT_CHECK([./prog], [0],
[WS-CONSERVATO-APPL +000000250000.000 250000.000000000000000000 +000000000000.000
WS-PCNT +000.291667
CA2 2016.000000000000000000
CM2 1.000000000000000000
CAB 2015.000000000000000000
CMB 9.000000000000000000
RIP +000000064.475
PREMIO-TOT +000000221.040
ARROT +0.0050
])

AT_CLEANUP

AT_SETUP([Italian Generic test 1])
AT_DATA([prog.cob], [
       Identification Division.
       Program-ID. ENDIANBT.
      * roxi testa cobol liberamente tratto e poi smanettato da
      * http://groups.google.com/group/
      * comp.lang.cobol/browse_thread/thread/26cd15966572e313
       Data Division.
       Working-Storage Section.  
       01 HOSTVAVA.
          49  HOST-LAST-NAME-LEN PIC s9(4) comp-5.
          49  HOST-LAST-NAME-TXT PIC x(88).
       01  male  pic 9  value 0.
       01  ciao  pic X(8)  VALUE spaces.
       01  Check-Format.
           05  Test-Bin  Pic S9(09) comp-5  Value +12345678.
       01  Group1.
           05  Num1   Pic S9(09) comp-5.
           05  filler Pic  X(04).
       01  Group2 Redefines Group1.
           05  filler Pic  X(02).
           05  Num2   Pic S9(09) comp-5.
       01  Group3 Redefines Group1.
           05  filler Pic  X(04).
           05  Num3   Pic S9(04) comp-5.
           05  filler Pic  X(02).
       01  Group4 Redefines Group1.
           05  Num4   Pic S99999V99 comp-5.
           05  Num5   Pic S99V999 comp-5.
       01  debug-id   pic 9(4)    comp-5 value 1234.
       01  unicode-prova      pic n(20) usage national.

      * 01  ciao  pic X(8)  VALUE spaces.
      * 01  ciao  pic S9(8)  VALUE zeroes.
      * 01  ciao  pic S9(4)  comp-5 VALUE zeroes.

       01 vice170 pic 9(3) value 11.
       88 vice88   value 11.
       01  aaaa pic s99v99  value  0.
       01  partenza   comp-2
                     value +0.0001799777777777777.
       01  arrivo     pic s9(3)v9(6). 
       01     WS-COMO-2               PIC   9(02).       
       01     WS-COMO-X               PIC   X(01).
       01     UG-FREQ-RENDITA   pic   S9(8) COMP  value  +00000012.              
       01     UGP-I             COMP-2  value  +0.02000000000000000.
       01     UG-V              COMP-2.                
       01     UGP-I-f   pic s9(1)V9(17) value  +0.02000000000000000.
       01     UG-V-f    pic 9(1)V9(17).      
       01     E         pic 9(2) value 1.
       
       01 WS-CONSERVATO-APPL    PIC S9(12)V9(3).
       01 WS-CONSERVATO-TESTA   PIC S9(12)V9(3).
       01 UGR-RISULTATO         COMP-2.
       01 ugr-decimale          pic s9(12)v9(3).  
 
***************
       Procedure Division.
       Mainline.
       MOVE 250000 TO UGR-RISULTATO
       MOVE 250000 TO UGR-decimale
       MOVE ZERO   TO WS-CONSERVATO-TESTA
       COMPUTE  WS-CONSERVATO-APPL  =
       UGR-RISULTATO - WS-CONSERVATO-TESTA
           END-COMPUTE.
       DISPLAY 'WS-CONSERVATO-APPL ' WS-CONSERVATO-APPL
          ' ' UGR-RISULTATO
          ' ' WS-CONSERVATO-TESTA.
       COMPUTE  WS-CONSERVATO-APPL  =
       UGR-decimale - WS-CONSERVATO-TESTA
           END-COMPUTE.
       DISPLAY 'WS-CONSERVATO-APPL ' WS-CONSERVATO-APPL
          ' ' UGR-decimale
          ' ' WS-CONSERVATO-TESTA.
       move 10 to ciao.
       add .01 to aaaa.
       move partenza to arrivo.
           compute  UG-V = (1 + UGP-I) ** ( -1 / UG-FREQ-RENDITA).
           compute  UG-V-f = (1 + UGP-I-f) ** ( -1 / UG-FREQ-RENDITA).
           compute ws-como-2 = 10 / 1 
           display "divido per uno : " ws-como-2.
           compute e = ws-como-2 + 1
           compute ws-como-2 = 10 / 0 
           display "divido per zero : " ws-como-2.
           MOVE 9 TO WS-COMO-X
           MOVE WS-COMO-X TO WS-COMO-2          

           DISPLAY 'WS-COMO-2 ' WS-COMO-2           

           IF WS-COMO-2 = 9
              DISPLAY ' WS-COMO-2 = 9'
           ELSE
              IF WS-COMO-2 = 09
                 DISPLAY ' WS-COMO-2 = 09'
              ELSE
                 DISPLAY ' ALTRO 2'
              END-IF
           END-IF.
           Evaluate Check-Format
             When X"00BC614E"
                Perform Big-Endian
             When X"4E61BC00"
                Perform Little-Endian
             When Other
                Display "Unexpected Binary Format, no tests Performed"
           End-Evaluate
           if male  = 0
              Display "*** ALL TEST ARE OKAY ****"
           else
              Display "**** BUTTA VIA STO COBOL CHE TOPPA ! ****"
           end-if
           display aaaa.
           stop run. 
**************
       Big-Endian.
           Display "==> Start BIG-ENDIAN Test"
           Move Zeroes   to Num2
           Move +10101010  TO    Num1
           Add Num1 to Num2
t              On Size Error
t                  Display "-> ADD had an ON SIZE ERROR"
t          End-ADD
           If Num2 = +564928786
              Display "       ADD Test Passed, Num2=" Num2
           Else
              Display "       ADD Test FAILED, Num2=" Num2
              move 1 to male
           End-If


           Move Zeroes   to Num3
           Move +1234567 To Num2
           Subtract Num3 From Num2
t              On Size Error
t                  Display "-> SUBTRACT had an ON SIZE ERROR"
t          End-SUBTRACT
           If Num2 = +1245184
               Display "  SUBTRACT Test Passed, Num2=" Num2
           Else
               Display "  SUBTRACT Test FAILED, Num2=" Num2
               move 1 to male
           End-If

           Move Zeroes   to Num3
           Move +1234567 To Num2
           compute  Num2 = Num2 - Num3
t              On Size Error
t                  Display "-> CompuMinus had an ON SIZE ERROR"
t          End-compute
           If Num2 = +1245184
              Display "CompuMinus Test Passed, Num2=" Num2
           Else
              Display "CompuMinus Test FAILED, Num2=" Num2
              move 1 to male
           End-If


           Move Zeroes  to Num2
           Move +123  to Num3
           Multiply Num3 By Num2
t              On Size Error
t                  Display "-> MULTIPLY had an ON SIZE ERROR"
t          End-MULTIPLY
           If Num2 = +15129
              Display "  MULTIPLY test Passed, Num2=" Num2
           Else
              Display "  MULTIPLY test FAILED, Num2=" Num2
              move 1 to male
           End-If


           Move Zeroes  to Num1 Num3
           Move +7286841 to Num2
           Divide Num2 by Num3  Giving Num4  Remainder Num5
t              On Size Error
t                  Display "-> DIVIDE had an ON SIZE ERROR"
t          End-Divide
           If   Num4 = +590.26
            and Num5 = +81.3
               Display "    DIVIDE test Passed, Num4=" Num4
               DISPLAY "                        Num5=" Num5
           Else
               Display "    DIVIDE test FAILED, Num4=" Num4
               DISPLAY "                        Num5=" Num5
               move 1 to male
           End-IF
           Display "==>   End BIG-ENDIAN Test ========"
            .
*********************************************
       Little-Endian.
           Display "==> Start LITTLE-ENDIAN Test"
           Move Zeroes   to Num2
           Move +10101010  To Num1
           Add Num1 to Num2
t              On Size Error
t                  Display "-> ADD had an ON SIZE ERROR"
t          End-ADD
           If Num2 = +10101164
              Display "       ADD Test Passed, Num2=" Num2
           Else
              Display "       ADD Test FAILED, Num2=" Num2
              move 1 to male
           End-If

           Move Zeroes   to Num3
           Move +1234567 To Num2
           Subtract Num3 From Num2
t              On Size Error
t                  Display "-> SUBTRACT had an ON SIZE ERROR"
t          End-SUBTRACT
           If Num2 = +1234549
              Display "  SUBTRACT Test Passed, Num2=" Num2
           Else
              Display "  SUBTRACT Test FAILED, Num2=" Num2
              move 1 to male
           End-If

           Move Zeroes   to Num3
           Move +1234567 To Num2
           compute  Num2 = Num2 - Num3
t              On Size Error
t                  Display "-> CompuMinus had an ON SIZE ERROR"
t          End-compute
           If Num2 = +1234549
               Display "CompuMinus Test Passed, Num2=" Num2
           Else
               Display "CompuMinus Test FAILED, Num2=" Num2
               move 1 to male
           End-If

           Move Zeroes  to Num2
           Move +4915200 to Num2
           Multiply Num3 By Num2
t              On Size Error
t                  Display "-> MULTIPLY had an ON SIZE ERROR"
t          End-MULTIPLY
           If Num2 = +368640000
              Display "  MULTIPLY test Passed, Num2=" Num2
           Else
              Display "  MULTIPLY test FAILED, Num2=" Num2
              move 1 to male
           End-If

           Move Zeroes  to Num1 Num3
           Move +864224 to Num2
           Divide Num2 by Num3  Giving Num4 Remainder Num5
t              On Size Error
t                  Display "-> DIVIDE had an ON SIZE ERROR"
t          End-Divide
           If   Num4 = +66478.76
            and Num5 = +0.120
               Display "    DIVIDE test Passed, Num4=" Num4
               DISPLAY "                        Num5=" Num5
           Else
               Display "    DIVIDE test FAILED, Num4=" Num4
               DISPLAY "                        Num5=" Num5
               move 1 to male
           End-IF
           Display "==>   End LITTLE-ENDIAN Test ========"
           move 'pippo' to unicode-prova
           if unicode-prova equal 'pippo' then
              Display  function display-of(unicode-prova,"819") "passo"
           else
              display "non passo"
           end-if   
            .
])

AT_CHECK([${COMPILE} -o  prog -w prog.cob ])
AT_CHECK([./prog], [0],
[WS-CONSERVATO-APPL +000000250000.000 250000.000000000000000000 +000000000000.000
WS-CONSERVATO-APPL +000000250000.000 +000000250000.000 +000000000000.000
divido per uno : 10
divido per zero : 10
WS-COMO-2 09
 WS-COMO-2 = 9
==> Start LITTLE-ENDIAN Test
       ADD Test Passed, Num2=+010101164
  SUBTRACT Test Passed, Num2=+001234549
CompuMinus Test Passed, Num2=+001234549
  MULTIPLY test Passed, Num2=+368640000
    DIVIDE test Passed, Num4=+66478.76
                        Num5=+00.120
==>   End LITTLE-ENDIAN Test ========
pippo               passo
*** ALL TEST ARE OKAY ****
+00.01
])
AT_CHECK([${COMPILE} -o prog -O -w prog.cob ])
AT_CHECK([./prog], [0],
[WS-CONSERVATO-APPL +000000250000.000 250000.000000000000000000 +000000000000.000
WS-CONSERVATO-APPL +000000250000.000 +000000250000.000 +000000000000.000
divido per uno : 10
divido per zero : 10
WS-COMO-2 09
 WS-COMO-2 = 9
==> Start LITTLE-ENDIAN Test
       ADD Test Passed, Num2=+010101164
  SUBTRACT Test Passed, Num2=+001234549
CompuMinus Test Passed, Num2=+001234549
  MULTIPLY test Passed, Num2=+368640000
    DIVIDE test Passed, Num4=+66478.76
                        Num5=+00.120
==>   End LITTLE-ENDIAN Test ========
pippo               passo
*** ALL TEST ARE OKAY ****
+00.01
])
       
AT_CLEANUP
