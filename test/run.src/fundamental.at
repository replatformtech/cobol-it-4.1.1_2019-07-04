### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003-2007 Keisuke Nishida
## Copyright (C) 2007 Roger While
## Copyright (C) 2008 Cobol-IT
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### Fundamental Tests

AT_SETUP([DISPLAY literals])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY "abc"
           END-DISPLAY.
           DISPLAY  123
           END-DISPLAY.
           DISPLAY +123
           END-DISPLAY.
           DISPLAY -123
           END-DISPLAY.
           DISPLAY  12.3
           END-DISPLAY.
           DISPLAY +12.3
           END-DISPLAY.
           DISPLAY -12.3
           END-DISPLAY.
           DISPLAY -12.3e+1
           END-DISPLAY.
           DISPLAY -12.3e-1
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
-123
-1.23
])

AT_CLEANUP


AT_SETUP([DISPLAY literals, Decimal Point is COMMA])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       DECIMAL-POINT    IS COMMA.
       PROCEDURE        DIVISION.
           DISPLAY  12,3
           END-DISPLAY.
           DISPLAY +12,3
           END-DISPLAY.
           DISPLAY -12,3
           END-DISPLAY.
           DISPLAY -12,3e+1
           END-DISPLAY.
           DISPLAY -12,3e-1
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[12,3
+12,3
-12,3
-123
-1,23
])


AT_CLEANUP

AT_SETUP([COMPUTE literals, Decimal Point is COMMA ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION .       
       SPECIAL-NAMES .
       DECIMAL-POINT is COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 mydata1 PIC 9(3)V9(2) .
       01 mydata2 PIC 9(3)v9(2) .
       PROCEDURE DIVISION .
           COMPUTE mydata1 =,5*10 .
           COMPUTE mydata2 = 0,05 * 10 + ,5 .
           DISPLAY mydata1 .
           DISPLAY mydata2 .
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[005,00
001,00
])

AT_CLEANUP

AT_SETUP([COMPUTE literals, Decimal Point is COMMA II ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION .       
       SPECIAL-NAMES . DECIMAL-POINT COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 mydata1 PIC 9(3)V9(2) .
       01 mydata2 PIC 9(3)v9(2) .
       PROCEDURE DIVISION .
           COMPUTE mydata1 =,5*10 .
           COMPUTE mydata2 = 0,05 * 10 + ,5 .
           DISPLAY mydata1 .
           DISPLAY mydata2 .
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[005,00
001,00
])

AT_CLEANUP

AT_SETUP([COMPUTE literals, Decimal Point is dot ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 mydata1 PIC 9(3)V9(2) .
       01 mydata2 PIC 9(3)v9(2) .
       PROCEDURE DIVISION .
           COMPUTE mydata1 =.5*10 .
           COMPUTE mydata2 = 0.05 * 10 + .5 .
           DISPLAY mydata1 .
           DISPLAY mydata2 .
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[005.00
001.00
])

AT_CLEANUP

AT_SETUP([COMPUTE FLOAT ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                       
           PROGRAM-ID. test_comp_2.
                                                                      
       ENVIRONMENT DIVISION.                                          
                                                                      
       CONFIGURATION SECTION.                                         
       SPECIAL-NAMES.                                                 
           DECIMAL-POINT IS COMMA.                                    
                                                                      
       DATA DIVISION.
       WORKING-STORAGE SECTION.  
       01  GRP.
       03  WS-PREMIO-NETTO              PIC S9(12)V9(03).
       03  UGR-RISULTATO-PERC-PROVV     COMP-2.
       03  WS-IMP-INTERO                PIC S9(10)V9(2).
       03  C2A                          COMP-2.
       03  C2B REDEFINES  C2A           COMP-2.
       03 G1 OCCURS 10 .
         05 G2 OCCURS 10 .
          08  T1 PIC 99    .

       01  GRP2 .
       03   truc OCCURS 20 COMP-2.
       01   idx PIC 999 .
       01   RES PIC 9(12)V9(18) COMP-3.
      *                                                                 
       PROCEDURE DIVISION.   

           MOVE 0,019     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
           MOVE 2100,000  TO C2B
           move 1 TO T1(2 7) 
           move 10 TO T1(2 5).
           MOVE 2 TO IDX
      
           COMPUTE  WS-IMP-INTERO  =
                    WS-PREMIO-NETTO * UGR-RISULTATO-PERC-PROVV
           DISPLAY  WS-IMP-INTERO
           COMPUTE  C2A  =
                    WS-PREMIO-NETTO * UGR-RISULTATO-PERC-PROVV
           DISPLAY  C2A
           COMPUTE  C2B  = 100 *10
                   
           COMPUTE  RES = C2A;
	   DISPLAY RES
           ADD 1 TO IDX
           COMPUTE  T1(idx, 7) = truc(idx).
           DISPLAY  T1(3, 7) "  " truc(2)
           COMPUTE  T1(3, 7) = truc(2).
           DISPLAY IDX " " T1(2, 7) " " T1(3, 7) 
           COMPUTE  C2B  = C2A * UGR-RISULTATO-PERC-PROVV
           DISPLAY  C2B
           COMPUTE  T1(1  7) = T1(2 7) + T1(2 5).
           COMPUTE  T1(idx, 7) = truc(idx).
           COMPUTE  T1(1  7) = T1(2 7) + T1(2 5).
           display  T1(1  7) "=" T1(2 7) "+" T1(2 5).
           DISPLAY  T1(3, 7) "=" truc(3).
           
           GOBACK.                                                         
		.
])

AT_CHECK([cobc -x -save-temps -G -w -fcompute-ibm prog.cob])
AT_CHECK([./prog ], [0],
[+0000000039,90
39.899999999999998579
000000001000,000000000000000000
00  0.000000000000000000
003 01 00
19.000000000000000000
11=01+10
00=0.000000000000000000
])

AT_CHECK([cobc -x -save-temps -G -w -O -fcompute-ibm prog.cob])
AT_CHECK([./prog ], [0],
[+0000000039,90
39.899999999999998579
000000001000,000000000000000000
00  0.000000000000000000
003 01 00
19.000000000000000000
11=01+10
00=0.000000000000000000
])

AT_CHECK([cobc -x -save-temps -G -w prog.cob])
AT_CHECK([./prog], [0],
[+0000000039,90
39.899999999999998579
000000001000,000000000000000000
00  0.000000000000000000
003 01 00
19.000000000000000000
11=01+10
00=0.000000000000000000
])

AT_CHECK([cobc -x -save-temps -G -O -w prog.cob])
AT_CHECK([./prog], [0],
[+0000000039,90
39.899999999999998579
000000001000,000000000000000000
00  0.000000000000000000
003 01 00
19.000000000000000000
11=01+10
00=0.000000000000000000
])

AT_CLEANUP

AT_SETUP([COMPUTE FLOAT II])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                       
           PROGRAM-ID. test_comp_2.
                                                                      
       ENVIRONMENT DIVISION.                                          
                                                                      
       CONFIGURATION SECTION.                                         
       SPECIAL-NAMES.                                                 
           DECIMAL-POINT IS COMMA.                                    
                                                                      
       DATA DIVISION.
       WORKING-STORAGE SECTION.  
       01  WS-PREMIO-NETTO              PIC S9(12)V9(03).
       01  UGR-RISULTATO-PERC-PROVV     COMP-2.
       01  WS-IMP-INTERO                PIC S9(10)V9(2).
      *                                                                 
       PROCEDURE DIVISION.   
	   
           MOVE 0,019     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,011     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,012     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,012     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,013     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,014     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,015     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,016     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 0,018     TO UGR-RISULTATO-PERC-PROVV
           MOVE 2100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 100,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 1000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
           MOVE 10000,000  TO WS-PREMIO-NETTO
		  PERFORM DOIT
		  
		   stop run.
		   
	    DOIT.	   
           COMPUTE  WS-IMP-INTERO  =
                    WS-PREMIO-NETTO * UGR-RISULTATO-PERC-PROVV
           DISPLAY  WS-PREMIO-NETTO ' * ' UGR-RISULTATO-PERC-PROVV
                ' = ' WS-IMP-INTERO           
           .                                                       
])
AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[+000000002100,000 * 0.019000000000000000 = +0000000039,90
+000000000010,000 * 0.019000000000000000 = +0000000000,19
+000000000100,000 * 0.019000000000000000 = +0000000001,90
+000000001000,000 * 0.019000000000000000 = +0000000019,00
+000000010000,000 * 0.019000000000000000 = +0000000190,00
+000000002100,000 * 0.010999999999999999 = +0000000023,10
+000000000010,000 * 0.010999999999999999 = +0000000000,11
+000000000100,000 * 0.010999999999999999 = +0000000001,10
+000000001000,000 * 0.010999999999999999 = +0000000011,00
+000000010000,000 * 0.010999999999999999 = +0000000110,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012999999999999999 = +0000000027,30
+000000000010,000 * 0.012999999999999999 = +0000000000,13
+000000000100,000 * 0.012999999999999999 = +0000000001,30
+000000001000,000 * 0.012999999999999999 = +0000000013,00
+000000010000,000 * 0.012999999999999999 = +0000000130,00
+000000002100,000 * 0.014000000000000000 = +0000000029,40
+000000000010,000 * 0.014000000000000000 = +0000000000,14
+000000000100,000 * 0.014000000000000000 = +0000000001,40
+000000001000,000 * 0.014000000000000000 = +0000000014,00
+000000010000,000 * 0.014000000000000000 = +0000000140,00
+000000002100,000 * 0.014999999999999999 = +0000000031,50
+000000000010,000 * 0.014999999999999999 = +0000000000,15
+000000000100,000 * 0.014999999999999999 = +0000000001,50
+000000001000,000 * 0.014999999999999999 = +0000000015,00
+000000010000,000 * 0.014999999999999999 = +0000000150,00
+000000002100,000 * 0.016000000000000000 = +0000000033,60
+000000000010,000 * 0.016000000000000000 = +0000000000,16
+000000000100,000 * 0.016000000000000000 = +0000000001,60
+000000001000,000 * 0.016000000000000000 = +0000000016,00
+000000010000,000 * 0.016000000000000000 = +0000000160,00
+000000002100,000 * 0.017999999999999999 = +0000000037,80
+000000000010,000 * 0.017999999999999999 = +0000000000,18
+000000000100,000 * 0.017999999999999999 = +0000000001,80
+000000001000,000 * 0.017999999999999999 = +0000000018,00
+000000010000,000 * 0.017999999999999999 = +0000000180,00
])

AT_CHECK([${COMPILE} -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0],
[+000000002100,000 * 0.019000000000000000 = +0000000039,90
+000000000010,000 * 0.019000000000000000 = +0000000000,19
+000000000100,000 * 0.019000000000000000 = +0000000001,90
+000000001000,000 * 0.019000000000000000 = +0000000019,00
+000000010000,000 * 0.019000000000000000 = +0000000190,00
+000000002100,000 * 0.010999999999999999 = +0000000023,10
+000000000010,000 * 0.010999999999999999 = +0000000000,11
+000000000100,000 * 0.010999999999999999 = +0000000001,10
+000000001000,000 * 0.010999999999999999 = +0000000011,00
+000000010000,000 * 0.010999999999999999 = +0000000110,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012999999999999999 = +0000000027,30
+000000000010,000 * 0.012999999999999999 = +0000000000,13
+000000000100,000 * 0.012999999999999999 = +0000000001,30
+000000001000,000 * 0.012999999999999999 = +0000000013,00
+000000010000,000 * 0.012999999999999999 = +0000000130,00
+000000002100,000 * 0.014000000000000000 = +0000000029,40
+000000000010,000 * 0.014000000000000000 = +0000000000,14
+000000000100,000 * 0.014000000000000000 = +0000000001,40
+000000001000,000 * 0.014000000000000000 = +0000000014,00
+000000010000,000 * 0.014000000000000000 = +0000000140,00
+000000002100,000 * 0.014999999999999999 = +0000000031,50
+000000000010,000 * 0.014999999999999999 = +0000000000,15
+000000000100,000 * 0.014999999999999999 = +0000000001,50
+000000001000,000 * 0.014999999999999999 = +0000000015,00
+000000010000,000 * 0.014999999999999999 = +0000000150,00
+000000002100,000 * 0.016000000000000000 = +0000000033,60
+000000000010,000 * 0.016000000000000000 = +0000000000,16
+000000000100,000 * 0.016000000000000000 = +0000000001,60
+000000001000,000 * 0.016000000000000000 = +0000000016,00
+000000010000,000 * 0.016000000000000000 = +0000000160,00
+000000002100,000 * 0.017999999999999999 = +0000000037,80
+000000000010,000 * 0.017999999999999999 = +0000000000,18
+000000000100,000 * 0.017999999999999999 = +0000000001,80
+000000001000,000 * 0.017999999999999999 = +0000000018,00
+000000010000,000 * 0.017999999999999999 = +0000000180,00
])
AT_CHECK([${COMPILE} -O prog.cob])
AT_CHECK([./prog], [0],
[+000000002100,000 * 0.019000000000000000 = +0000000039,90
+000000000010,000 * 0.019000000000000000 = +0000000000,19
+000000000100,000 * 0.019000000000000000 = +0000000001,90
+000000001000,000 * 0.019000000000000000 = +0000000019,00
+000000010000,000 * 0.019000000000000000 = +0000000190,00
+000000002100,000 * 0.010999999999999999 = +0000000023,10
+000000000010,000 * 0.010999999999999999 = +0000000000,11
+000000000100,000 * 0.010999999999999999 = +0000000001,10
+000000001000,000 * 0.010999999999999999 = +0000000011,00
+000000010000,000 * 0.010999999999999999 = +0000000110,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012999999999999999 = +0000000027,30
+000000000010,000 * 0.012999999999999999 = +0000000000,13
+000000000100,000 * 0.012999999999999999 = +0000000001,30
+000000001000,000 * 0.012999999999999999 = +0000000013,00
+000000010000,000 * 0.012999999999999999 = +0000000130,00
+000000002100,000 * 0.014000000000000000 = +0000000029,40
+000000000010,000 * 0.014000000000000000 = +0000000000,14
+000000000100,000 * 0.014000000000000000 = +0000000001,40
+000000001000,000 * 0.014000000000000000 = +0000000014,00
+000000010000,000 * 0.014000000000000000 = +0000000140,00
+000000002100,000 * 0.014999999999999999 = +0000000031,50
+000000000010,000 * 0.014999999999999999 = +0000000000,15
+000000000100,000 * 0.014999999999999999 = +0000000001,50
+000000001000,000 * 0.014999999999999999 = +0000000015,00
+000000010000,000 * 0.014999999999999999 = +0000000150,00
+000000002100,000 * 0.016000000000000000 = +0000000033,60
+000000000010,000 * 0.016000000000000000 = +0000000000,16
+000000000100,000 * 0.016000000000000000 = +0000000001,60
+000000001000,000 * 0.016000000000000000 = +0000000016,00
+000000010000,000 * 0.016000000000000000 = +0000000160,00
+000000002100,000 * 0.017999999999999999 = +0000000037,80
+000000000010,000 * 0.017999999999999999 = +0000000000,18
+000000000100,000 * 0.017999999999999999 = +0000000001,80
+000000001000,000 * 0.017999999999999999 = +0000000018,00
+000000010000,000 * 0.017999999999999999 = +0000000180,00
])

AT_CHECK([${COMPILE} -O -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0],
[+000000002100,000 * 0.019000000000000000 = +0000000039,90
+000000000010,000 * 0.019000000000000000 = +0000000000,19
+000000000100,000 * 0.019000000000000000 = +0000000001,90
+000000001000,000 * 0.019000000000000000 = +0000000019,00
+000000010000,000 * 0.019000000000000000 = +0000000190,00
+000000002100,000 * 0.010999999999999999 = +0000000023,10
+000000000010,000 * 0.010999999999999999 = +0000000000,11
+000000000100,000 * 0.010999999999999999 = +0000000001,10
+000000001000,000 * 0.010999999999999999 = +0000000011,00
+000000010000,000 * 0.010999999999999999 = +0000000110,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012000000000000000 = +0000000025,20
+000000000010,000 * 0.012000000000000000 = +0000000000,12
+000000000100,000 * 0.012000000000000000 = +0000000001,20
+000000001000,000 * 0.012000000000000000 = +0000000012,00
+000000010000,000 * 0.012000000000000000 = +0000000120,00
+000000002100,000 * 0.012999999999999999 = +0000000027,30
+000000000010,000 * 0.012999999999999999 = +0000000000,13
+000000000100,000 * 0.012999999999999999 = +0000000001,30
+000000001000,000 * 0.012999999999999999 = +0000000013,00
+000000010000,000 * 0.012999999999999999 = +0000000130,00
+000000002100,000 * 0.014000000000000000 = +0000000029,40
+000000000010,000 * 0.014000000000000000 = +0000000000,14
+000000000100,000 * 0.014000000000000000 = +0000000001,40
+000000001000,000 * 0.014000000000000000 = +0000000014,00
+000000010000,000 * 0.014000000000000000 = +0000000140,00
+000000002100,000 * 0.014999999999999999 = +0000000031,50
+000000000010,000 * 0.014999999999999999 = +0000000000,15
+000000000100,000 * 0.014999999999999999 = +0000000001,50
+000000001000,000 * 0.014999999999999999 = +0000000015,00
+000000010000,000 * 0.014999999999999999 = +0000000150,00
+000000002100,000 * 0.016000000000000000 = +0000000033,60
+000000000010,000 * 0.016000000000000000 = +0000000000,16
+000000000100,000 * 0.016000000000000000 = +0000000001,60
+000000001000,000 * 0.016000000000000000 = +0000000016,00
+000000010000,000 * 0.016000000000000000 = +0000000160,00
+000000002100,000 * 0.017999999999999999 = +0000000037,80
+000000000010,000 * 0.017999999999999999 = +0000000000,18
+000000000100,000 * 0.017999999999999999 = +0000000001,80
+000000001000,000 * 0.017999999999999999 = +0000000018,00
+000000010000,000 * 0.017999999999999999 = +0000000180,00
])

AT_CLEANUP

AT_SETUP([FLOAT III.1])

AT_DATA([prog.cob], [
       ID DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.
      *
       01 W-K-C-6         PIC S9(8)      COMP VALUE 6.
       01 W-K-C-10        PIC S9(8)      COMP VALUE 10.
      *
       01 W-K-N-6         PIC S9(8)V9(8) COMP VALUE 6.
       01 W-K-N-10        PIC S9(8)V9(8) COMP VALUE 10.
      *
       01 W-V-EXP         PIC S9         COMP VALUE 2.
       01 W-V-AMT         PIC S9(18)     COMP-3.
      *
       PROCEDURE DIVISION.
      *
       S0000-START-PROCESSING SECTION.
      *
           MOVE 44880 TO W-V-AMT
           COMPUTE W-V-AMT ROUNDED =
           W-V-AMT  *
           W-K-N-10 ** (W-V-EXP - W-K-N-6)
           END-COMPUTE
           DISPLAY 'W-V-AMT=' W-V-AMT
      *
           MOVE 44880 TO W-V-AMT
           COMPUTE W-V-AMT ROUNDED =
           W-V-AMT  *
           W-K-C-10 ** (W-V-EXP - W-K-C-6)
           END-COMPUTE
           DISPLAY 'W-V-AMT=' W-V-AMT
           GOBACK.
])

AT_CHECK([${COMPILE} -w -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0],
[W-V-AMT=+000000000000000004
W-V-AMT=+000000000000000000
])
AT_CHECK([${COMPILE} -w -O -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0],
[W-V-AMT=+000000000000000004
W-V-AMT=+000000000000000000
])

AT_CLEANUP

AT_SETUP([FLOAT III.2])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .
       PROGRAM-ID .   ProgOpt .
       ENVIRONMENT    DIVISION .
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 W-ZROUNDED.
          05 NUMERIC-FIELD  PIC 999.
          05 NUMERIC-FIELD-2  PIC 999V99.
          05 FLOATING-FIELD  COMP-1.
       PROCEDURE DIVISION.
           DISPLAY "COMPUTE NUMERIC-FIELD = 7.7 + 1" .
           COMPUTE NUMERIC-FIELD = 7.7 + 1 .
           DISPLAY " NUMERIC-FIELD  = " NUMERIC-FIELD.  
           DISPLAY "COMPUTE NUMERIC-FIELD FLOATING-FIELD = 7.7 + 1" .
           COMPUTE NUMERIC-FIELD FLOATING-FIELD = 7.7 + 1 .
           DISPLAY " FLOATING-FIELD = " FLOATING-FIELD.  
           DISPLAY " NUMERIC-FIELD  = " NUMERIC-FIELD.  
           MOVE FLOATING-FIELD TO NUMERIC-FIELD.
           DISPLAY "MOVE FLOATING-FIELD TO NUMERIC-FIELD".
           DISPLAY " NUMERIC-FIELD = " NUMERIC-FIELD.
           DISPLAY 
           "COMPUTE NUMERIC-FIELD = 1 + (5 / 2) * 2".
           COMPUTE NUMERIC-FIELD = 1 + (5 / 2) * 2 .
           DISPLAY " NUMERIC-FIELD   = " NUMERIC-FIELD.
           DISPLAY
           "COMPUTE NUMERIC-FIELD-2 NUMERIC-FIELD = 1 + (5 / 2) * 2".
           COMPUTE NUMERIC-FIELD-2 NUMERIC-FIELD = 1 + (5 / 2) * 2 .
           DISPLAY " NUMERIC-FIELD   = " NUMERIC-FIELD.
           DISPLAY " NUMERIC-FIELD-2 = " NUMERIC-FIELD-2.
           STOP RUN RETURNING 0.
])
AT_CHECK([${COMPILE} -w -fcompute-ibm -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[COMPUTE NUMERIC-FIELD = 7.7 + 1
 NUMERIC-FIELD  = 008
COMPUTE NUMERIC-FIELD FLOATING-FIELD = 7.7 + 1
 FLOATING-FIELD = 8.699999809265136719
 NUMERIC-FIELD  = 009
MOVE FLOATING-FIELD TO NUMERIC-FIELD
 NUMERIC-FIELD = 009
COMPUTE NUMERIC-FIELD = 1 + (5 / 2) * 2
 NUMERIC-FIELD   = 005
COMPUTE NUMERIC-FIELD-2 NUMERIC-FIELD = 1 + (5 / 2) * 2
 NUMERIC-FIELD   = 006
 NUMERIC-FIELD-2 = 006.00
])

AT_CHECK([${COMPILE} -w -fcompute-ibm -fround-fp -O prog.cob])
AT_CHECK([./prog], [0],
[COMPUTE NUMERIC-FIELD = 7.7 + 1
 NUMERIC-FIELD  = 008
COMPUTE NUMERIC-FIELD FLOATING-FIELD = 7.7 + 1
 FLOATING-FIELD = 8.699999809265136719
 NUMERIC-FIELD  = 009
MOVE FLOATING-FIELD TO NUMERIC-FIELD
 NUMERIC-FIELD = 009
COMPUTE NUMERIC-FIELD = 1 + (5 / 2) * 2
 NUMERIC-FIELD   = 005
COMPUTE NUMERIC-FIELD-2 NUMERIC-FIELD = 1 + (5 / 2) * 2
 NUMERIC-FIELD   = 006
 NUMERIC-FIELD-2 = 006.00
])

AT_CLEANUP

AT_SETUP([FLOAT III.3])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                       
       PROGRAM-ID. prog.
                                                                      
       ENVIRONMENT DIVISION.                                          
                                                                      
       CONFIGURATION SECTION.                                         
       SPECIAL-NAMES.                                                 
           DECIMAL-POINT IS COMMA.                                    
                                                                      
       DATA DIVISION.
       WORKING-STORAGE SECTION.  
       01 RISERVA-PURA-TEMP      PIC 9(12)V9(3).
       01 RISERVA-SPESE-TEMP     PIC 9(12)V9(3).
       01 TASSO-RENDIM-INT-RIS   PIC 9(3)V9(6).
       01 MESE-INV               PIC 9(2).
       01 RISERVA-TECNICA-GAR    PIC S9(12)V9(3).
       PROCEDURE DIVISION.   
              MOVE 1341,733 TO RISERVA-PURA-TEMP
              MOVE 24,471 TO RISERVA-SPESE-TEMP
              MOVE 0,02576 TO TASSO-RENDIM-INT-RIS
              MOVE 8 TO MESE-INV
 
              COMPUTE RISERVA-TECNICA-GAR = 
                  (RISERVA-PURA-TEMP + RISERVA-SPESE-TEMP)
                / ((1 + TASSO-RENDIM-INT-RIS) ** (MESE-INV / 12))
              DISPLAY RISERVA-TECNICA-GAR
              DISPLAY '>>EXPECTED 1343,234'	   
         .                                                         
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[+000000001343,234
>>EXPECTED 1343,234
])

AT_CHECK([${COMPILE} -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0],
[+000000001343,234
>>EXPECTED 1343,234
])

AT_CHECK([${COMPILE} -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[+000000001343,234
>>EXPECTED 1343,234
])

AT_CLEANUP

AT_SETUP([FLOAT IV])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                       
           PROGRAM-ID. test_string.
                                                                      
       ENVIRONMENT DIVISION.                                          
                                                                      
       CONFIGURATION SECTION.                                         
       SPECIAL-NAMES.                                                 
           DECIMAL-POINT IS COMMA.                                    
                                                                      
       INPUT-OUTPUT SECTION.                                          
       DATA DIVISION.                                                   
       WORKING-STORAGE SECTION.  
       01 UGR-RISULTATO COMP-2.
       01 RM-NOM-INTERP          PIC 9(3)V9(6).
       PROCEDURE DIVISION.                                              
           MOVE 0,003640975000000000 TO UGR-RISULTATO
           DISPLAY 'UGR-RISULTATO ' UGR-RISULTATO
           MOVE UGR-RISULTATO TO RM-NOM-INTERP
           DISPLAY 'RM-NOM-INTERP ' RM-NOM-INTERP

           MOVE 0,003641875000000000 TO UGR-RISULTATO
           DISPLAY 'UGR-RISULTATO ' UGR-RISULTATO
           MOVE UGR-RISULTATO TO RM-NOM-INTERP
           DISPLAY 'RM-NOM-INTERP ' RM-NOM-INTERP

           MOVE 0,003640475000000000 TO UGR-RISULTATO
           DISPLAY 'UGR-RISULTATO ' UGR-RISULTATO
           MOVE UGR-RISULTATO TO RM-NOM-INTERP
           DISPLAY 'RM-NOM-INTERP ' RM-NOM-INTERP
                                                    
           STOP RUN.                                                    
])

AT_CHECK([${COMPILE} -w -O0 -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[UGR-RISULTATO 0.003640975000000000
RM-NOM-INTERP 000,003641
UGR-RISULTATO 0.003641875000000000
RM-NOM-INTERP 000,003642
UGR-RISULTATO 0.003640475000000000
RM-NOM-INTERP 000,003640
])

AT_CHECK([${COMPILE} -w -O -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[UGR-RISULTATO 0.003640975000000000
RM-NOM-INTERP 000,003641
UGR-RISULTATO 0.003641875000000000
RM-NOM-INTERP 000,003642
UGR-RISULTATO 0.003640475000000000
RM-NOM-INTERP 000,003640
])

AT_CLEANUP
AT_SETUP([Hexadecimal literal])

AT_DATA([dump.c], [
#include <stdio.h>
int dump (unsigned char *data);
int dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 4; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

AT_CHECK([${COMPILE_MODULE} dump.c])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
      $IF EBCDIC-CHARSET
           DISPLAY X"F1F2F3"
      $ELSE
           DISPLAY X"313233"
      $END
           END-DISPLAY.
           CALL "dump" USING X"000102"
           END-CALL.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[123
00010200
])

AT_CLEANUP

AT_SETUP([ZeroString literal])

AT_DATA([dump.c], [
#include <stdio.h>
int dump (unsigned char *data);
int dump (unsigned char *data)
{
  int i;
  printf ("%d:%s:\n", strlen(data),data);
  return 0;
}
])

AT_CHECK([${COMPILE_MODULE} dump.c])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XXX.
         02 X-ABC         PIC X(20)   VALUE "ZZZZZZZZZZZ".
	 02 CC            PIC 99  COMP VALUE 0.
       01 Z-ABC         PIC X(20)   VALUE Z"ZZZZZZZZZZZ".
       PROCEDURE        DIVISION.
       CALL "dump" USING X-ABC.
       MOVE Z"CCCC" TO X-ABC.
       CALL "dump" USING X-ABC.
       CALL "dump" USING Z-ABC.
       STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[20:ZZZZZZZZZZZ         :
4:CCCC:
11:ZZZZZZZZZZZ:
])

AT_CLEANUP

AT_SETUP([DISPLAY data items with VALUE clause])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-ABC         PIC XXX   VALUE "abc".
       01 X-123         PIC 999   VALUE  123.
       01 X-P123        PIC S999  VALUE +123.
       01 X-N123        PIC S999  VALUE -123.
       01 X-12-3        PIC 99V9  VALUE  12.3.
       01 X-P12-3       PIC S99V9 VALUE +12.3.
       01 X-N12-3       PIC S99V9 VALUE -12.3.
       PROCEDURE        DIVISION.
           DISPLAY X-ABC
           END-DISPLAY.
           DISPLAY X-123
           END-DISPLAY.
           DISPLAY X-P123
           END-DISPLAY.
           DISPLAY X-N123
           END-DISPLAY.
           DISPLAY X-12-3
           END-DISPLAY.
           DISPLAY X-P12-3
           END-DISPLAY.
           DISPLAY X-N12-3
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
])

AT_CLEANUP

AT_SETUP([DISPLAY data items with MOVE statement])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-ABC         PIC XXX   VALUE "abc".
       01 X-123         PIC 999   VALUE  123.
       01 X-P123        PIC S999  VALUE +123.
       01 X-N123        PIC S999  VALUE -123.
       01 X-12-3        PIC 99V9  VALUE  12.3.
       01 X-P12-3       PIC S99V9 VALUE +12.3.
       01 X-N12-3       PIC S99V9 VALUE -12.3.
       PROCEDURE        DIVISION.
           MOVE "abc" TO X-ABC.    DISPLAY X-ABC
           END-DISPLAY.
           MOVE  123  TO X-123.    DISPLAY X-123
           END-DISPLAY.
           MOVE +123  TO X-P123.   DISPLAY X-P123
           END-DISPLAY.
           MOVE -123  TO X-N123.   DISPLAY X-N123
           END-DISPLAY.
           MOVE  12.3 TO X-12-3.   DISPLAY X-12-3
           END-DISPLAY.
           MOVE +12.3 TO X-P12-3.  DISPLAY X-P12-3
           END-DISPLAY.
           MOVE -12.3 TO X-N12-3.  DISPLAY X-N12-3
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[abc
123
+123
-123
12.3
+12.3
-12.3
])

AT_CLEANUP


AT_SETUP([GLOBAL at same level])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           CALL "prog2"
           END-CALL
           CALL "prog3"
           END-CALL
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog2.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog3.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            EXIT PROGRAM.
        END PROGRAM prog3.
       END PROGRAM prog.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[prog1
prog2
prog1
])

AT_CLEANUP


AT_SETUP([GLOBAL at lower level])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  X   PIC X(5) GLOBAL  VALUE "prog1".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           CALL "prog2"
           END-CALL
           CALL "prog3"
           END-CALL
           STOP RUN.
        IDENTIFICATION   DIVISION.
        PROGRAM-ID.      prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  X   PIC X(5) GLOBAL  VALUE "prog2".
        PROCEDURE        DIVISION.
            DISPLAY X
            END-DISPLAY.
            EXIT PROGRAM.
         IDENTIFICATION   DIVISION.
         PROGRAM-ID.      prog3.
         DATA DIVISION.
         WORKING-STORAGE SECTION.
         PROCEDURE        DIVISION.
             DISPLAY X
             END-DISPLAY.
             EXIT PROGRAM.
         END PROGRAM prog3.
        END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[prog1
prog2
prog2
])

AT_CLEANUP
AT_SETUP([EVALUATE])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       working-storage section.
       01  wsKeyVal        pic 9(02) value zero.
       01  wsKeyValz       pic 9(02).
      
       procedure division.
       000-main.
           move 18 to wsKeyVal
           perform evaluate-numeric-literal
           move 1 to wsKeyVal
           perform evaluate-numeric-literal
           move 21 to wsKeyVal
           perform evaluate-numeric-literal
           move 31 to wsKeyVal
           perform evaluate-numeric-literal
           stop run
           .
      *
       evaluate-numeric-literal.     
           evaluate wsKeyVal
               when zero 
                  display "0"
               when 1
                  display "1"
               when 2
                  display "2"
               when 3
                  display "3"
               when 4
                  display "4"
               when 5
                  display "5"
               when 6
                  display "6"
               when 7
                  display "7"
               when 8
                  display "8"
               when 9
                  display "9"
               when 10
                  display "10"
               when 11
                  display "11"
               when 12
                  display "12"
               when 13
                  display "13"
               when 14
                  display "14"
               when 15
                  display "15"
               when 16
                  display "16"
               when 17
                  display "17"
               when 18
                  display "18"
               when 19
                  display "19"
               when 20
                  display "20"            
               when > 30 
                  display "> 30"            
               when other
                  display "other"
           end-evaluate
           .
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[18
1
other
> 30
])

AT_CLEANUP

AT_SETUP([EVALUATE II])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       working-storage section.
       01  wsKeyVal        pic 9(02) value zero.
       01  wsKeyValz       pic 9(02).
      
       procedure division.
       000-main.
           move 0 to wsKeyVal
           perform evaluate-numeric-literal
           move 1 to wsKeyVal
           perform evaluate-numeric-literal
           move 10 to wsKeyVal
           perform evaluate-numeric-literal
           move 31 to wsKeyVal
           perform evaluate-numeric-literal
           stop run
           .
      *
       evaluate-numeric-literal.     
           evaluate wsKeyVal
               when zero 
                  display "0"
               when 1
               when 2
                  display "1or2"
               when 3
                  display "3"
               when 4
                  display "4"
               when 5
                  display "5"
               when 6
                  display "6"
               when 7
                  display "7"
               when 8
                  display "8"
               when 9
                  display "9"
               when 10
               when other
                  display "other"
           end-evaluate
           .
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[0
1or2
other
other
])

AT_CLEANUP

AT_SETUP([ZERO TO SEPARATE Sign])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 ZERO-FIL-POST.
         05 SIGN TRAILING SEPARATE.
           10 TAL PIC S9(9)V99.
       PROCEDURE DIVISION.
       MOVE ZERO TO TAL.
       DISPLAY ZERO-FIL-POST.
       MOVE 0 TO TAL.
       DISPLAY ZERO-FIL-POST.
       MOVE 4711 TO TAL.
       DISPLAY ZERO-FIL-POST.
       STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00000000000+
00000000000+
00000471100+
])

AT_CLEANUP

AT_SETUP([ZERO ebcdic negatif])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       
       01  Z1-MNTNUL     PIC X(1).      
       01  Z1-MNTNUL-S   REDEFINES Z1-MNTNUL   PIC S9(1).       

	   01  W1ZPACK1		 PIC S9(10)       COMP-3.
	   01  W1ZPACK2		 PIC S9(10)       COMP-3.

       01  Z2-MNTNUL     PIC X(1).      
       01  Z2-MNTNUL-S   REDEFINES Z2-MNTNUL   PIC S9(1).       
              
       PROCEDURE DIVISION.
 
           MOVE "}"  TO Z1-MNTNUL.
           MOVE Z1-MNTNUL-S TO W1ZPACK1. 
           MOVE W1ZPACK1 TO Z2-MNTNUL-S. 
           DISPLAY "<" Z1-MNTNUL ">" Z1-MNTNUL-S.                                       
           DISPLAY "<" Z2-MNTNUL ">" Z2-MNTNUL-S.                                       
           MOVE 0 TO W1ZPACK2.

           DISPLAY W1ZPACK1 .
           DISPLAY W1ZPACK2 .
           IF W1ZPACK1 NOT = W1ZPACK2 THEN
                DISPLAY "W1ZPACK2 != W1ZPACK1"
           END-IF.
           

           STOP RUN.
])

AT_CHECK([${COMPILE} -w -fsign-ebcdic prog.cob])
AT_CHECK([./prog], [0],
[<}>+0
<{>+0
+0000000000
+0000000000
])

AT_CLEANUP

AT_SETUP([Round FP at MOVE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 X1 COMP-2.
       01 X2 PIC Z,ZZZ,ZZZ.99.
       01 X3 PIC 9(018) COMP.
       01 A PIC Z(8)9 .
       01 B  PIC S999999999V COMP-3
       01 C  COMP-2.
       01 D  PIC 999 COMP-5.

       PROCEDURE DIVISION.
       MOVE 123.4599999999 TO X1.
       MOVE X1 TO X2.
       DISPLAY X2.
       MOVE 199.9999999999 TO X1.
       MOVE X1 TO X2.
       DISPLAY X2.
       MOVE 999.9999999999 TO X1.
       MOVE X1 TO X2.
       DISPLAY X2.
       MOVE 7.12345 TO X1.
       COMPUTE X3 = X1 + 1.
       display X3 .
           move 4062279 to A.
           DISPLAY A.
           MOVE A TO B.
           DISPLAY B.
           MOVE 1.5 TO C.
           DISPLAY C.
           MOVE C TO D.
           DISPLAY D. 


       STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[      123.45
      199.99
      999.99
000000000000000008
  4062279
+004062279
1.500000000000000000
001
])
AT_CHECK([${COMPILE} -w -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[      123.46
      200.00
    1,000.00
000000000000000008
  4062279
+004062279
1.500000000000000000
002
])

AT_CHECK([${COMPILE} -O2 -w prog.cob])
AT_CHECK([./prog], [0],
[      123.45
      199.99
      999.99
000000000000000008
  4062279
+004062279
1.500000000000000000
001
])
AT_CHECK([${COMPILE} -O2 -w -fround-fp prog.cob])
AT_CHECK([./prog], [0],
[      123.46
      200.00
    1,000.00
000000000000000008
  4062279
+004062279
1.500000000000000000
002
])

AT_CLEANUP

AT_SETUP([MOVE numeric to JUSTIFIED Field])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.   prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       WORKING-STORAGE SECTION.
       01  WPERS-VON.
           05 WPERS-VON-JJ-MM.
              10 WPERS-VON-JJ PIC 99 VALUE 10.
              10 WPERS-VON-MM PIC 99 VALUE 06.
           05 WPERS-VON-TAGE.
              10 WPERS-VON-TT PIC 99 VALUE 01.
       01 WPLONG PIC 9999999999 VALUE 123456789.
       01 WDBER-GRP.
          05 WDBER                 PIC X(010).
          05 D001 REDEFINES WDBER  PIC X(001) JUSTIFIED RIGHT.
          05 D002 REDEFINES WDBER  PIC X(002) JUSTIFIED RIGHT.
          05 D003 REDEFINES WDBER  PIC X(003) JUSTIFIED RIGHT.
          05 D004 REDEFINES WDBER  PIC X(004) JUSTIFIED RIGHT.
          05 D005 REDEFINES WDBER  PIC X(005) JUSTIFIED RIGHT.
          05 D006 REDEFINES WDBER  PIC X(006) JUSTIFIED RIGHT.
          05 D007 REDEFINES WDBER  PIC X(007) JUSTIFIED RIGHT.
          05 D008 REDEFINES WDBER  PIC X(008) JUSTIFIED RIGHT.
          05 D009 REDEFINES WDBER  PIC X(009) JUSTIFIED RIGHT.
          05 D010 REDEFINES WDBER  PIC X(010) JUSTIFIED RIGHT.
       PROCEDURE DIVISION.
       STEUER SECTION.
       STEUER-START.
           MOVE WPERS-VON-JJ                   TO D010                  
           MOVE '.'                            TO D008                  
           MOVE WPERS-VON-MM                   TO D007
           MOVE '.'                            TO D006                  
           MOVE WPERS-VON-TT                   TO D005                  
           DISPLAY WDBER
           MOVE WPLONG TO D005
           DISPLAY WDBER
           STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[   01.6.10
56789.6.10
])

AT_CLEANUP

AT_SETUP([ADD simple])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.prod.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
        DECIMAL-POINT IS COMMA.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01 A1 pic 9(6).
       01 A2 pic 9(6).
       PROCEDURE DIVISION.
        MOVE 540 TO A1.
        ADD A1 TO A2.
        DISPLAY A2.
        MOVE 870 TO A1.
        ADD A1 TO A2.
        DISPLAY A2.
        GOBACK.
])

AT_DATA([test.conf], [
include "mf.conf"
auto-initialize: yes
binary-byteorder: native
filename-mapping: no
external-mapping: yes
defaultbyte: 0
exit-program-forced: yes
perform-osvs: yes
full-cancel: yes
])

AT_CHECK([${COMPILE} -w prog.cob -conf=test.conf])
AT_CHECK([./prog], [0],
[000540
001410
])

AT_CLEANUP

AT_SETUP([initialize default byte])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT FTEST   ASSIGN TO EXTERNAL FTEST_FILLER
              ORGANIZATION SEQUENTIAL.
      
       DATA DIVISION.
       FILE SECTION.
      *
       FD FTEST.
        01  L1.
         02  FILLER                          PIC X(60).
       WORKING-STORAGE SECTION.
        01  L2.
          02  ENTETE                          PIC X.
          02  PR-NUMGRILLE  OCCURS 2 PIC 9(4) COMP-3.
          02  PR-NUMGRILLE  PIC 9(4) COMP-3.
          02  ENR-PARAM-2-DATEMAJ             PIC X(6) VALUE "PIC 99".
          02  ENR-PARAM-2-PAGE                PIC 99.
          02  ENR-PARAM-FILLER                PIC X(4) VALUE "ZZZ9".
          02  L1-PAGE                         PIC ZBZZ9B999.
          02  ENR-BINARY-LIBEL                PIC X(6) VALUE "BINARY".
          02  ENR-BINARY                      BINARY PIC S9(9).
          02  FILLER                          PIC X(11).
          02  ENR-FIN                         PIC X(3) VALUE "FIN".
      
       PROCEDURE DIVISION.
           OPEN OUTPUT FTEST.
           MOVE L2 TO L1.
           WRITE L1 .
           CLOSE FTEST.
           EXIT.
])

AT_DATA([test.conf], [
include "mf.conf"
relaxed-syntax-check: yes
external-mapping: yes
mf-compat-parser: yes
defaultbyte: 32
use-defaultbyte: yes
])

AT_CHECK([${COMPILE} -w prog.cob -conf=test.conf], [0])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_FILLER], [0], 
[0000000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   P   I   C  sp   9   9
0000020  sp  sp   Z   Z   Z   9  sp  sp  sp  sp  sp  sp  sp  sp  sp   B
0000040   I   N   A   R   Y  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000060  sp  sp  sp  sp   F   I   N  sp  sp  sp  sp  sp
0000074
])

AT_CHECK([${COMPILE} -w prog.cob -std=mf], [0])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FTEST_FILLER], [0], 
[0000000  sp nul nul  si nul nul  si nul nul  si   P   I   C  sp   9   9
0000020   0   0   Z   Z   Z   9  sp  sp  sp  sp   0  sp   0   0   0   B
0000040   I   N   A   R   Y nul nul nul nul  sp  sp  sp  sp  sp  sp  sp
0000060  sp  sp  sp  sp   F   I   N  sp  sp  sp  sp  sp
0000074
])

AT_CLEANUP

AT_SETUP([PICTURE &-z])

AT_DATA([prog.cob], [
       identification division.
       program-id. tzpic.
       environment division.
       configuration section.
       input-output section.
       file-control.   
       data division.
       file section.                        
       working-storage section.
       01  ws-num   pic  $z,zzz,zzz,zz9.99-.
       01  ws-num2  pic  $$,$$$,$$$,$$9.99-.
       01  ws-num4  pic -$$,$$$,$$$,$$9.99.
       01  ws-num5  pic $--,---,---,--9.99.
       01  ws-num6  pic -$z,zzz,zzz,zz9.99.
       01  ws-num7  pic $-z,zzz,zzz,zz9.99.
       procedure division. 
       000-main.
           move -12356 to ws-num
                          ws-num2
                          ws-num4
                          ws-num5
                          ws-num6
                          ws-num7
           display "'" ws-num "'" 
           display "'" ws-num2 "'"
           display "'" ws-num4 "'"
           display "'" ws-num5 "'"
           display "'" ws-num6 "'"
           display "'" ws-num7 "'"
           move 12356 to ws-num
                          ws-num2
                          ws-num4
                          ws-num5
                          ws-num6
                          ws-num7
           display "'" ws-num "'"
           display "'" ws-num2 "'"
           display "'" ws-num4 "'"
           display "'" ws-num5 "'"
           display "'" ws-num6 "'"
           display "'" ws-num7 "'"
           stop run
           .     
])

AT_CHECK([${COMPILE} -w prog.cob -std=mf], [0])
AT_CHECK([./prog], [0], 
['$       12,356.00-'
'       $12,356.00-'
'       -$12,356.00'
'       $-12,356.00'
'-$       12,356.00'
'$-       12,356.00'
'$       12,356.00 '
'       $12,356.00 '
'        $12,356.00'
'       $ 12,356.00'
' $       12,356.00'
'$        12,356.00'
])

AT_CLEANUP

AT_SETUP([PICTURE $$$])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 TST.
        05 DEPT-SUB PIC 9(6)V999 VALUE 18536.232.
        05 DEPT-COST-YTD PIC 9(6)V999 VALUE 18536.232.
        05 DL-PROD-COST PIC $$$,$$9.99.
        77 WFLT PIC $$$,$$9.99.

        PROCEDURE DIVISION.
        MOVE 18536.23 TO WFLT.
        DISPLAY "'" WFLT "'".
        move DEPT-COST-YTD to DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 1 GIVING DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 9 GIVING DL-PROD-COST ROUNDED.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 1 GIVING DEPT-SUB ROUNDED.
        MOVE DEPT-SUB TO DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        MOVE 8536.3 TO WFLT.
        DISPLAY "'" WFLT "'".
        move WFLT to DEPT-COST-YTD.
        move DEPT-COST-YTD to DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 1 GIVING DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 2 GIVING DL-PROD-COST ROUNDED.
        DISPLAY "'" DL-PROD-COST "'".
        MULTIPLY DEPT-COST-YTD BY 1 GIVING DEPT-SUB ROUNDED.
        MOVE DEPT-SUB TO DL-PROD-COST.
        DISPLAY "'" DL-PROD-COST "'".
        STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob -std=mf], [0])
AT_CHECK([./prog], [0], 
['$18,536.23'
'$18,536.23'
'$18,536.23'
'$66,826.09'
'$18,536.23'
' $8,536.30'
' $8,536.30'
' $8,536.30'
'$17,072.60'
' $8,536.30'
])

AT_CLEANUP

AT_SETUP([COMP-3 Limits])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                                 
       PROGRAM-ID. prog.                                                      
       ENVIRONMENT DIVISION.                                                    
       CONFIGURATION SECTION.                                                   
       SPECIAL-NAMES.                                                           
       INPUT-OUTPUT SECTION.                                                    
       DATA DIVISION.                                                           
       FILE SECTION.                                                            
       WORKING-STORAGE SECTION.                                                 
           01 TESTS-ZONES.                                                      
              10 NUM18A   PIC S9(18) COMP-3 VALUE +18.          
              10 NUM18B   PIC S9(18) COMP-3 VALUE 999999999999999999.          
              10 NUM18C   PIC S9(18) COMP-3 VALUE +0.                           
       PROCEDURE DIVISION.                                                      
       DEBUT-PGM               SECTION.                                         
           DISPLAY NUM18A 
           DISPLAY NUM18B.                                      
           ADD NUM18A TO NUM18B.                                  
           DISPLAY NUM18B.               
])

AT_CHECK([${COMPILE} -w prog.cob -std=mf], [0])
AT_CHECK([./prog], [0], 
[000000000000000018+
999999999999999999+
000000000000000017+
])

AT_CLEANUP


AT_SETUP([COMPUTE INTEGER-PART])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROVAARR.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-3090.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01  RISUL PIC S9(13)V9(5).
       01  IMPORTO PIC S9(13)V9(5) value +6,70500.
       01  NDCLI-DVSA PIC S9(5)V COMP-3 value 2.
       01  IMP-ASS PIC 9(13)V9(5) value 6,70500.
       01  CONTA PIC S9(4) COMP-5 value 6.  
       
       Procedure Division.
       MAIN. 
   
       PERFORM UNTIL CONTA = 7 
         
         COMPUTE RISUL =                                          
         FUNCTION INTEGER-PART((IMPORTO + (5 / 
         (10 ** (NDCLI-DVSA + 1))) 
         * (IMPORTO / IMP-ASS)) * (10 ** NDCLI-DVSA)) / 
         (10 ** NDCLI-DVSA)   
          display RISUL       
         ADD 1 TO CONTA
         ADD 1 TO IMPORTO
         ADD 1 TO IMP-ASS
       END-PERFORM.   

       MOVE +6,60500 TO IMPORTO 
       MOVE 6,60500 TO IMP-ASS
       MOVE 6 to CONTA

       PERFORM UNTIL CONTA = 7 
         
         COMPUTE RISUL =                                          
         FUNCTION INTEGER-PART((IMPORTO + (5 / 
         (10 ** (NDCLI-DVSA + 1))) 
         * (IMPORTO / IMP-ASS)) * (10 ** NDCLI-DVSA)) / 
         (10 ** NDCLI-DVSA)   
          display RISUL       
         ADD 1 TO CONTA
         ADD 1 TO IMPORTO
         ADD 1 TO IMP-ASS
       END-PERFORM.   
       
       GOBACK.        
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[+0000000000006,71000
+0000000000006,61000
])

AT_CLEANUP


AT_SETUP([COPY REPLACE EXPONENTIATION])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TESTSTAR.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      *--------------  DECLARATION DES FICHIERS ----------------------*
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      *--------------  DESCRIPTION DES FICHIERS ----------------------*
       DATA DIVISION.
       FILE SECTION.
      *--------------  DESCRIPTION DES ZONES -------------------------*
       WORKING-STORAGE SECTION.
       01 PARAM PIC 9(5).
       01 W-NOMBRE PIC 9(5).
       PROCEDURE DIVISION.
       DEB-PGM.
          
       COPY STAR REPLACING
            DDDDD BY 00
            XXX   BY  PARAM.

       FIN-PGM.
       GOBACK.
      *===============================================================*
])
AT_DATA([STAR.cpy], [
       COMPUTE XXX = W-NOMBRE / 10 ** DDDDD.
])
AT_CHECK([${COMPILE} -o prog prog.cob], [0], 
[])

AT_CLEANUP


AT_SETUP([COMPUTE ROUNDED])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. kk.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 W-DTO-NORMAL PIC S9(12)V9(06) COMP-3 VALUE 0.
       01 IMP-DTOL PIC --.---,---.
       01 IMP-DTOL2 PIC --.--9,999.
      *********************************************************
       PROCEDURE DIVISION.
      *********************************************************
       MOVE 3,415897 TO W-DTO-NORMAL.

       COMPUTE IMP-DTOL  = W-DTO-NORMAL .
       COMPUTE IMP-DTOL2 ROUNDED  = W-DTO-NORMAL .
       DISPLAY IMP-DTOL.
       DISPLAY IMP-DTOL2.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[     3,415
     3,416
])

AT_CLEANUP

AT_SETUP([COMPUTE Scale])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PUTCOMP.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.             DECIMAL-POINT IS COMMA .
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01  CAMPI.
           03 W9DI6                       PIC 9(6).
           03 W9DI6V99                    PIC 9(6)V99.
           03 E9DI6V99                    PIC 9(6),99.
           03 W9DI6V9DI6                  PIC 9(6)V9(6).
           03 E9DI6V9DI6                  PIC 9(6),9(6).

           03 WW9DI6                      PIC 9(6).
           03 WW9DI6V99                   PIC 9(6)V99.
           03 WW9DI6V9DI6                 PIC 9(6)V9(6).
           03 WS-NUM-DIP-PRES             PIC 9(05) VALUE ZERO.
           03 WS-NUM-DIP-ASS              PIC 9(05) VALUE ZERO.
           03 WS-RAPPORTO1                PIC 9(04)V99.
           03 RPAS10-T1-PERC-PRES         PIC Z(03)9,99.

       PROCEDURE DIVISION.
       INIZIO.
           COMPUTE WW9DI6     = 1
           COMPUTE W9DI6      = ((WW9DI6 / 4) + 1)
           DISPLAY W9DI6.
      *
           COMPUTE WW9DI6     = 1
           COMPUTE W9DI6      = ((WW9DI6 / 4) + 1,99)
           DISPLAY W9DI6.
      *
           COMPUTE WW9DI6     = 1
           COMPUTE W9DI6      = ((WW9DI6 / 4) + 0,99)
           DISPLAY W9DI6.
      *
           COMPUTE WW9DI6     = 1
           COMPUTE W9DI6V99   = 0,99
           COMPUTE W9DI6      = ((WW9DI6 / 4) + W9DI6V99)
           DISPLAY W9DI6.
      *
           COMPUTE W9DI6V99   = ((WW9DI6 / 4) + 0,99)
           MOVE    W9DI6V99   TO E9DI6V99
           DISPLAY E9DI6V99.
      *
           MOVE    W9DI6V99   TO W9DI6
           DISPLAY W9DI6.
      *
           COMPUTE WW9DI6V99 = 0,01
           COMPUTE W9DI6V99   = (WW9DI6V99 / 3) + 0,0099
           MOVE    W9DI6V99   TO E9DI6V99
           DISPLAY E9DI6V99.
      *
           COMPUTE W9DI6V9DI6   = (WW9DI6V99 / 3) + 0,0099
           MOVE    W9DI6V9DI6 TO E9DI6V9DI6
           DISPLAY E9DI6V9DI6.
      *
           MOVE    W9DI6V9DI6 TO W9DI6V99
           MOVE    W9DI6V99   TO E9DI6V99
           DISPLAY E9DI6V99.
      *
           MOVE     2                      TO WS-NUM-DIP-PRES
           MOVE     1                      TO WS-NUM-DIP-ASS
           COMPUTE  WS-RAPPORTO1  ROUNDED   =
                   (WS-NUM-DIP-PRES  /
                   (WS-NUM-DIP-PRES  +  WS-NUM-DIP-ASS))  *  100.
           DISPLAY WS-RAPPORTO1
           COMPUTE  WS-RAPPORTO1            =
                   (WS-NUM-DIP-PRES  /
                   (WS-NUM-DIP-PRES  +  WS-NUM-DIP-ASS))  *  100.
           DISPLAY WS-RAPPORTO1

           STOP RUN.
])

AT_CHECK([${COMPILE} -w -o prog prog.cob])
AT_CHECK([./prog], [0], 
[000001
000002
000001
000001
000001,24
000001
000000,01
000000,013233
000000,01
0066,67
0066,66
])

AT_CHECK([${COMPILE} -w -O -o prog prog.cob])
AT_CHECK([./prog], [0], 
[000001
000002
000001
000001
000001,24
000001
000000,01
000000,013233
000000,01
0066,67
0066,66
])

AT_CLEANUP

AT_SETUP([IBM COMPUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION. 
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION. 
       CONFIGURATION SECTION. 
       SPECIAL-NAMES. 
           DECIMAL-POINT IS COMMA. 
       INPUT-OUTPUT SECTION. 
       FILE-CONTROL. 
       
       DATA DIVISION. 
       WORKING-STORAGE SECTION. 
       01  A                  PIC S9(13)V9(5).   
       01  B                  PIC S9(13)V9(5) VALUE 32,96.  
       01  C                  PIC S9(13)V9(5) VALUE 74.
       01  D                  PIC S9(13)V9(5) VALUE 360.      
       PROCEDURE DIVISION. 
       MAIN.            
           COMPUTE   A  = B * (C/D).
           DISPLAY 'A ='A.
           COMPUTE   A ROUNDED  = B * (C/D).
           DISPLAY 'A ROUNDED ='A.
           GOBACK.
])

AT_CHECK([${COMPILE} -w -fno-compute-ibm prog.cob])
AT_CHECK([./prog], [0], 
[A =+0000000000006,77511
A ROUNDED =+0000000000006,77511
])
AT_CHECK([${COMPILE} -w -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0], 
[A =+0000000000006,77492
A ROUNDED =+0000000000006,77509
])

AT_CLEANUP

AT_SETUP([COMPUTE ROUNDED Fast op])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .
       PROGRAM-ID .   R20D23 .
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01  K PIC 9(3)V99.
       01  L PIC 9(3)V99.
       01  M PIC 9(3)V99.
	   
       01  LVARIAB5 PIC 9(3)V99.


       PROCEDURE DIVISION. 
       PRINCIPALE SECTION.       
       C0.
           MOVE 1 TO K L M.
		   COMPUTE LVARIAB5 =L/M/100.
		   COMPUTE K ROUNDED = K + LVARIAB5.
		   DISPLAY  K.
	   C1.
           MOVE 1 TO K L M.
		   COMPUTE K ROUNDED = K + (L/M/100).
		   DISPLAY K.
       C99.                               
           EXIT PROGRAM.  
])

AT_CHECK([${COMPILE} -w -fno-compute-ibm prog.cob])
AT_CHECK([./prog], [0], 
[001.01
001.01
])
AT_CHECK([${COMPILE} -w -fno-compute-ibm -ffast-op prog.cob])
AT_CHECK([./prog], [0], 
[001.01
001.01
])

AT_CHECK([${COMPILE} -w -fcompute-ibm prog.cob])
AT_CHECK([./prog], [0], 
[001.01
001.01
])
AT_CHECK([${COMPILE} -w -fcompute-ibm -ffast-op prog.cob])
AT_CHECK([./prog], [0], 
[001.01
001.01
])

AT_CLEANUP


AT_SETUP([COMPUTE ROUNDED WITH NEGATIVE SIGN])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
       SPECIAL-NAMES.
            DECIMAL-POINT is comma.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 level-01.
           05  ws-rs-rohproz1x.
               10  ws-rs-rohproz1           pic zz9,9- blank zero.
       01 level-01-wrk.
                   15  wrk2-rohproza-1      pic S9(3)V9   COMP-3.
       PROCEDURE DIVISION.
       MOVE 226,5 TO wrk2-rohproza-1
       COMPUTE ws-rs-rohproz1 ROUNDED = wrk2-rohproza-1
       ON SIZE ERROR
          MOVE ALL "*"               TO ws-rs-rohproz1x
       END-COMPUTE.
       IF ws-rs-rohproz1 = "226,5 "
            DISPLAY "OK"
       END-IF.
       STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([LINSEQ_READ read record max])

AT_DATA([exp.in], [
1 07895abcdefghijklmnopqrstuv123456789  201412092992
7 00392619808abcdefghijklmnopqrstuvw123    20140218C000193013000000000
7 00454726420abcdefghijklmnopqrstuvw123    20141125D000000000000000105
9 0000006000000000105
])

AT_DATA([prog.cob], [
      ****************************************************************** 
       IDENTIFICATION                                       DIVISION.
       
       PROGRAM-ID.                                     "arcltest".       
      *
      ******************************************************************    
       ENVIRONMENT                                           DIVISION.   
      ****************************************************************** 
      *=================================================================
       INPUT-OUTPUT                                           SECTION.
      *=================================================================
      
       FILE-CONTROL.
      *-------------
                      
                      
              SELECT I-AGNCY-FILE
              FILE STATUS  IS CTB-IO-STATUS
              ORGANIZATION IS LINE SEQUENTIAL
              ACCESS MODE  IS SEQUENTIAL
              ASSIGN       TO "exp.in".

              SELECT IO-AGNCY-FILE
              ASSIGN            TO     "exp.out"
              ORGANIZATION      IS     LINE  SEQUENTIAL
              ACCESS MODE       IS      SEQUENTIAL
              FILE STATUS       IS      CTB-IO-STATUS.

              SELECT  O-AGNCY-FILE
              ASSIGN            TO     "expo.out"
              ORGANIZATION      IS     LINE  SEQUENTIAL
              ACCESS MODE       IS      SEQUENTIAL
              FILE STATUS       IS      CTB-IO-STATUS.

      *
                   
      ******************************************************************
       DATA                                                   DIVISION.
      ******************************************************************
      
      *=================================================================
       FILE                                                    SECTION.
      *=================================================================
                 
       FD I-AGNCY-FILE.            


       01 I-AGNCY-DETAIL-REC.         
**********          COPY "claginpintdt.lib".
        03 RECORD-TYPE PIC X(2).
        03 BAN PIC 9(9).
        03 AGNCY-CHG-CD PIC 9(2).
        03 DESCRIPTION PIC X(30).
        03 ACTV-DATE PIC X(8).
        03 ACTV-CD PIC X(1).
        03 TOT-EXPNSE-AMT PIC 9(7)V9(2).
        03 INTREST-AMT PIC 9(7)V9(2).
        03 FEATURE-CODE PIC X(6).
        03 DISCOUNT-IND PIC X(1).
        88 NO-INDICATOR VALUE IS "N".
        88 YES-INDICATOR VALUE IS "Y".
        88 INTEREST-CREDIT VALUE is "R".
        88 VALID-VALUES
        VALUE IS "N"
        ,"Y"
        ,"R".



       01 I-AGNCY-HEADER-REC.         
********          COPY "claginpinthd.lib".
        03 RECORD-TYPE PIC X(2).
        03 AGENCY-CODE PIC X(8).
        03 AGENCY-NAME PIC X(30).
        03 FILE-DATE PIC X(8).
        03 FILE-SEQ-NO PIC 9(4).


       01 I-AGNCY-TRAILER-REC.        
*********          COPY "claginpinttr.lib".
        03 RECORD-TYPE PIC X(2). 
        03 ROWS-NUMBER PIC 9(7).
        03 TOTAL-AMOUNT PIC 9(10)V9(2).

  
       FD IO-AGNCY-FILE.            

       01 IO-AGNCY-DETAIL-REC.    
**********          COPY "claginpintdt.lib".
        03 RECORD-TYPE PIC X(2).
        03 BAN PIC 9(9).
        03 AGNCY-CHG-CD PIC 9(2).
        03 DESCRIPTION PIC X(30).
        03 ACTV-DATE PIC X(8).
        03 ACTV-CD PIC X(1).
        03 TOT-EXPNSE-AMT PIC 9(7)V9(2).
        03 INTREST-AMT PIC 9(7)V9(2).
        03 FEATURE-CODE PIC X(6).
        03 DISCOUNT-IND PIC X(1).
        88 NO-INDICATOR VALUE IS "N".
        88 YES-INDICATOR VALUE IS "Y".
        88 INTEREST-CREDIT VALUE is "R".
        88 VALID-VALUES
        VALUE IS "N"
        ,"Y"
        ,"R".



       01 IO-AGNCY-HEADER-REC.
************          COPY "claginpinthd.lib".
        03 RECORD-TYPE PIC X(2).
        03 AGENCY-CODE PIC X(8).
        03 AGENCY-NAME PIC X(30).
        03 FILE-DATE PIC X(8).
        03 FILE-SEQ-NO PIC 9(4).



       01 IO-AGNCY-TRAILER-REC.
************          COPY "claginpinttr.lib".
          03 RECORD-TYPE PIC X(2).
        03 ROWS-NUMBER PIC 9(7).
        03 TOTAL-AMOUNT PIC 9(10)V9(2).


       FD  O-AGNCY-FILE.

       01  O-AGNCY-DETAIL-REC.
**********          COPY "claginpintdt.lib".
        03 RECORD-TYPE PIC X(2).
        03 BAN PIC 9(9).
        03 AGNCY-CHG-CD PIC 9(2).
        03 DESCRIPTION PIC X(30).
        03 ACTV-DATE PIC X(8).
        03 ACTV-CD PIC X(1).
        03 TOT-EXPNSE-AMT PIC 9(7)V9(2).
        03 INTREST-AMT PIC 9(7)V9(2).
        03 FEATURE-CODE PIC X(6).
        03 DISCOUNT-IND PIC X(1).
        88 NO-INDICATOR VALUE IS "N".
        88 YES-INDICATOR VALUE IS "Y".
        88 INTEREST-CREDIT VALUE is "R".
        88 VALID-VALUES
        VALUE IS "N"
        ,"Y"
        ,"R".

       01  O-AGNCY-HEADER-REC.
************          COPY "claginpinthd.lib".
        03 RECORD-TYPE PIC X(2).
        03 AGENCY-CODE PIC X(8).
        03 AGENCY-NAME PIC X(30).
        03 FILE-DATE PIC X(8).
        03 FILE-SEQ-NO PIC 9(4).



       01  O-AGNCY-TRAILER-REC.
************          COPY "claginpinttr.lib".
          03 RECORD-TYPE PIC X(2).
        03 ROWS-NUMBER PIC 9(7).
        03 TOTAL-AMOUNT PIC 9(10)V9(2).


      *=================================================================
        WORKING-STORAGE                                         SECTION.
      *=================================================================

       01 CTB-IO-STATUS PIC X(2).

      *-----------------------------------------------------------------
      * SWITCHES
      *-----------------------------------------------------------------

       01 SW03-IS-EOF             PIC 9  VALUE 0.
          88 SW03-NOT-EOF                VALUE 0.
          88 SW03-END-OF-I-FILE          VALUE 1.

       01 SW03-IO-IS-EOF          PIC 9  VALUE 0.
          88 SW03-IO-NOT-EOF             VALUE 0.
          88 SW03-END-OF-IO-FILE         VALUE 1.
   
      *
      **************************************************************
       PROCEDURE                                           DIVISION.
      **************************************************************

      
      *^^^^^^^^^^^^^TB-MSG-IO-ERROR
       DECLARATIVES.
      *^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      
      *=================================================================
       D1-HANDLE-INPUT-FILE                                     SECTION.
      *=================================================================
         USE AFTER STANDARD ERROR PROCEDURE ON I-AGNCY-FILE.
         
       D1-00.
       

           
       D1-EXIT.
            EXIT.

      *==================================================================
       D2-HANDLE-INPUT-OUTPUT-FILE                             SECTION. 
      *==================================================================
         USE AFTER STANDARD ERROR PROCEDURE ON  IO-AGNCY-FILE.

       D2-00.


       D2-EXIT.
             EXIT.
              
      *==================================================================
       D3-HANDLE-INPUT-OUTPUT-FILE                             SECTION.
      *==================================================================
         USE AFTER STANDARD ERROR PROCEDURE ON  O-AGNCY-FILE.

       D2-00.



       D2-EXIT.
             EXIT.

      *^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       END DECLARATIVES.
      *^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      *
      *=================================================================
       A-MAIN                                                SECTION.
      *=================================================================
       A-00.

******* Join part.
           OPEN INPUT I-AGNCY-FILE.
      
           OPEN OUTPUT IO-AGNCY-FILE. 

           PERFORM UNTIL (SW03-END-OF-I-FILE)

               PERFORM     B1-HANDLE-FIRST 
 
           END-PERFORM.          

           CLOSE I-AGNCY-FILE.
           CLOSE IO-AGNCY-FILE.

******* Inp part

           OPEN INPUT IO-AGNCY-FILE.
           OPEN OUTPUT O-AGNCY-FILE.
            
           PERFORM UNTIL   (SW03-END-OF-IO-FILE)


               PERFORM     E-READ-NEXT-ACCUM

           END-PERFORM.                   

           CLOSE IO-AGNCY-FILE.
           CLOSE  O-AGNCY-FILE. 
           STOP RUN. 

       A-EXIT. 
             EXIT.
             

      *
      *=================================================================
       B1-HANDLE-FIRST                                          SECTION.
      *=================================================================
      * Purpose : Read first (Header) record in the input file .
      *           and move the header to output record.        
      *-----------------------------------------------------------------
       B1-00.

           READ I-AGNCY-FILE  NEXT RECORD

           AT END

               SET SW03-END-OF-I-FILE         TO TRUE

           END-READ.

            EVALUATE TRUE
            WHEN RECORD-TYPE  IN I-AGNCY-DETAIL-REC = "1"
                 WRITE IO-AGNCY-HEADER-REC FROM I-AGNCY-HEADER-REC
            WHEN RECORD-TYPE  IN I-AGNCY-DETAIL-REC = "7"
                 MOVE I-AGNCY-DETAIL-REC TO 
                      IO-AGNCY-DETAIL-REC
                 IF  AGNCY-CHG-CD IN I-AGNCY-DETAIL-REC > 8 
                 THEN MOVE "FTM21" TO 
                            FEATURE-CODE IN IO-AGNCY-DETAIL-REC
                 ELSE MOVE "FTM8" TO 
                            FEATURE-CODE IN IO-AGNCY-DETAIL-REC
                 END-IF
                 WRITE IO-AGNCY-DETAIL-REC
            WHEN RECORD-TYPE  IN I-AGNCY-DETAIL-REC = "9"
                 WRITE IO-AGNCY-TRAILER-REC FROM I-AGNCY-TRAILER-REC
                 SET SW03-END-OF-I-FILE         TO TRUE
            WHEN OTHER
            END-EVALUATE.

       B1-EXIT.
           EXIT.


      *=================================================================
       E-READ-NEXT-ACCUM                                        SECTION.
      *=================================================================
      * PURPOSE: Reading of the next BAN key from the input file.
      *
      *-----------------------------------------------------------------
       E-00.
 


           READ IO-AGNCY-FILE  NEXT RECORD 
            
           AT END
            
               SET SW03-END-OF-IO-FILE         TO TRUE
                
           END-READ.


            EVALUATE TRUE
            WHEN RECORD-TYPE  IN IO-AGNCY-DETAIL-REC = "1"
                 WRITE O-AGNCY-HEADER-REC FROM IO-AGNCY-HEADER-REC

            WHEN RECORD-TYPE  IN IO-AGNCY-DETAIL-REC = "7"
                 WRITE O-AGNCY-DETAIL-REC FROM IO-AGNCY-DETAIL-REC

            WHEN RECORD-TYPE  IN IO-AGNCY-DETAIL-REC = "9"
                 WRITE O-AGNCY-TRAILER-REC FROM I-AGNCY-TRAILER-REC
              SET SW03-END-OF-IO-FILE       TO TRUE

            WHEN OTHER

            END-EVALUATE.
        

    
       E-EXIT.
           EXIT.               

])



AT_CHECK([${COMPILE} -o prog prog.cob ], [0])
AT_CHECK([./prog], [0])
AT_CHECK([od -a expo.out], [0], 
[0000000   1  sp   0   7   8   9   5   a   b   c   d   e   f   g   h   i
0000020   j   k   l   m   n   o   p   q   r   s   t   u   v   1   2   3
0000040   4   5   6   7   8   9  sp  sp   2   0   1   4   1   2   0   9
0000060   2   9   9   2  nl   7  sp   0   0   3   9   2   6   1   9   8
0000100   0   8   a   b   c   d   e   f   g   h   i   j   k   l   m   n
0000120   o   p   q   r   s   t   u   v   w   1   2   3  sp  sp  sp  sp
0000140   2   0   1   4   0   2   1   8   C   0   0   0   1   9   3   0
0000160   1   3   0   0   0   0   0   0   0   0   0   F   T   M   8  nl
0000200   7  sp   0   0   4   5   4   7   2   6   4   2   0   a   b   c
0000220   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s
0000240   t   u   v   w   1   2   3  sp  sp  sp  sp   2   0   1   4   1
0000260   1   2   5   D   0   0   0   0   0   0   0   0   0   0   0   0
0000300   0   0   0   1   0   5   F   T   M   2   1  nl   9  sp   0   0
0000320   0   0   0   0   6   0   0   0   0   0   0   0   0   0   1   0
0000340   5  nl
0000342
])

AT_CLEANUP

AT_SETUP([ZERO BINAIRE to edited field])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. UTLX.
       DATA DIVISION.
       FILE SECTION.
       
       WORKING-STORAGE SECTION.
       
       01 GROUPE-NUM.
       05 NUM1 PIC 9(15).
       05 NUM2 PIC 9(15).
       05 NUM3 PIC 9(15).
       
       01 NUM-EDIT PIC -Z(14)9.
       
       LINKAGE SECTION.
       
       PROCEDURE DIVISION.
       PRINC SECTION.
       
       MOVE LOW-VALUE TO GROUPE-NUM.

       MOVE NUM2 TO NUM-EDIT.
           IF NUM-EDIT = "               0"
               DISPLAY "OK"
           ELSE
               DISPLAY "NOT OK"
           END-IF

       
       STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP

AT_SETUP([SYMBOLIC CHARACTERS])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROG.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       SYMBOLIC CHARACTERS X1D IS 30.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 MYFIELD1 PIC X VALUE X"1D".
       PROCEDURE DIVISION.
       MAIN.
       IF MYFIELD1 = X1D
       DISPLAY "OK"
       ELSE
       DISPLAY "KO"
       END-IF.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP


AT_SETUP([CITBIGINT TO BCD])

AT_DATA([prog.cob], [
       IDENTIFICATION             DIVISION.
       PROGRAM-ID.                test_opti.
       AUTHOR.                    SIXT.
       ENVIRONMENT                DIVISION.
       CONFIGURATION              SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT          IS COMMA.
       INPUT-OUTPUT               SECTION.
       FILE-CONTROL.
       DATA                       DIVISION.
       FILE                       SECTION.
       WORKING-STORAGE SECTION.

       77  RECH1                  PIC S9(09)V99 COMP   VALUE ZEROES.
       77  RECH2                  PIC S9(09)V99 COMP-5 VALUE ZEROES.
       77  RECH3                  PIC S9(09)V99 COMP-3 VALUE ZEROES.
       77  RECH4                  PIC S9(09)V99        VALUE ZEROES.

       01  U8000-HELP.
           03 U8000-FROM          PIC 9(04)    VALUE ZEROES.
           03 FILLER              REDEFINES U8000-FROM.
              05 U8000-FROM-H     PIC 9(02).
              05 U8000-FROM-M     PIC 9(02).
           03 U8000-TO            PIC 9(04)    VALUE ZEROES.
           03 FILLER              REDEFINES U8000-TO.
              05 U8000-TO-H       PIC 9(02).
              05 U8000-TO-M       PIC 9(02).
           03 U8000-DIFF          PIC 9(04)    VALUE ZEROES.
           03 FILLER              REDEFINES U8000-DIFF.
              05 U8000-DIFF-H     PIC 9(02).
              05 U8000-DIFF-M     PIC 9(02).


       PROCEDURE DIVISION.
           MOVE 0001              TO U8000-FROM.
           MOVE 2359              TO U8000-TO.

           COMPUTE RECH3          = U8000-TO-H - U8000-FROM-H.
           DISPLAY "COMP-3 RECH3=" RECH3.
           STOP RUN. 

])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[COMP-3 RECH3=+000000023,00
])

AT_CLEANUP


AT_SETUP([FILE OPTIONAL STATUS MF])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT SQOUT ASSIGN         KC-SQOUT
                        ORGANIZATION   RELATIVE
                        ACCESS         SEQUENTIAL
                        FILE STATUS    W-FSTAT.
       DATA DIVISION.
       FILE SECTION.
       FD SQOUT.
           01 SQOUT-FLD001 PIC X(10).
       WORKING-STORAGE SECTION.
           01 W-FSTAT PIC X(02).
       PROCEDURE DIVISION.
           MOVE "TestFile.txt" TO KC-SQOUT.
           OPEN EXTEND SQOUT.
           DISPLAY "FILE STATUS:" W-FSTAT.
           STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob -std=mf -foptional-file -fmf-file-optional])
AT_CHECK([./prog], [0],
[FILE STATUS:05
])

AT_CLEANUP


AT_SETUP([EXPONENTIATION TRUNCATED])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. TEST-COMPUTE.
        ENVIRONMENT DIVISION.
        CONFIGURATION SECTION.
        SOURCE-COMPUTER. UNIX.
        OBJECT-COMPUTER. UNIX.
        SPECIAL-NAMES.
        CONSOLE IS UD
        CURRENCY SIGN IS "F"
        DECIMAL-POINT IS COMMA.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        1 ZF-ENR-ZF.
        2 ZF-WMECHTX PIC S9(005)V9(10) COMP-3.
        2 ZF-WMECHTX-R REDEFINES ZF-WMECHTX.
        3 ZF-WMECHTXW PIC S9(003)V9(12) COMP-3.
        3 ZF-WMECHTXW-R REDEFINES ZF-WMECHTXW
        PIC X(00008).
        2 ZF-TXPERGLW OCCURS 00005
        PIC S9(001)V9(14) COMP-3.
        2 ZF-TXPERGLW-96 PIC S9(001)V9(14) COMP-3.
        2 ZF-TXPERGLW-R96 REDEFINES ZF-TXPERGLW-96
        PIC X(00008).
        2 ZF-NUM3 PIC S9(00003) COMP-3.
        2 ZF-NUM3-R REDEFINES ZF-NUM3
        PIC X(00002).
        2 ZF-NUM3D6 PIC S9(003)V9(06) COMP-3.
        2 ZF-NUM3D6-R REDEFINES ZF-NUM3D6
        PIC X(00005).
        2 ZF-MTBASE PIC S9(013)V9(02) COMP-3.
        2 ZF-MTBASE-R REDEFINES ZF-MTBASE
        PIC X(00008).
        2 ZF-PCAMORTW-18 PIC S9(002)V9(05) COMP-3.
        2 ZF-PCAMORTW-R18 REDEFINES ZF-PCAMORTW-18
        PIC X(00004).
        2 ZF-MTCRPAC PIC S9(013)V9(02) COMP-3.
        2 ZF-MTCRPAC-R REDEFINES ZF-MTCRPAC
        PIC X(00008).
        2 ZF-NUM3-1 COMP-2.
        PROCEDURE DIVISION.
        X--0 SECTION.
        0--1.
        MOVE 800000 TO ZF-MTBASE.
        COMPUTE ZF-TXPERGLW (1) ROUNDED = 1,134255 / 1200.
        MOVE 48 TO ZF-NUM3D6.
        MOVE 48 TO ZF-NUM3.
        MOVE 48 TO ZF-NUM3-1.
        MOVE 1 TO ZF-PCAMORTW-18.

        ADD 1 ZF-TXPERGLW (1) GIVING ZF-TXPERGLW-96.
        COMPUTE ZF-WMECHTXW ROUNDED =
        ZF-TXPERGLW-96 ** ZF-NUM3D6.
        SUBTRACT 1 FROM ZF-WMECHTXW.
        COMPUTE ZF-MTCRPAC ROUNDED =
        ZF-MTBASE * ZF-TXPERGLW (1) *
        (ZF-PCAMORTW-18 / ZF-WMECHTXW + 1).
        DISPLAY " MTBASE " ZF-MTBASE
        " TAUX " ZF-TXPERGLW (1) " WMECHTX " ZF-WMECHTXW
        " CRPAC " ZF-MTCRPAC.

        ADD 1 ZF-TXPERGLW (1) GIVING ZF-TXPERGLW-96.
        COMPUTE ZF-WMECHTXW ROUNDED =
        ZF-TXPERGLW-96 ** ZF-NUM3.
        SUBTRACT 1 FROM ZF-WMECHTXW.
        COMPUTE ZF-MTCRPAC ROUNDED =
        ZF-MTBASE * ZF-TXPERGLW (1) *
        (ZF-PCAMORTW-18 / ZF-WMECHTXW + 1).
        DISPLAY " MTBASE " ZF-MTBASE
        " TAUX " ZF-TXPERGLW (1) " WMECHTX " ZF-WMECHTXW
        " CRPAC " ZF-MTCRPAC.

        ADD 1 ZF-TXPERGLW (1) GIVING ZF-TXPERGLW-96.
        COMPUTE ZF-WMECHTXW ROUNDED =
        ZF-TXPERGLW-96 ** ZF-NUM3-1.
        SUBTRACT 1 FROM ZF-WMECHTXW.
        COMPUTE ZF-MTCRPAC ROUNDED =
        ZF-MTBASE * ZF-TXPERGLW (1) *
        (ZF-PCAMORTW-18 / ZF-WMECHTXW + 1).
        DISPLAY " MTBASE " ZF-MTBASE
        " TAUX " ZF-TXPERGLW (1) " WMECHTX " ZF-WMECHTXW
        " CRPAC " ZF-MTCRPAC.
        STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[ MTBASE +0000000800000,00 TAUX +0,00094521250000 WMECHTX +000,046392747993 CRPAC +0000000017055,48
 MTBASE +0000000800000,00 TAUX +0,00094521250000 WMECHTX +000,046392747993 CRPAC +0000000017055,48
 MTBASE +0000000800000,00 TAUX +0,00094521250000 WMECHTX +000,046392747993 CRPAC +0000000017055,48
])

AT_CLEANUP

AT_SETUP([DISPLAY UPON])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       DISPLAY "This is sent to CONSOLE" UPON CONSOLE.
       DISPLAY "This is sent to SYSERR" UPON SYSERR.
       DISPLAY "This is sent to PRINTER" UPON PRINTER.
       DISPLAY "This is also sent to CONSOLE" UPON CONSOLE.
       DISPLAY "This is also sent to SYSERR" UPON SYSERR.
       DISPLAY "This is also sent to PRINTER" UPON PRINTER.
       STOP RUN RETURNING 0.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [This is sent to CONSOLE
This is sent to PRINTER
This is also sent to CONSOLE
This is also sent to PRINTER
], [This is sent to SYSERR
This is also sent to SYSERR
])

AT_CHECK([export COB_DISPLAY_PRINTER='prt.log' 
./prog], [0], [This is sent to CONSOLE
This is also sent to CONSOLE
], [This is sent to SYSERR
This is also sent to SYSERR
])

AT_CAPTURE_FILE(./prt.log)

AT_DATA([reference], [This is sent to PRINTER
This is also sent to PRINTER
])

AT_CLEANUP

AT_SETUP([FCD TO FILE])

AT_DATA([cobopt.it], [include "mf.conf"

EC-BOUND-SUBSCRIPT: yes
#assign-clause:external
filename-mapping: no
defaultbyte: 0
use-defaultbyte: yes
exit-program-forced: yes
signed-comp6-as-comp3: yes
external-mapping: yes
mf-hostnumcompare: yes
move-picx-to-pic9: mf40
relax-bounds-check: yes
spzero: yes
sign-ebcdic: yes
move-spaces-to-displaynumeric: yes
optimize-move: no
line-seq-mf: no
#fast-figurative-move: no
binary-size: 1-2-4-8
not-reserved "E"
not-reserved "TAB"
align-8: yes
synchronized-clause: ok
constant:XOPEN=1
constant:ONSITE=1
constant:GBLSIZE=21004
constant:TPMEASURE=1
constant:MAXLOOKUPSIZE=4000
EC-SIZE : no
EC-SIZE-ZERO-DIVIDE : yes
#pour eviter de planter sur READ erreur 44
#variable-rec-pad-mf:yes
])

AT_DATA([prog.cob], [

       IDENTIFICATION DIVISION .
         $SET FCDREG
       PROGRAM-ID .   PROG .
       INSTALLATION . "PAIEMENTS RENTES ACCIDENTS DU" .
       SECURITY. "82TR12M986  A N"
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
       SOURCE-COMPUTER .  MF-UNIX .
       OBJECT-COMPUTER .  MF-UNIX .
           INPUT-OUTPUT SECTION .
       FILE-CONTROL .
      *                                                         FGIR-FZ
      *************************************************         =======
      *    FICHIER    SORTIE
      *    FICHIER STANDARDISE D'EMISSION AU FORMAT CENA
      *************************************************
      *
       SELECT      FGIR-FS
                   ASSIGN    EXTERNAL  FS
                   ORGANIZATION        SEQUENTIAL
                   ACCESS MODE         SEQUENTIAL
      
           .
       DATA DIVISION.
       FILE SECTION .
            
       FD  FGIR-FS
        RECORDING MODE IS VARIABLE
           RECORD VARYING FROM 1.

       01  AXL1-FS.
       03 C-AXL1-FS.

      *          LONGUEUR DE L'ARTICLE = 0001
       05 LFIL-AXL1-FS                        PIC     X.
      * FIN   COPIE AXL1,W1
       01    AG0T-FS.
           03  C-AG0T-FS.
            05 LFIL-AG0T-FS OCCURS 3000 TIMES DEPENDING ON LG-AG0T-FS
                                        PIC X.
       WORKING-STORAGE SECTION.
          77 I                    PIC 9.
       01 LG-AG0T-FS                 PIC S9(9) COMP-5 SYNC VALUE 197.
       01  ETOP-FGIR-FE               PIC 9 VALUE 0.
           88 FIN-FGIR-FE VALUE 1.
       01  LG-ART                     PIC 9(04).
       LINKAGE SECTION.
        01    FCD-ARG.
               COPY "XFHFCD.CPY".
                        
      
      
       PROCEDURE DIVISION. 
       PRINCIPALE SECTION.
       DEB-PG.
           SET ADDRESS OF FCD-ARG TO ADDRESS OF FH--FCD OF FGIR-FS.
           MOVE 197 TO LG-ART.
      
           MOVE LG-ART                    TO FCD-MAX-REC-LENGTH.
           MOVE 1                         TO FCD-MIN-REC-LENGTH.
      
           OPEN OUTPUT FGIR-FS.
        	MOVE "THIS IS A TEST" TO C-AG0T-FS.
           WRITE AG0T-FS.

           GO TO FIN-LECTURE.
      
           
      
       FIN-LECTURE.

       	   CLOSE      FGIR-FS .
      	       EXIT.
      
        
])

AT_CHECK([${COMPILE} prog.cob -ffcdreg -w -conf=cobopt.it])
AT_CHECK([./prog], [0])
AT_CHECK([od -a -j 22 FS], [0], 
[0000026 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul   >
0000046 nul soh nul nul nul nul nul nul nul nul soh nul nul nul nul nul
0000066 nul nul nul   E nul nul nul soh nul nul nul nul nul nul nul nul
0000106 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
*
0000166 nul nul nul nul nul nul nul nul nul nul   @   E   T   H   I   S
0000206  sp   I   S  sp   A  sp   T   E   S   T  sp  sp  sp  sp  sp  sp
0000226  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000506  sp nul
0000510
])

AT_CLEANUP

AT_SETUP([COMP-X With PIC XX no truncate])

AT_DATA([cc.conf],[
include "default.conf"
binary-truncate: yes
pretty-display: no
])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TST.
           05 BVAL  PIC 9999 BINARY VALUE 512.
           05 XVAL  PIC XX COMP-X VALUE 512.
              88 XLOW  VALUE   0 THRU 256.
              88 XHIGH VALUE 257 THRU 65536.
           05 VAL9  PIC 99999 COMP-X VALUE 1024.
              88 LOW9  VALUE   0 THRU 256.
              88 HIGH9 VALUE 257 THRU 65536.
           05 XVAL2 PIC XX COMP-X VALUE 16706.
           05 XVALX REDEFINES XVAL2 PIC XX.
           05 YVALX PIC XX VALUE 'A '.
           05 YVAL2 REDEFINES YVALX PIC XX COMP-X.

       PROCEDURE DIVISION.
           DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
           DISPLAY " VAL9 is " VAL9 ";  Length is " LENGTH OF VAL9.
           MOVE 10240 TO XVAL.
           DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
           DISPLAY "XVAL2 is " XVAL2 "; Length is " LENGTH OF XVAL2.
           DISPLAY "XVALX is " XVALX "; Length is " LENGTH OF XVALX.
           ADD 1 TO XVAL2.
           DISPLAY "XVALX is " XVALX " after +1;".
           COMPUTE XVAL2 = XVAL2 / 256 + 8192.
           DISPLAY "XVALX is " XVALX " after / 256 + 8192;".
           MOVE 'DE'       TO XVALX.
           DISPLAY "Numeric: " XVAL2 " is char " XVALX.
           MOVE ZERO       TO YVAL2.
           MOVE 'D'        TO YVALX (1:1)
           MOVE LOW-VALUES TO YVALX (2:1)
           SUBTRACT YVAL2 FROM XVAL2.
           MOVE ' '        TO YVALX (1:1)
           MOVE LOW-VALUES TO YVALX (2:1)
           ADD YVAL2 TO XVAL2.
           DISPLAY "Numeric: " XVAL2 " is char " XVALX.
           MOVE 0 TO XVAL.
           ADD 10240 TO XVAL.
           IF XVAL = 10240
               DISPLAY "XVAL is " XVAL
           ELSE
               DISPLAY "XVAL is not 10240 but " XVAL
           END-IF.
           MOVE 0 TO BVAL.
           ADD 10240 TO BVAL.
           IF BVAL = 0240
               DISPLAY "BVAL is " BVAL
           ELSE
               DISPLAY "BVAL is not 0240 but " BVAL
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob -conf=cc.conf])
AT_CHECK([./prog], [0],
[ XVAL is 00512;  Length is 2
 VAL9 is 00001024;  Length is 3
 XVAL is 10240;  Length is 2
XVAL2 is 16706; Length is 2
XVALX is AB; Length is 2
XVALX is AC after +1;
XVALX is  A after / 256 + 8192;
Numeric: 17477 is char DE
Numeric: 08261 is char  E
XVAL is 10240
BVAL is 00240
])

AT_CLEANUP

AT_SETUP([INVALID CONDITION ON OBJECT LEFT MOST])

AT_DATA([prog.cob], [
       identification division. 
       program-id.  prog.
       environment division.
       data division.
       working-storage section. 
       77 ws-dummy   pic x.
       01 r-cursor.
         05 movement-time PIC 9(6) VALUE 121299.
         05 movement-date PIC 9(9). 
       PROCEDURE DIVISION.
           DISPLAY "COBOL-IT" LINE 12 COL 10.
           IF MOVEMENT-DATE OR R-CURSOR = 0
             DISPLAY "TRUE and not badly formed condition"
                LINE 14 COL 10
           ELSE 
             DISPLAY "FALSE and not badly formed condition"
                LINE 14 COL 10
           END-IF.
           ACCEPT WS-DUMMY LINE 14 COL 50.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob:14: Error: Invalid condition, field movement-date at left most must be a subject
])

AT_CLEANUP

AT_SETUP([INDEX OPTIMIZE: oldest index])

AT_DATA([prog.cob], [
       identification division.
       program-id.   prog.
       author. uwe-seb.
       environment division.
       configuration section.
       special-names.
           decimal-point is comma.
       data division.
       working-storage section.
       01  WARBEITS-AKTENZEICHEN.
           05    WARB-AZ.
            10    WARB-AZ-01            PIC 9 VALUE 0.
            10    WARB-AZ-02            PIC 9 VALUE 0.
            10    WARB-AZ-03            PIC 9 VALUE 0.
            10    WARB-AZ-04            PIC 9 VALUE 0.
            10    WARB-AZ-05            PIC 9 VALUE 0.
            10    WARB-AZ-06            PIC 9 VALUE 0.
            10    WARB-AZ-07            PIC 9 VALUE 0.
            10    WARB-AZ-08            PIC 9 VALUE 0.
            10    WARB-AZ-09            PIC 9 VALUE 0.
            10    WARB-AZ-10            PIC 9 VALUE 0.
            10    WARB-AZ-11            PIC 9 VALUE 0.
            10    WARB-AZ-12            PIC 9 VALUE 0.
            10    WARB-AZ-13            PIC 9 VALUE 0.
            10    WARB-AZ-14            PIC 9 VALUE 0.
            10    WARB-AZ-15            PIC 9 VALUE 0.
            10    WARB-AZ-16            PIC 9 VALUE 0.
            10    WARB-AZ-17            PIC 9 VALUE 0.
            10    WARB-AZ-18            PIC 9 VALUE 0.
            10    WARB-AZ-19            PIC 9 VALUE 0.
            10    WARB-AZ-20            PIC 9 VALUE 0.
            10    WARB-AZ-21            PIC 9 VALUE 0.
            10    WARB-AZ-22            PIC 9 VALUE 0.
            10    WARB-AZ-23            PIC 9 VALUE 0.
            10    WARB-AZ-24            PIC 9 VALUE 0.
            10    WARB-AZ-25            PIC 9 VALUE 0.
       
       01  WARB-ERG                     PIC 9(4) COMP-3 VALUE 0.         
       procedure division.
       main section.
       main-st.
       
           MOVE ZEROS  TO WARB-ERG.
           COMPUTE  WARB-ERG   =   WARB-AZ-25 * 2
           COMPUTE  WARB-ERG   =   WARB-AZ-24 * 3
           COMPUTE  WARB-ERG   =   WARB-AZ-23 * 4
           COMPUTE  WARB-ERG   =   WARB-AZ-22 * 5
           COMPUTE  WARB-ERG   =   WARB-AZ-21 * 6
           COMPUTE  WARB-ERG   =   WARB-AZ-20 * 7
           COMPUTE  WARB-ERG   =   WARB-AZ-19 * 2
           COMPUTE  WARB-ERG   =   WARB-AZ-18 * 3
           COMPUTE  WARB-ERG   =   WARB-AZ-17 * 4
           COMPUTE  WARB-ERG   =   WARB-AZ-16 * 5
           COMPUTE  WARB-ERG   =   WARB-AZ-15 * 6
           COMPUTE  WARB-ERG   =   WARB-AZ-14 * 7
           COMPUTE  WARB-ERG   =   WARB-AZ-13 * 2
           COMPUTE  WARB-ERG   =   WARB-AZ-12 * 3
           COMPUTE  WARB-ERG   =   WARB-AZ-11 * 4
           COMPUTE  WARB-ERG   =   WARB-AZ-10 * 5
           COMPUTE  WARB-ERG   =   WARB-AZ-09 * 6
           COMPUTE  WARB-ERG   =   WARB-AZ-08 * 7
           COMPUTE  WARB-ERG   =   WARB-AZ-07 * 2
           COMPUTE  WARB-ERG   =   WARB-AZ-06 * 3
           COMPUTE  WARB-ERG   =   WARB-AZ-05 * 4
           COMPUTE  WARB-ERG   =   WARB-AZ-04 * 5
           COMPUTE  WARB-ERG   =   WARB-AZ-03 * 6
           COMPUTE  WARB-ERG   =   WARB-AZ-02 * 7
           COMPUTE  WARB-ERG   =   WARB-AZ-01 * 2

           
           exit program
           stop run
           .
       main-exit.
           exit.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CLEANUP

AT_SETUP([INDEX OPTIMIZE: Nested Index])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       author. uwe-seb.
        environment division.
       configuration section.
       special-names.
           decimal-point is comma.
       data division.
       working-storage section.
       01 IND1                       PIC 9(4).
       01 IND2                       PIC 9(4).
 
       01 LSHAS-ALL.
         10 LSHAS-TAB                  OCCURS 26.
           15 LSHAS-DA                  PIC  9(0005) COMP-3.
 
       01 ANDA-HAS-ALL.
         10 ANDA-HAS-TAB OCCURS  30 INDEXED BY  I-HEIM2.
           15 ANDA-HAS                  PIC 9(5).

       PROCEDURE DIVISION.
       STEUER SECTION.
       ST05.
               IF   LSHAS-DA (IND2) = ANDA-HAS (IND1)
                                    
               END-IF
           .
           EXIT.
           .

])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([INDEX OPTIMIZE: Counter for Stack])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.
       environment division.
       configuration section.
       special-names.
           decimal-point is comma.
       data division.
       working-storage section.
       01 HILF-RR-MONAT-MM               PIC  9(2).
       01 TAB-IND                        PIC  9(3).
       01 WSOHZL-ANZAHL                  PIC  9(2).
       01 W1.
          05 W2  OCCURS 20.
             10 WSOHZL-MMETHAS           PIC  X(1).
       01  BILD-TH-HAS                   PIC  9(5).
           88 BILD-TH-HAS-ALLG           VALUE  400 THRU 470.
       PROCEDURE DIVISION.

       MON-STEUER-ELEM-FUELLEN SECTION.
       MON-STEU-F-05.

           IF 1 = 2
               PERFORM VARYING TAB-IND FROM 1 BY 1
                                      UNTIL TAB-IND > WSOHZL-ANZAHL
                   IF BILD-TH-HAS-ALLG AND
                      WSOHZL-MMETHAS(TAB-IND) NOT EQUAL 'S'
                   END-IF
               END-PERFORM
           END-IF
           IF 1 = 2
               PERFORM VARYING TAB-IND FROM 1 BY 1
                                      UNTIL TAB-IND > WSOHZL-ANZAHL
                   IF BILD-TH-HAS-ALLG AND
                      WSOHZL-MMETHAS(TAB-IND) NOT EQUAL 'S'
                   END-IF
               END-PERFORM
           END-IF
           IF 1 = 2
               PERFORM VARYING TAB-IND FROM 1 BY 1
                                      UNTIL TAB-IND > WSOHZL-ANZAHL
                   IF BILD-TH-HAS-ALLG AND
                      WSOHZL-MMETHAS(TAB-IND) NOT EQUAL 'S'
                   END-IF
               END-PERFORM
           END-IF
           IF 1 = 2
               PERFORM VARYING TAB-IND FROM 1 BY 1
                                      UNTIL TAB-IND > WSOHZL-ANZAHL
                   IF BILD-TH-HAS-ALLG AND
                      WSOHZL-MMETHAS(TAB-IND) NOT EQUAL 'S'
                   END-IF
               END-PERFORM
           END-IF
 
           IF 1 = 2
               PERFORM VARYING TAB-IND FROM 1 BY 1
                                      UNTIL TAB-IND > WSOHZL-ANZAHL
                   IF BILD-TH-HAS-ALLG AND
                      WSOHZL-MMETHAS(TAB-IND) NOT EQUAL 'S'
                   END-IF
               END-PERFORM
           END-IF
           .
       MON-STEU-F-95.
           EXIT.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CLEANUP



AT_SETUP([REWRITE Line Sequential])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .
       PROGRAM-ID .   prog .
       INSTALLATION . "PROGRAMME TEST" .
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
      *
       SOURCE-COMPUTER .  MF-UNIX .
       OBJECT-COMPUTER .  MF-UNIX .
      /
       INPUT-OUTPUT SECTION .
       FILE-CONTROL .
		   SELECT      FJ65-FC
                   ASSIGN    EXTERNAL  FC
                   ORGANIZATION       LINE SEQUENTIAL
                   ACCESS MODE         SEQUENTIAL
           .
		   
       DATA DIVISION.
       FILE SECTION .
	  
	  FD  FJ65-FC
           .
       01  AJCQ-FC.
       03 C-AJCQ-FC.
       05 VCPT-AJCQ-FC                        PIC     9(10).
	   
	  
       WORKING-STORAGE SECTION.
000700 01 W-ETOP-ATQS-S1                            PIC     X.
       01 W-TEST-ALPHA PIC X(4) VALUE "FLUX".
	   01 W-TEST-NUM2 PIC 9(4).
	   01  W-TEST.
	     05 W-TEST-NUM PIC 9(4).
	   01 W-VCPT-AJCQ-FC            PIC     9(10).
       PROCEDURE DIVISION.
000780 PRINCIPALE SECTION.
000790 P00.
		   OPEN       OUTPUT            FJ65-FC .
		   MOVE 0 TO W-VCPT-AJCQ-FC.
	       ADD 10 TO W-VCPT-AJCQ-FC.
		   MOVE W-VCPT-AJCQ-FC TO VCPT-AJCQ-FC.		   
		   WRITE AJCQ-FC.
		   CLOSE      FJ65-FC .
           OPEN       I-O            FJ65-FC .
		   READ       FJ65-FC
                      AT  END
                     
                      GO             TO        P10.
	       ADD 10 TO W-VCPT-AJCQ-FC.
		   MOVE W-VCPT-AJCQ-FC TO VCPT-AJCQ-FC.		   
		   REWRITE AJCQ-FC.
		   CLOSE      FJ65-FC .
		   
001020*
       P10.
001030     STOP RUN RETURNING 0.
001040*
001050 P999.
001060     EXIT.
])

AT_CHECK([${COMPILE} prog.cob ])
AT_CHECK([./prog], [0])
AT_CHECK([od -a FC], [0], 
[0000000   0   0   0   0   0   0   0   0   2   0  nl
0000013
])

AT_CLEANUP

AT_SETUP([OPEN EXTEND for empty file])
AT_DATA([FA], [])
AT_DATA([prog.cob], [ 
       IDENTIFICATION DIVISION .
       PROGRAM-ID .   prog .
       INSTALLATION . "PROGRAMME DE GENERATION DES ME" .
      *
      *
000000   SECURITY. "59TJ00Q036  A N"
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
      *
       SOURCE-COMPUTER .  MF-UNIX .
       OBJECT-COMPUTER .  MF-UNIX .
      /
       INPUT-OUTPUT SECTION .
       FILE-CONTROL .
      *
        
       SELECT      FJWF-FA
                   ASSIGN    EXTERNAL  FA
                   ORGANIZATION        SEQUENTIAL
                   ACCESS MODE         SEQUENTIAL
           .
      *                                                         FJWF-S1
           SELECT    FJWF-S1
                     ASSIGN    EXTERNAL S1 .
      *                                                         E7198-EA
     
       DATA DIVISION.
       FILE SECTION .
      
       FD  FJWF-FA
           RECORDING MODE IS VARIABLE
           RECORD VARYING FROM 1
           .
      *COPIE,AJWF    ,W1,01,,FA
      * DEBUT COPIE AJWF,W1
      *      VERSION DU 08/12/2009 A 10/37 FICHE 82TJ70Y712
      *
       01  AJWF-FA.
       03 C-AJWF-FA.
      *
      *          DONNEES NECESSAIRES A LA CONSTITUTION DES MESSAGES
      *           WORKFLOW        DU TRAITEMENT GPCD
      *
      *          LONGUEUR DE L'ARTICLE = 0237
      *NOM DE L'ARTICLE
       05 CTYPENR-AJWF-FA                     PIC     X(4).
      *NUMERO PROCEDURE WORKFLOW A CREER (NUMERO SPECIFIQUE CONTENTIEUX)
       05 NART-AJWF-FA                        PIC     X(02).
      *DEBITEUR SERVANT POUR LE TRI
       05 NDBR-TRI-AJWF-FA                    PIC     X(13).
       05 NGRPTRI-AJWF-FA                     PIC     X(4).
       05 NGRPEDT-AJWF-FA                     PIC     X(4).
      *DEBITEUR TITULAIRE
       05 NDBRTIT-AJWF-FA                     PIC     X(13).
      *NUMERO DE TIERS ASSOCIE A LA CREANCE
       05 NTIE-AJWF-FA                        PIC     X(8).
      *REFERENCE DE LA PROCEDURE
       05 NREFPCD-AJWF-FA                     PIC     X(7).
      *MONTANT CALCULE POUR LA PROCEDURE A CREER
       05 VINIPCX-AJWF-FA                     PIC     9(10)V99.
      *DEBITEUR ORIGINE
       05 NDBRORI-AJWF-FA                     PIC     X(13).
      *DETAIL VALIDITE
       05 VALIDITE-AJWF-FA.
      *SOUS-DEBITEUR
         10 NSOUDBR-AJWF-FA                   PIC     X(13).
      *CODE BT-APE
         10 CB-TAPE-AJWF-FA                   PIC     9(4).
      *NUMERO UG
         10 NU-G-AJWF-FA                      PIC     9(2).
      *TIERS VALIDITE
         10 NTIE-VAL-AJWF-FA                  PIC     X(8).
      *GROUPE DE CREANCES
         10 CGRPCRCREC-AJWF-FA                PIC     XX.
      *PERIODE VALIDITE DE LA CREANCE
         10 NVALCRC-AJWF-FA                   PIC     XXX.
      *CODE PARTAGE DE LA VALIDITE DE LA CREANCE
         10 CPARVALCRC-AJWF-FA                PIC     X(1).
      *DONNEES EMISSION
       05 EMISSION-AJWF-FA.
      *NUMERO DU MOUVEMENT D'EMISSION
         10 NMVTEMI-AJWF-FA                   PIC     9(4).
      *DATE DU MOUVEMENT D'EMISSION
         10 DMVTEMI-AJWF-FA                   PIC     9(8).
      *NUMERO DE PJ
         10 NP-JEMICRC-AJWF-FA                PIC     X(13).
      *DATE NOTIFICATION EMISSION
         10 DNOTEMI-AJWF-FA                   PIC     9(8).
      *DATE MAXIMUM DE PAIEMENT
         10 DMAXPMT-AJWF-FA                   PIC     9(8).
      *CODE ORIGINE DU MOUVEMENT
         10 CORIMVT-AJWF-FA                   PIC     XX.
      *NATURE DE CALCUL DE LA CREANCE
         10 CNTUCAL-AJWF-FA                   PIC     XX.
      *RANG D'EMISSION
         10 NRNGEMICRC-AJWF-FA                PIC     9(2).
      *LIEN EMISSION PRINCIPALE POUR EMISSION DE MAJORATION
         10 NMVTPPLMAJ-AJWF-FA                PIC     9(4).
      *GROUPE CREANCE
       05 CREANCE-AJWF-FA.
      *CLE BASE CREANCE
         10 VDBK-A1103-AJWF-FA                PIC     S9(9).
      *CODE CREANCE
         10 CCRCBAS-AJWF-FA                   PIC     XXX.
      *TYPE DE PART DE LA CREANCE
         10 CPARCRC-AJWF-FA                   PIC     X.
      *TYPE DE LEGISLATION AYANT EMIS L'INDU
         10 CLEGCRC-AJWF-FA                   PIC     X.
      *CATEGORIE DE LA CREANCE
         10 CCATCRCREC-AJWF-FA                PIC     X.
      *TIERS CREANCE
         10 NTIE-CRC-AJWF-FA                  PIC     X(8).
      *MONTANT EMIS
         10 VEMICRC-AJWF-FA                   PIC     9(8)V99.
      *SOLDE CREANCE
         10 VSLDCRC-AJWF-FA                   PIC     9(8)V99.
      *FILLER RESERVE
       05 LFIL-AJWF-FA                        PIC     X(30).
      * FIN   COPIE AJWF,W1
      *                                                         FJWF-S1
       SD  FJWF-S1 .
      *COPIE,AJWF    ,W1,01,,S1
      * DEBUT COPIE AJWF,W1
      *      VERSION DU 08/12/2009 A 10/37 FICHE 82TJ70Y712
      *
       01  AJWF-S1.
       03 C-AJWF-S1.
      *
      *          DONNEES NECESSAIRES A LA CONSTITUTION DES MESSAGES
      *           WORKFLOW        DU TRAITEMENT GPCD
      *
      *          LONGUEUR DE L'ARTICLE = 0237
      *NOM DE L'ARTICLE
       05 CTYPENR-AJWF-S1                     PIC     X(4).
      *NUMERO PROCEDURE WORKFLOW A CREER (NUMERO SPECIFIQUE CONTENTIEUX)
       05 NART-AJWF-S1                        PIC     X(02).
      *DEBITEUR SERVANT POUR LE TRI
       05 NDBR-TRI-AJWF-S1                    PIC     X(13).
       05 NGRPTRI-AJWF-S1                     PIC     X(4).
       05 NGRPEDT-AJWF-S1                     PIC     X(4).
      *DEBITEUR TITULAIRE
       05 NDBRTIT-AJWF-S1                     PIC     X(13).
      *NUMERO DE TIERS ASSOCIE A LA CREANCE
       05 NTIE-AJWF-S1                        PIC     X(8).
      *REFERENCE DE LA PROCEDURE
       05 NREFPCD-AJWF-S1                     PIC     X(7).
      *MONTANT CALCULE POUR LA PROCEDURE A CREER
       05 VINIPCX-AJWF-S1                     PIC     9(10)V99.
      *DEBITEUR ORIGINE
       05 NDBRORI-AJWF-S1                     PIC     X(13).
      *DETAIL VALIDITE
       05 VALIDITE-AJWF-S1.
      *SOUS-DEBITEUR
         10 NSOUDBR-AJWF-S1                   PIC     X(13).
      *CODE BT-APE
         10 CB-TAPE-AJWF-S1                   PIC     9(4).
      *NUMERO UG
         10 NU-G-AJWF-S1                      PIC     9(2).
      *TIERS VALIDITE
         10 NTIE-VAL-AJWF-S1                  PIC     X(8).
      *GROUPE DE CREANCES
         10 CGRPCRCREC-AJWF-S1                PIC     XX.
      *PERIODE VALIDITE DE LA CREANCE
         10 NVALCRC-AJWF-S1                   PIC     XXX.
      *CODE PARTAGE DE LA VALIDITE DE LA CREANCE
         10 CPARVALCRC-AJWF-S1                PIC     X(1).
      *DONNEES EMISSION
       05 EMISSION-AJWF-S1.
      *NUMERO DU MOUVEMENT D'EMISSION
         10 NMVTEMI-AJWF-S1                   PIC     9(4).
      *DATE DU MOUVEMENT D'EMISSION
         10 DMVTEMI-AJWF-S1                   PIC     9(8).
      *NUMERO DE PJ
         10 NP-JEMICRC-AJWF-S1                PIC     X(13).
      *DATE NOTIFICATION EMISSION
         10 DNOTEMI-AJWF-S1                   PIC     9(8).
      *DATE MAXIMUM DE PAIEMENT
         10 DMAXPMT-AJWF-S1                   PIC     9(8).
      *CODE ORIGINE DU MOUVEMENT
         10 CORIMVT-AJWF-S1                   PIC     XX.
      *NATURE DE CALCUL DE LA CREANCE
         10 CNTUCAL-AJWF-S1                   PIC     XX.
      *RANG D'EMISSION
         10 NRNGEMICRC-AJWF-S1                PIC     9(2).
      *LIEN EMISSION PRINCIPALE POUR EMISSION DE MAJORATION
         10 NMVTPPLMAJ-AJWF-S1                PIC     9(4).
      *GROUPE CREANCE
       05 CREANCE-AJWF-S1.
      *CLE BASE CREANCE
         10 VDBK-A1103-AJWF-S1                PIC     S9(9).
      *CODE CREANCE
         10 CCRCBAS-AJWF-S1                   PIC     XXX.
      *TYPE DE PART DE LA CREANCE
         10 CPARCRC-AJWF-S1                   PIC     X.
      *TYPE DE LEGISLATION AYANT EMIS L'INDU
         10 CLEGCRC-AJWF-S1                   PIC     X.
      *CATEGORIE DE LA CREANCE
         10 CCATCRCREC-AJWF-S1                PIC     X.
      *TIERS CREANCE
         10 NTIE-CRC-AJWF-S1                  PIC     X(8).
      *MONTANT EMIS
         10 VEMICRC-AJWF-S1                   PIC     9(8)V99.
      *SOLDE CREANCE
         10 VSLDCRC-AJWF-S1                   PIC     9(8)V99.
      *FILLER RESERVE
       05 LFIL-AJWF-S1                        PIC     X(30).
      * FIN   COPIE AJWF,W1
     
       WORKING-STORAGE SECTION.
       01  G-NSTU-GLO.
         05 FILLER                     PIC X .
         05 G-NSTU-MIN                 PIC X .
      *
       01  G-NSTU-GLO-R REDEFINES G-NSTU-GLO .
         05 G-NSTU-MIN-R               PIC 9(4) COMP-5 .
      *
       01  G-NSTU-DISP                 PIC 9(4).

      *    LIBELLE
      *
       01  G-LDEFFIC-FJWF-FA         PIC X(30) VALUE
           "FICHIER CONTENTIEUX CONTENANT" .
      *
      *    COMPTEUR   D'ARTICLES
      *
       01  G-QACL-FJWF-FA            PIC S9(9) COMP-5 SYNC
                                                 VALUE ZEROES.
      *
      *    NIVEAU D'INFORMATION POUR G25
      *
       01  G-CNIVINF-FJWF-FA           PIC 9     VALUE ZERO.
      *
      *    INDICATEUR  DE  FIN  DE FICHIER
      *
       01  G-EEOF-FJWF-FA            PIC X(01) VALUE     SPACES .
           88 G-EOF-FJWF-FA                    VALUE     "V" .

       PROCEDURE DIVISION.

003010*
003020 PRINCIPALE SECTION.
003030 DEBUT.

003060     PERFORM TRAITEMENT2.
           PERFORM TRAITEMENT.
003090     STOP RUN RETURNING 0.
003100/
003850 TRAITEMENT2 SECTION.
003860 TRAIT-001.
           OPEN       EXTEND         FJWF-FA .
		   MOVE "01"       TO NART-AJWF-FA.
		   MOVE "AJWF" TO CTYPENR-AJWF-FA.
		   MOVE "1234567890123"     TO NDBRTIT-AJWF-FA.
           MOVE   "12345678"      TO NTIE-AJWF-FA.
           MOVE "1234567"  TO NREFPCD-AJWF-FA.
           MOVE 123456789.12     TO VINIPCX-AJWF-FA.
           MOVE "1234567890123"       TO NDBRORI-AJWF-FA.
           MOVE "1234567890123"       TO NSOUDBR-AJWF-FA.
           MOVE 1234       TO CB-TAPE-AJWF-FA.
           MOVE 12 TO NU-G-AJWF-FA.
           MOVE "12345678"      TO NTIE-VAL-AJWF-FA.
           MOVE "12"    TO CGRPCRCREC-AJWF-FA.
           MOVE "321"       TO NVALCRC-AJWF-FA.
           MOVE "z"    TO CPARVALCRC-AJWF-FA.
           MOVE 4321       TO NMVTEMI-AJWF-FA.
           MOVE 19920101       TO DMVTEMI-AJWF-FA.
           MOVE "1234567890123"    TO NP-JEMICRC-AJWF-FA.
           MOVE 19980101       TO DNOTEMI-AJWF-FA.
           MOVE 19980405       TO DMAXPMT-AJWF-FA.
           MOVE "rr"       TO CORIMVT-AJWF-FA.
           MOVE "FF"       TO CNTUCAL-AJWF-FA.
           MOVE 45    TO NRNGEMICRC-AJWF-FA.
           MOVE 2015    TO NMVTPPLMAJ-AJWF-FA.
           MOVE 123456789      TO VDBK-A1103-AJWF-FA.
           MOVE "PPP"       TO CCRCBAS-AJWF-FA.
           MOVE "Q"       TO CPARCRC-AJWF-FA.
           MOVE "H"       TO CLEGCRC-AJWF-FA.
           MOVE "A"    TO CCATCRCREC-AJWF-FA.
           MOVE "12345678"      TO NTIE-CRC-AJWF-FA.
           MOVE 1234567.99       TO VEMICRC-AJWF-FA.
           MOVE 7654321.77         TO VSLDCRC-AJWF-FA.
		   
		   
		   WRITE      AJWF-FA.
		   MOVE "02"       TO NART-AJWF-FA.
		   MOVE "AZERTYUIOPSDF"     TO NDBRTIT-AJWF-FA.
		   WRITE      AJWF-FA.
		   MOVE "03"       TO NART-AJWF-FA.
		   MOVE "MLKJHGFDSQNBV"     TO NDBRTIT-AJWF-FA.
		   WRITE      AJWF-FA.
           CLOSE FJWF-FA .
004250 TRAIT-FIN-999.
004260     EXIT.
003840/
003850 TRAITEMENT SECTION.
003860 TRAIT-001.

003960     SORT  FJWF-S1 ASCENDING  KEY  NART-AJWF-S1
003970                                   NGRPTRI-AJWF-S1
003980                                   NTIE-AJWF-S1
003990                                   NDBR-TRI-AJWF-S1
004000     INPUT   PROCEDURE  IS AVANT-TRI
004010     OUTPUT  PROCEDURE  IS APRES-TRI.
004080 FIN-TRAIT.
004090     EXIT.
004310 AVANT-TRI SECTION.
004320 AVANT-TRI-DEBUT.
004330*

004350      PERFORM G-OUV-FJWF-FA.
004360*
004370 AVANT-TRI-010.
004380     PERFORM G-LEC-FJWF-FA.
004390     IF G-EOF-FJWF-FA
004400        GO TO AVANT-TRI-900.


004490     MOVE NDBRORI-AJWF-FA TO NDBRORI-AJWF-FA.

004540     MOVE NSOUDBR-AJWF-FA  TO NSOUDBR-AJWF-FA.
004580     MOVE AJWF-FA     TO AJWF-S1.

004600     EVALUATE NART-AJWF-FA
004610     WHEN "01"
004620        
004640        MOVE NDBRORI-AJWF-FA   TO NDBR-TRI-AJWF-S1
004670        RELEASE AJWF-S1
004680     WHEN "02"

004710        MOVE NDBRORI-AJWF-FA   TO NDBR-TRI-AJWF-S1
004740        RELEASE AJWF-S1
004750     WHEN "03"

004780        MOVE NDBRORI-AJWF-FA   TO NDBR-TRI-AJWF-S1
004810        RELEASE AJWF-S1
004820     END-EVALUATE.

004850     GO TO AVANT-TRI-010.
004860*
004870 AVANT-TRI-900.
004880     PERFORM G-FIN-FJWF-FA.
004890 AVANT-TRI-FIN.
004900     EXIT.
004910/

004950 APRES-TRI SECTION.
004960 APRES-TRI-DEBUT.

004980 APRES-TRI-100.

005000     RETURN FJWF-S1 AT END
005010        GO TO APRES-TRI-FIN.
005350     GO TO APRES-TRI-100.
005360*
005370 APRES-TRI-FIN.
005380      EXIT.
005390/

      *
       G-OUV-FJWF-FA      SECTION .
       G-000-OUV-FJWF-FA .
           OPEN       INPUT          FJWF-FA .
           MOVE       ZEROS     TO   G-QACL-FJWF-FA .
           MOVE       SPACE     TO   G-EEOF-FJWF-FA .
       G-999-OUV-FJWF-FA .
           EXIT .

       G-FIN-FJWF-FA      SECTION .
       G-000-FIN-FJWF-FA .
           CLOSE      FJWF-FA .
       G-999-FIN-FJWF-FA .
           EXIT .

       G-LEC-FJWF-FA    SECTION .
       G-000-LEC-FJWF-FA .
           READ       FJWF-FA
                      AT  END
                      MOVE     "V"   TO        G-EEOF-FJWF-FA
                      GO             TO        G-999-LEC-FJWF-FA .
           ADD     1              TO   G-QACL-FJWF-FA .
       G-999-LEC-FJWF-FA .
           EXIT .
])

AT_CHECK([${COMPILE} -o prog prog.cob ])
AT_CHECK([./prog], [0])
AT_CHECK([od -a -j 22 FA], [0], 
[0000026 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul   >
0000046 nul soh nul nul nul nul nul nul nul nul soh nul nul nul nul nul
0000066 nul nul nul   m nul nul nul soh nul nul nul nul nul nul nul nul
0000106 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
*
0000166 nul nul nul nul nul nul nul nul nul nul   @   m   A   J   W   F
0000206   0   1 nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0000226 nul nul nul nul nul nul nul   1   2   3   4   5   6   7   8   9
0000246   0   1   2   3   1   2   3   4   5   6   7   8   1   2   3   4
0000266   5   6   7   0   1   2   3   4   5   6   7   8   9   1   2   1
0000306   2   3   4   5   6   7   8   9   0   1   2   3   1   2   3   4
0000326   5   6   7   8   9   0   1   2   3   1   2   3   4   1   2   1
0000346   2   3   4   5   6   7   8   1   2   3   2   1   z   4   3   2
0000366   1   1   9   9   2   0   1   0   1   1   2   3   4   5   6   7
0000406   8   9   0   1   2   3   1   9   9   8   0   1   0   1   1   9
0000426   9   8   0   4   0   5   r   r   F   F   4   5   2   0   1   5
0000446   1   2   3   4   5   6   7   8   9   P   P   P   Q   H   A   1
0000466   2   3   4   5   6   7   8   0   1   2   3   4   5   6   7   9
0000506   9   0   7   6   5   4   3   2   1   7   7 nul nul nul nul nul
0000526 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0000546 nul nul nul nul nul nul nul nul nul nul   @   m   A   J   W   F
0000566   0   2 nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0000606 nul nul nul nul nul nul nul   A   Z   E   R   T   Y   U   I   O
0000626   P   S   D   F   1   2   3   4   5   6   7   8   1   2   3   4
0000646   5   6   7   0   1   2   3   4   5   6   7   8   9   1   2   1
0000666   2   3   4   5   6   7   8   9   0   1   2   3   1   2   3   4
0000706   5   6   7   8   9   0   1   2   3   1   2   3   4   1   2   1
0000726   2   3   4   5   6   7   8   1   2   3   2   1   z   4   3   2
0000746   1   1   9   9   2   0   1   0   1   1   2   3   4   5   6   7
0000766   8   9   0   1   2   3   1   9   9   8   0   1   0   1   1   9
0001006   9   8   0   4   0   5   r   r   F   F   4   5   2   0   1   5
0001026   1   2   3   4   5   6   7   8   9   P   P   P   Q   H   A   1
0001046   2   3   4   5   6   7   8   0   1   2   3   4   5   6   7   9
0001066   9   0   7   6   5   4   3   2   1   7   7 nul nul nul nul nul
0001106 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0001126 nul nul nul nul nul nul nul nul nul nul   @   m   A   J   W   F
0001146   0   3 nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0001166 nul nul nul nul nul nul nul   M   L   K   J   H   G   F   D   S
0001206   Q   N   B   V   1   2   3   4   5   6   7   8   1   2   3   4
0001226   5   6   7   0   1   2   3   4   5   6   7   8   9   1   2   1
0001246   2   3   4   5   6   7   8   9   0   1   2   3   1   2   3   4
0001266   5   6   7   8   9   0   1   2   3   1   2   3   4   1   2   1
0001306   2   3   4   5   6   7   8   1   2   3   2   1   z   4   3   2
0001326   1   1   9   9   2   0   1   0   1   1   2   3   4   5   6   7
0001346   8   9   0   1   2   3   1   9   9   8   0   1   0   1   1   9
0001366   9   8   0   4   0   5   r   r   F   F   4   5   2   0   1   5
0001406   1   2   3   4   5   6   7   8   9   P   P   P   Q   H   A   1
0001426   2   3   4   5   6   7   8   0   1   2   3   4   5   6   7   9
0001446   9   0   7   6   5   4   3   2   1   7   7 nul nul nul nul nul
0001466 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
0001506 nul nul nul nul nul nul nul nul nul nul
0001520
])
AT_CLEANUP

AT_SETUP([FCD TO FILE Part 2])

AT_DATA([cobopt.it], [include "mf.conf"

EC-BOUND-SUBSCRIPT: yes
#assign-clause:external
filename-mapping: no
defaultbyte: 0
use-defaultbyte: yes
exit-program-forced: yes
signed-comp6-as-comp3: yes
external-mapping: yes
mf-hostnumcompare: yes
move-picx-to-pic9: mf40
relax-bounds-check: yes
spzero: yes
sign-ebcdic: yes
move-spaces-to-displaynumeric: yes
optimize-move: no
line-seq-mf: no
#fast-figurative-move: no
binary-size: 1-2-4-8
not-reserved "E"
not-reserved "TAB"
align-8: yes
synchronized-clause: ok
constant:XOPEN=1
constant:ONSITE=1
constant:GBLSIZE=21004
constant:TPMEASURE=1
constant:MAXLOOKUPSIZE=4000
EC-SIZE : no
EC-SIZE-ZERO-DIVIDE : yes
#pour eviter de planter sur READ erreur 44
#variable-rec-pad-mf:yes
source-location:yes
])

AT_DATA([prog.cob], [       IDENTIFICATION DIVISION .
	  $SET FCDREG
       PROGRAM-ID .   prog .
       INSTALLATION . "PAIEMENTS RENTES ACCIDENTS DU" .
       SECURITY. "82TR12M986  A N"
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
       SOURCE-COMPUTER .  MF-UNIX .
       OBJECT-COMPUTER .  MF-UNIX .
	    INPUT-OUTPUT SECTION .
000200 FILE-CONTROL .
000330 SELECT      FGIR-FE
000340             ASSIGN    EXTERNAL  FE
000350             ORGANIZATION        SEQUENTIAL
000360             ACCESS MODE         SEQUENTIAL
000370     .
000380*     
000940 SELECT      FGIR-FS
000950             ASSIGN    EXTERNAL  FS
000960             ORGANIZATION        SEQUENTIAL
000970             ACCESS MODE         SEQUENTIAL
                   FILE STATUS IS      FS-FGIR
000980     .
       DATA DIVISION.
001000 FILE SECTION .

	   
001130 FD  FGIR-FE
001140     RECORDING MODE IS VARIABLE
001150     RECORD VARYING FROM 1
001160     .

       01  AG0T-FE.
       03 C-AG0T-FE.
       05 LFIL-AG0T-FE                      OCCURS    3000
                                           PIC     X.

       01  APET-FE.
       03 C-APET-FE.

       05 CENR-APET-FE                        PIC     XXX.
      ***
      *** SYSTEME D'INFORMATION (MEME SI LE NOM COBOL NE CORRESPOND PAS)
      ***
       05 CIDTAPL-APET-FE                     PIC     X(04).
      **
      **   APPLICATION (MEME SI LE NOM COBOL NE CORRESPOND PAS)
      **
       05 LSYSINF-APET-FE                     PIC     X(02).
      *
      ***
      ****    NUMERO DE VERSION DE L'APPLICATION
      ***
       05 NVER-APET-FE                        PIC     X(2).
       05 ORIGINE-APET-FE.
      **
      ** NUMERO D'ORGANISME
      **
         10 NORG-APET-FE                      PIC     X(2).
      **
      ** NUMERO DE CITI
      **
         10 NCEN-APET-FE                      PIC     X(2).
         10 NDESMSA-APET-FE                   PIC     XX.
         10 NDPTCMA-APET-FE                   PIC     X(2).
      **
      ** NUMERO DE SEQUENCE DU FICHIER
      **
       05 NSEQ-APET-FE                        PIC     9(6).
      ***
      *** DATE DE CREATION DU FICHIER
      ***
       05 DCRE-APET-FE                        PIC     9(8).
      **
      ** NOMBRE D'ENREGISTREMENTS LOGIQUES DU FICHIER
      **
       05 QENRFIC-APET-FE                     PIC     9(9).
       05 CTYPTRT-APET-FE                     PIC     X.
      **
      **    CODE MONNAIE DANS LE CADRE DE L'EURO
      **
       05 CMONNAT-APET-FE                     PIC     X(3).
      * FIN   COPIE APET,W1
001190*COPIE,AGM3    ,W1,01,,FE
      * DEBUT COPIE AGM3,W1
      *      VERSION DU 31/05/2005 A 11/17 FICHE 82TX05G823
      *
       01  AGM3-FE.
       03 C-AGM3-FE.
      *
      *          DESCRIPTION ENTETE CENA - VERSION V1
      *
      *          LONGUEUR DE L'ARTICLE = 0150
      *CODE ENREGISTREMENT (DDF)
       05 CENR-AGM3-FE                        PIC     X(03).
      *NUMERO VERSION ENTETE CENA
       05 NVER-AGM3-FE                        PIC     X(02).
      *IDF DU TRANSFERT CFT
       05 LSYSINF-AGM3-FE                     PIC     X(08).
      *NOM DICO DU FICHIER SUPPORT DU FLUX
       05 NIDEREFEMT-AGM3-FE                  PIC     X(08).
      *CODE APPLICATION NATIONALE DESTINATAIRE OU EMETTRICE DU FICHIER
       05 LNOMENT-AGM3-FE                     PIC     X(06).
      *NO VERSION DE L' APPLICATION NATIONALE
       05 NVERAPP-AGM3-FE                     PIC     X(02).
      *SYSTEME D' INFORMATION DESTINATAIRE OU EMETTEUR DU FICHIER
      *(CF TA86700)
       05 CIDTAPL-AGM3-FE                     PIC     X(06).
      *NUMERO DE SEQUENCE DU FICHIER
       05 NSEQENVFIC-AGM3-FE                  PIC     9(06).
      *DATE DE CREATION DU FICHIER
       05 DCRE-AGM3-FE                        PIC     9(08).
      *NOMBRE D' ENREGISTREMENT DU FICHIER
       05 QENRFIC-AGM3-FE                     PIC     9(09).
      *TYPE DE TRAITEMENT
       05 CTYPTRT-AGM3-FE                     PIC     X(01).
      *NUMERO DE LA PERIODE DANS L' ANNEE
       05 NPER-AGM3-FE                        PIC     X(03).
      *ANNEE DE LA PERIODE
       05 DANN-AGM3-FE                        PIC     X(04).
      *CADRAGE
       05 LFIL-AGM3-FE                        PIC     X(84).
      * FIN   COPIE AGM3,W1
	  
	  
001470 FD  FGIR-FS
        RECORDING MODE IS VARIABLE
           RECORD VARYING FROM 1.
       01  AXL1-FS.
       03 C-AXL1-FS.

       05 LFIL-AXL1-FS                        PIC     X.
001490 01    AG0T-FS.
001500     03  C-AG0T-FS.
001510      05 LFIL-AG0T-FS OCCURS 3000 TIMES DEPENDING ON LG-AG0T-FS
001520                                  PIC X.
       WORKING-STORAGE SECTION.
	   77 I                    PIC 9.
001860 01 LG-AG0T-FS                 PIC S9(9) COMP-5 SYNC VALUE 197.
010110 01  ETOP-FGIR-FE               PIC 9 VALUE 0.
010120     88 FIN-FGIR-FE VALUE 1.
       01  LG-ART                     PIC 9(04).
      *
       01  FS-FGIR                    PIC X(2). 

       LINKAGE SECTION.
        01    FCD-ARG.
        COPY "XFHFCD.CPY".

           77 AG0T-FE-LEN     PIC 9(9) COMP-5.
           77 AG0T-FS-LEN     PIC 9(9) COMP-5.
           01 TITRE            PIC X(11).
       PROCEDURE DIVISION. 
       PRINCIPALE SECTION.
       DEB-PG.
            OPEN OUTPUT FGIR-FE.
            WRITE AG0T-FE from "This is a test".
            CLOSE FGIR-FE.

017160     SET ADDRESS OF FCD-ARG TO ADDRESS OF FH--FCD OF FGIR-FS.
           MOVE 197 TO LG-ART.
017170     MOVE LG-ART                    TO FCD-MAX-REC-LENGTH.
017180     MOVE 1                         TO FCD-MIN-REC-LENGTH.

017210     OPEN INPUT  FGIR-FE.

    
017200     OPEN OUTPUT FGIR-FS.

           IF FS-FGIR NOT = '00'
              DISPLAY 'ERREUR OPEN FGIR : FS-FGIR : ' FS-FGIR
           END-IF.
      * 		   
017430     PERFORM LECTURE UNTIL FIN-FGIR-FE.
           GO TO FIN-LECTURE.
    
           
       FIN-LECTURE.
	       CLOSE      FGIR-FE .
		   CLOSE      FGIR-FS .
	  
       FIN-PG. 
           EXIT PROGRAM.
      *
       LECTURE SECTION.
	   L10.
		   IF FIN-FGIR-FE
		      GO TO L99.
017240     READ FGIR-FE AT END
017250     MOVE 1  TO ETOP-FGIR-FE.
           IF FIN-FGIR-FE
		      GO TO L99.

           MOVE 197 TO LG-AG0T-FS.

	    MOVE AG0T-FE TO AG0T-FS.
           WRITE AG0T-FS.
	   L99.
	       EXIT.
])

AT_CHECK([${COMPILE} prog.cob -ffcdreg -w -conf=cobopt.it ])
AT_CHECK([./prog], [0])
AT_CHECK([od -a -j 22 FS], [0], 
[0000026 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul   >
0000046 nul soh nul nul nul nul nul nul nul nul soh nul nul nul nul nul
0000066 nul nul nul   E nul nul nul soh nul nul nul nul nul nul nul nul
0000106 nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul
*
0000166 nul nul nul nul nul nul nul nul nul nul   @   E   T   h   i   s
0000206  sp   i   s  sp   a  sp   t   e   s   t  sp  sp  sp  sp  sp  sp
0000226  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000506  sp nul
0000510
])

AT_CLEANUP

AT_SETUP([CALL comp5 as comp as parameter])

AT_DATA([cc.conf],[
include "default.conf"
call-comp5-as-comp:yes
])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. blah.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  bin PIC 9(9) BINARY VALUE 4096.
       PROCEDURE DIVISION.

           CALL "subb" USING 4096.
           CALL "subb" USING bin.
       STOP RUN.
       IDENTIFICATION DIVISION.
       PROGRAM-ID. subb.
       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC 9(9) BINARY.
       PROCEDURE DIVISION USING x.
            DISPLAY x.
       END PROGRAM subb.
       END PROGRAM blah.
])

AT_CHECK([${COMPILE} prog.cob -conf=cc.conf])
AT_CHECK([./prog], [0],
[000004096
000004096
])

AT_CLEANUP

AT_SETUP([INDEX OPTIMIZE: remove from debugger info])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.                                         
       PROGRAM-ID. EE4V393TEST.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
                  DECIMAL-POINT IS COMMA.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT GIR1
                  ASSIGN TO 'GIR1'.                                       
           SELECT GIR2
                  ASSIGN TO 'GIR2'.                                       
           SELECT GIR3
                  ASSIGN TO 'GIR3'.                                       
           SELECT GIR4
                  ASSIGN TO 'GIR4'.                                       
           SELECT GIR5
                  ASSIGN TO 'GIR5'.                                       
           SELECT GIR6
                  ASSIGN TO 'GIR6'.                                       
           SELECT GIR7
                  ASSIGN TO 'GIR7'.                                       
           SELECT GIR8
                  ASSIGN TO 'GIR8'.                                      
           SELECT GIR9
                  ASSIGN TO 'GIR9'.                                       
           SELECT GIR0
                  ASSIGN TO 'GIR0'.                                       
       DATA DIVISION.
       FILE SECTION.
       FD  GIR1
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR1.
                                                               
          05 LGI-ZW-ANZAHL1        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 
          DEPENDING ON LGI-ZW-ANZAHL1.
             10 LGI-ZW-ZWECK1     PIC X(27).
       FD  GIR2
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR2.
                                                               
          05 LGI-ZW-ANZAHL2        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 
          DEPENDING ON LGI-ZW-ANZAHL2.
             10 LGI-ZW-ZWECK2     PIC X(27).
       FD  GIR3
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR3.
                                                               
          05 LGI-ZW-ANZAHL3        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 
          DEPENDING ON LGI-ZW-ANZAHL3.
             10 LGI-ZW-ZWECK3     PIC X(27).
       FD  GIR4
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR4.
                                                               
          05 LGI-ZW-ANZAHL4        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13
           DEPENDING ON LGI-ZW-ANZAHL4.
             10 LGI-ZW-ZWECK4     PIC X(27).
       FD  GIR5
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR5.
                                                               
          05 LGI-ZW-ANZAHL5        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13
           DEPENDING ON LGI-ZW-ANZAHL5.
             10 LGI-ZW-ZWECK5     PIC X(27).
       FD  GIR6
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.

       01  FGIR6.
                                                               
          05 LGI-ZW-ANZAHL6        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13
           DEPENDING ON LGI-ZW-ANZAHL6.
             10 LGI-ZW-ZWECK6     PIC X(27).
       FD  GIR7
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.

       01  FGIR7.
                                                               
          05 LGI-ZW-ANZAHL7        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13
           DEPENDING ON LGI-ZW-ANZAHL7.
             10 LGI-ZW-ZWECK7     PIC X(27).
       FD  GIR8
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR8.
                                                               
          05 LGI-ZW-ANZAHL8        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13
           DEPENDING ON LGI-ZW-ANZAHL8.
             10 LGI-ZW-ZWECK8     PIC X(27).
       FD  GIR9
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.
       01  FGIR9.
                                                               
          05 LGI-ZW-ANZAHL9        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 
          DEPENDING ON LGI-ZW-ANZAHL9.
             10 LGI-ZW-ZWECK9     PIC X(27).
       FD  GIR0
               BLOCK CONTAINS           6 RECORDS
               RECORD CONTAINS          272 TO 623 CHARACTERS.

       01  FGIR0.
                                                               
          05 LGI-ZW-ANZAHL0        PIC S999  COMP-3.
          05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 
          DEPENDING ON LGI-ZW-ANZAHL0.
             10 LGI-ZW-ZWECK0     PIC X(27).
       WORKING-STORAGE SECTION.

       01  LGIRO.
           05 LGI-ZW-ANZAHL        PIC S999  COMP-3.
           05 LGI-ZW-ERWEITERUNG   OCCURS 0 TO 13 TIMES 
           DEPENDING ON LGI-ZW-ANZAHL.
              10 LGI-ZW-ZWECK1     PIC X(27).
      *                            BEGINN AENDERUNG  VERS. 003          
       PROCEDURE DIVISION.  
      *                            ENDE AENDERUNG  VERS. 003            
      ******************************************************************
      *    STEUERUNG SECTION                                           *
      ******************************************************************
       STEUERUNG SECTION.
       ST05.
                DISPLAY "START".
                GO TO ST95.
       ST95.
           EXIT PROGRAM.

])

AT_CHECK([$COMPILE prog.cob  -g ], [0], [], [])

AT_CLEANUP

AT_SETUP([DECIMAL OPTIMIZE: binary devision])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.                      prog.
       AUTHOR.                          THO.
       DATE-WRITTEN.                    17.01.12.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.                 COMPAQ.
       OBJECT-COMPUTER.                 COMPAQ.
       SPECIAL-NAMES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

           
       01 ER2                COMP-2.
       01 Z15                PIC S9(13)V9(05) COMP-5 value 30.
       01 Z25                PIC S9(13)V9(05) COMP-5 value 3.
       PROCEDURE DIVISION.
       HAUPT-ENDE.
             COMPUTE      ER2 ROUNDED
                      =   Z15
                      /   Z25 
             .
             DISPLAY ER2.
])

AT_CHECK([$COMPILE prog.cob  -g -fno-mfcomment ], [0], [], [])
AT_CHECK([./prog], [0],
[10.000000000000000000
])

AT_CLEANUP

AT_SETUP([COMP-2: Compare])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       
       01 RESULT COMP-2.
       01 testfeld COMP-2 VALUE 0.175000000000000020.  
       01 FIELD1 PIC S9(03)V9(6) COMP-3.
       01 FIELD2 PIC S9(03)V9(6).
       PROCEDURE DIVISION.
           
           move 0.00175 to FIELD1.
           compute RESULT = FIELD1 * 100
           DISPLAY "RESULT:   " RESULT
           DISPLAY "testfeld: " testfeld
           IF RESULT = testfeld
              DISPLAY "Ok"
            ELSE
              DISPLAY "failed"
           END-IF
           GOBACK.
])

AT_CHECK([$COMPILE -w prog.cob  ], [0], [], [])
AT_CHECK([./prog], [0],
[RESULT:   0.175000000000000017
testfeld: 0.175000000000000017
Ok
])
AT_CHECK([$COMPILE -O -w prog.cob  ], [0], [], [])
AT_CHECK([./prog], [0],
[RESULT:   0.175000000000000017
testfeld: 0.175000000000000017
Ok
])

AT_CLEANUP

AT_SETUP([DECIMAL OPTIMIZE: ROUNDED])

AT_DATA([prog.cob], [
       ID DIVISION.
       PROGRAM-ID. TCOMROUN.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.
       01  WS-GRP.
           05 WS-XXXXXXX-V             PIC S9(15) COMP-3
              VALUE ZERO.
           05 WS-XXXXXXX-E             PIC S9(15) COMP-3
              VALUE ZERO.
           05 WS-YYY-SUM               PIC S9(15) COMP-3
              VALUE 1.
           05 WS-ZZZ-SUM               PIC S9(15) COMP-3
              VALUE 2.
       01  B-GRP.
           15 B-PERCENT                PIC S9(3)V9(4) COMP-3
              VALUE 5,5.
           15 B-FIX                    PIC S9(15) COMP-3
              VALUE 4.
      *
       01  A-GRP.
           10 A-AMT                    PIC S9(15) COMP-3
              VALUE 100.
       01  UG-A COMP-2 VALUE 0.                                                 
       01      UG-H COMP-2 VALUE 0.
       01      UG-IAC COMP-2 VALUE 0.   
       *
       PROCEDURE DIVISION.
           COMPUTE WS-XXXXXXX-V          =  B-PERCENT *
                                            A-AMT
           COMPUTE WS-XXXXXXX-V  ROUNDED =  WS-XXXXXXX-V / 100 
           COMPUTE WS-XXXXXXX-E          = WS-XXXXXXX-V  + B-FIX
                                         + WS-YYY-SUM    + WS-ZZZ-SUM
           DISPLAY 'WS-XXXXXXX-V: ' WS-XXXXXXX-V
           DISPLAY 'WS-XXXXXXX-E: ' WS-XXXXXXX-E
             MOVE 16,035105929406832104 TO UG-A
           MOVE 0,214288795644601321 TO UG-H
           MOVE 0,345674579066613641 TO UG-IAC
           IF    UG-A = 0 OR 
                 (1  -  UG-H  -  UG-IAC ) = 0                          
               DISPLAY 'TRUE'
           ELSE
               DISPLAY 'FALSE'
           END-IF
          GOBACK.
        END PROGRAM TCOMROUN.
])

AT_CHECK([$COMPILE prog.cob  -w  ], [0], [], [])
AT_CHECK([./prog], [0],
[WS-XXXXXXX-V: +000000000000006
WS-XXXXXXX-E: +000000000000013
FALSE
])

AT_CHECK([$COMPILE prog.cob  -w -O ], [0], [], [])
AT_CHECK([./prog], [0],
[WS-XXXXXXX-V: +000000000000006
WS-XXXXXXX-E: +000000000000013
FALSE
])

AT_CLEANUP

AT_SETUP([DECIMAL OPTIMIZE: - int with Float])

AT_DATA([cit.conf], [
include "mf.conf"
Defaultbyte:00
use-defaultbyte:yes
perform-osvs:yes
binary-truncate:yes
binary-size:2-4-8
binary-byteorder:native
pretty-display:no
signed-comp6-as-comp3:yes
filename-mapping:yes
EC-BOUND-SUBSCRIPT:yes
move-picx-to-pic9:mvs
numeric-compare:yes
spzero:yes
EC-DATA-INCOMPATIBLE:no
line-seq-mf:yes
optional-file:no
round-fp:yes
source-location:yes
EC-BOUND-SUBSCRIPT:no
assign-clause:external
compute-ibm:yes
optimize-move:no
EC-SIZE-ZERO-DIVIDE:yes
])

AT_DATA([prog.cob], [
       ID DIVISION.
       PROGRAM-ID. TCOMROUN.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.
       01  UG-RAT PIC S9(8) COMP-5 VALUE 0.                                     
       01  UG-TFA COMP-2 VALUE 0.                                                                        
       01  UGP-N COMP-2.
       01  UG-TFA-PER COMP-2 VALUE 0.
       01  UG-AMI COMP-2 VALUE 0.
       01  UG-RENDITA COMP-2 VALUE 0.
           
       EJECT                                                        
      *                                                                 
       PROCEDURE DIVISION.   
           MOVE 0,149999999999999994 TO UG-TFA
           MOVE +0000000012 TO UG-RAT
           MOVE 0,750000000000000000 TO UGP-N         
           COMPUTE UG-TFA-PER = ( 1  +  UG-TFA ) **  ( 1  /  UG-RAT )  -        
            1 
           DISPLAY UG-TFA-PER                                                                   
           COMPUTE UG-AMI = ( 1  -  ( 1  +  UG-TFA ) **  (  -  UGP-N          
            ) )  /  UG-TFA-PER
           DISPLAY UG-AMI                                             
           COMPUTE UG-RENDITA = 1  /  UG-AMI        
           .
])

AT_CHECK([$COMPILE prog.cob -conf=cit.conf -w  ], [0], [], [])
AT_CHECK([./prog], [0],
[0.011714916919853380
8.494700978717810713
])

AT_CHECK([$COMPILE prog.cob -conf=cit.conf -w -O ], [0], [], [])
AT_CHECK([./prog], [0],
[0.011714916919853380
8.494700978717810713
])

AT_CLEANUP

AT_SETUP([EC-BOUND-REF-MOD + index-optimize])

AT_DATA([cit.conf], [
include "default.conf"
EC-BOUND-REF-MOD:yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. TESTPR10.
       ENVIRONMENT DIVISION.
       WORKING-STORAGE SECTION.
        
       01 W-START-POS                  PIC 9(03) VALUE 1.
       01 W-END-POS                    PIC 9(03) VALUE 16.
       01 W-START-FLD                  PIC X(32) VALUE "ABCDEF".
       01 W-END-FLD                    PIC X(96).
             
       PROCEDURE DIVISION.
       Main SECTION. 
       M-01.

           DISPLAY "W-START-POS: " W-START-POS
           DISPLAY "W-ANZ-NNAME1: " W-END-POS
           MOVE W-START-FLD(W-START-POS:W-END-POS)
             TO W-END-FLD(W-START-POS:W-END-POS)
           
           DISPLAY "ENDE".
       M-99.    
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -conf=cit.conf -findex-optimize  ], [0], [], [])
AT_CHECK([./prog], [0],
[W-START-POS: 001
W-ANZ-NNAME1: 016
ENDE
])

AT_CLEANUP

AT_SETUP([CONTINUATION LINE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.                      prog.
       DATE-WRITTEN.                    17.01.12.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.                 COMPAQ.
       OBJECT-COMPUTER.                 COMPAQ.
       SPECIAL-NAMES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

           
       01 ER2                COMP-2.
       01 Z15                PIC S9(13)V9(05) COMP-5 value 30.
       01 Z25                PIC S9(13)V9(05) COMP-5 value 3.
       01               WA00-ZN006     VALUE ZERO                       
                        PICTURE 9(6).         
       01                 ZL44.                                         
            11            ZL44-YLILIG PICTURE  X(80)                    
                          OCCURS       020     TIMES.                   
       PROCEDURE DIVISION.
       HAUPT-ENDE.
           STRING      WA00-ZN006 DELIMITED BY SIZE                     
      -                                 ' OPERATIONS ONT ETE MISES DANS 
      -    'LE FICHIER REJET.'   
           DELIMITED BY SIZE                                            
           INTO ZL44-YLILIG (3) .       
])

AT_CHECK([$COMPILE prog.cob  -fcontinuation-line ], [0], [], [])

AT_CLEANUP

AT_SETUP([DISPLAY UPON 2])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      *SPECIAL-NAMES.
      *    PRINTER IS PRINTER.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       DISPLAY "This is sent to CONSOLE" UPON CONSOLE.
       DISPLAY "This is sent to SYSERR" UPON SYSERR.
       DISPLAY "This is sent to PRINTER" UPON PRINTER.
       CALL "SUBDISP".
       DISPLAY "This is also sent to CONSOLE" UPON CONSOLE.
       DISPLAY "This is also sent to SYSERR" UPON SYSERR.
       DISPLAY "This is also sent to PRINTER" UPON PRINTER.
       STOP RUN RETURNING 0.
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. SUBDISP.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       DISPLAY "This is sub sent to CONSOLESUB" UPON CONSOLE.
       DISPLAY "This is sub sent to SYSERRSUB" UPON SYSERR.
       DISPLAY "This is sub sent to PRINTERSUB" UPON PRINTER.
       EXIT PROGRAM.                                      
                
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([export COB_DISPLAY_PRINTER='prt.log' 
./prog], [0], [This is sent to CONSOLE
This is sub sent to CONSOLESUB
This is also sent to CONSOLE
], [This is sent to SYSERR
This is sub sent to SYSERRSUB
This is also sent to SYSERR
])

AT_CAPTURE_FILE(./prt.log)

AT_DATA([reference], [This is sent to PRINTER
This is sub sent to PRINTERSUB
This is also sent to PRINTER
])

AT_CLEANUP


AT_SETUP([INDEX/DECIMAL OPTIMIZE: MODIFIED ELT INSIDE IF ELSE: TEST ONE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .

       PROGRAM-ID .   prog .
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
	    INPUT-OUTPUT SECTION .
       WORKING-STORAGE SECTION.
       01           WS-CAMPI-NUOVI.
            02         IDX2             PIC 9(4) value 5.
            02         IDX3             PIC 9(4) value 1.
            02         WS-MIN-USCMA           PIC 9(4).
            02         IDX5             PIC 9(4) value 2.
            02         IDX6             PIC 9(4) value 1.
            02         WS-01-INU             PIC 9(4) value 1.
            02         WS-01-INE             PIC 9(4).
           02         WS-MIN-INE             PIC 9(4).
           02         WS-MIN-INEMA           PIC 9(4).
           02         WS-MIN-INUMA           PIC 9(4).
           02       IDX4          PIC 9(04) value 1.
           02         WS-MIN-INU             PIC 9(4).

       01         WS-ACC-TAB.
         02       WS-ACC-EL    OCCURS    20.
           10     WS-ACC-NUM.
             15     WS-ACC-EMI             PIC 9(4).
             15     WS-ACC-UMI             PIC 9(4).
             15     WS-ACC-IAE             PIC 9(2).
             15     WS-ACC-IAU             PIC 9(2).
           10     WS-ACC-ALFA.
             15     WS-ACC-PRO             PIC X.

       01   NEWVAR                         PIC 9(4) value 0.
       01   NEWVAR1                         PIC 9(4) value 0.
       01   NEWVAR2                         PIC 9(4) value 0.

       01       IDX1            PIC S9(6).
       01         ORA-ORE-MIN.
           05       HOUR1                     PIC 9(02) value 0.
           05       HOUR2                    PIC 9(02) value 1.
           05       ORA-T-A-MIN                    PIC 9(02) value 1.
           05       ORA-T-A-HH                     PIC 9(02) value 1.

       01             CAL8            PIC S9(4).
       01             CAL9            PIC S9(4).
       01       WS-TIM-EL   .
        02      WS-TIM-EX  OCCURS    40. 
         10     WS-TIM-NUM.
          15     WS-TIM-KEY.
            20   WS-TIM-DATA.
              25 WS-TIM-AA              PIC 9(4).
              25 WS-TIM-MM              PIC 99.
              25 WS-TIM-GG              PIC 99.
            20   WS-TIM-ORA.
              25 WS-TIM-HH              PIC 99.
              25 WS-TIM-MIN             PIC 99.
          15     WS-TIM-MMM             PIC 9(4).
         10     WS-TIM-ALFA.
          15     WS-TIM-VER             PIC X.
          15     WS-TIM-LID             PIC X(6).
          15     WS-TIM-PFK             PIC X(3).
          15     WS-TIM-PRD             PIC X.
          15     WS-TIM-PRO             PIC X.
       PROCEDURE DIVISION.
           COMPUTE  IDX1  =  IDX2  -  IDX3  -
                                    IDX4                -
                                  ( HOUR1 * 60 + HOUR2 ).
           DISPLAY IDX1.

           IF       CAL8 = ( ORA-T-A-HH * 60 + ORA-T-A-MIN )
                    MOVE ZERO          TO  IDX1.

           IF       CAL8  GREATER  WS-MIN-USCMA
                    MOVE  ZERO         TO  IDX1.
           IF      IDX5  GREATER  ZERO  AND
                   IDX6  GREATER  ZERO  AND
                   WS-01-INU  GREATER  ZERO

                   IF   WS-ACC-IAU (IDX5) EQUAL  ZERO  AND
                        WS-ACC-IAE (IDX6) EQUAL  ZERO
                    AND WS-ACC-PRO (IDX6) NOT EQUAL "I" 
                        ADD   IDX4
                              WS-01-INU      GIVING  WS-01-INE
                        DISPLAY "WS-01-INE " WS-01-INE
                        MOVE  WS-01-INE         TO   WS-MIN-INE
                                                     WS-MIN-INEMA
                        MOVE  WS-01-INE    TO   WS-ACC-EMI (IDX6)
                        MOVE  WS-MIN-INU        TO   WS-MIN-INUMA
      *                  GO                      TO   C036-END
                   ELSE
                        MOVE WS-ACC-IAU (IDX5) TO CAL8
                        MOVE WS-ACC-IAE (IDX6) TO CAL9
                        IF   CAL8  GREATER  ZERO  AND
                             CAL9  GREATER  ZERO
                             IF  WS-TIM-PRO (CAL8) EQUAL "U" 
                             AND WS-TIM-PRO (CAL9) EQUAL "E" 
                                 ADD   IDX4
                                       WS-01-INU  GIVING WS-01-INE
                                 DISPLAY "WS-01-INE " WS-01-INE
                                 MOVE WS-01-INE TO WS-ACC-IAU(NEWVAR).
           COMPUTE  IDX1  =  IDX2  -  IDX3  -
                                    IDX4                -
                                  ( HOUR1 * 60 + HOUR2 ) + NEWVAR1
                                   + NEWVAR2.
          DISPLAY IDX1.

       C036-END.
           EXIT.
])

AT_CHECK([$COMPILE prog.cob -w], [0], [], [])
AT_CHECK([./prog], [0],
[+000002
WS-01-INE 0002
+000002
])

AT_CLEANUP

AT_SETUP([INDEX/DECIMAL OPTIMIZE: MODIFIED ELT INSIDE IF ELSE: TEST TWO])

AT_DATA([myconf.conf],[
include "default.conf"
decimal-optimize:yes
index-optimize:yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .

       PROGRAM-ID .   prog .
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
	    INPUT-OUTPUT SECTION .
       WORKING-STORAGE SECTION.
       01           RESULT           PIC 9(10)
       01           CPT              PIC 9(2) value 1.
       01           INDEX-NUM.
            02       IDX1            PIC 9(4) value 1.
            02       IDX2            PIC 9(4) value 2.
            02       IDX3            PIC 9(4) value 3.
            02       IDX4            PIC 9(4) value 4.
            02       IDX5            PIC 9(4) value 5.


       01  TABLE-ONE                     VALUE "HELLO".
           05 TBL OCCURS 5 TIMES   PIC X.
 

       01   NEWVAR                         PIC 9(4) value 0.
       01   NEWVAR1                         PIC 9(4) value 0.
       01   NEWVAR2                         PIC 9(4) value 0.
       PROCEDURE DIVISION.


           PERFORM INIT varying CPT from 1 by 1 until CPT = 6
           STOP RUN.
        INIT.
           COMPUTE RESULT =  IDX1  +  IDX2 + IDX3  +  IDX4 + IDX5.
           DISPLAY RESULT.
            DISPLAY "BEGIN PERFOME".
           IF   TBL (IDX1) EQUAL  "H"
                MOVE "G" TO TBL(IDX1)
                ADD 1  TO IDX1

                IF TBL(IDX4) EQUAL "L"
                    MOVE "O" TO TBL(IDX4)
                    ADD 1  TO IDX4

                ELSE
                    IF TBL(IDX2) EQUAL "E"
                        MOVE "K" TO TBL(IDX2)
                        ADD 1 TO IDX2
                        COMPUTE IDX3 = 1 + IDX2

                        MOVE "Y" TO TBL(IDX5)

                    ELSE
                        MOVE "P" TO TBL(IDX4)
            ELSE
                MOVE "HELLO" TO TABLE-ONE
                MOVE 1 TO IDX1.
               
           DISPLAY "IDX1: " IDX1 " TBL(IDX1) " TBL(IDX1).                               
           DISPLAY "IDX2: " IDX2 " TBL(IDX2) " TBL(IDX2).  
           DISPLAY "IDX3: " IDX3 " TBL(IDX3) " TBL(IDX3).
           DISPLAY "IDX4: " IDX4 " TBL(IDX4) " TBL(IDX4).  
           DISPLAY "IDX5: " IDX5 " TBL(IDX5) " TBL(IDX5).  
           DISPLAY TABLE-ONE.
           COMPUTE RESULT =  IDX1  +  IDX2 + IDX3  +  IDX4 + IDX5.
           DISPLAY RESULT.
])

AT_CHECK([$COMPILE prog.cob -conf=myconf.conf], [0], [], [])
AT_CHECK([./prog], [0],
[0000000015
BEGIN PERFOME
IDX1: 0002 TBL(IDX1) E
IDX2: 0002 TBL(IDX2) E
IDX3: 0003 TBL(IDX3) L
IDX4: 0005 TBL(IDX4) O
IDX5: 0005 TBL(IDX5) O
GELOO
0000000017
0000000017
BEGIN PERFOME
IDX1: 0001 TBL(IDX1) H
IDX2: 0002 TBL(IDX2) E
IDX3: 0003 TBL(IDX3) L
IDX4: 0005 TBL(IDX4) O
IDX5: 0005 TBL(IDX5) O
HELLO
0000000016
0000000016
BEGIN PERFOME
IDX1: 0002 TBL(IDX1) K
IDX2: 0003 TBL(IDX2) L
IDX3: 0004 TBL(IDX3) L
IDX4: 0005 TBL(IDX4) Y
IDX5: 0005 TBL(IDX5) Y
GKLLY
0000000019
0000000019
BEGIN PERFOME
IDX1: 0001 TBL(IDX1) H
IDX2: 0003 TBL(IDX2) L
IDX3: 0004 TBL(IDX3) L
IDX4: 0005 TBL(IDX4) O
IDX5: 0005 TBL(IDX5) O
HELLO
0000000018
0000000018
BEGIN PERFOME
IDX1: 0002 TBL(IDX1) E
IDX2: 0003 TBL(IDX2) L
IDX3: 0004 TBL(IDX3) L
IDX4: 0005 TBL(IDX4) P
IDX5: 0005 TBL(IDX5) P
GELLP
0000000019
])

AT_CLEANUP

AT_SETUP([CALL/CANCEL Upper/Lower Case])

AT_DATA([myconf.conf],[
include "default.conf"
full-cancel: yes
obj-cit:yes
])

AT_DATA([fb1140.cob],[
      *-----------------------------------------------------------------*
       IDENTIFICATION DIVISION.
       PROGRAM-ID.                      fb1140.
      *-----------------------------------------------------------------*
       DATE-WRITTEN.                    04.12.2015.
      *-----------------------------------------------------------------*
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.                 COMPAQ.
       OBJECT-COMPUTER.                 COMPAQ.
      *-----------------------------------------------------------------*
       DATA DIVISION.
      *-----------------------------------------------------------------*
       WORKING-STORAGE SECTION.
      *-----------------------------------------------------------------*
      *-----------------------------------------------------------------*
       LINKAGE SECTION.
      *-----------------------------------------------------------------*
       PROCEDURE DIVISION.
      *-----------------------------------------------------------------*
       HAUPT.
           DISPLAY "fb1140"
           .
      *-----------------------------------------------------------------*
])

AT_DATA([prog.cob],[
      *-----------------------------------------------------------------*
       IDENTIFICATION DIVISION.
       PROGRAM-ID.                      prog.
      *-----------------------------------------------------------------*
       DATA DIVISION.
      *-----------------------------------------------------------------*
       WORKING-STORAGE SECTION.
      *-----------------------------------------------------------------*
      *-----------------------------------------------------------------*
       LINKAGE SECTION.
      *-----------------------------------------------------------------*
       PROCEDURE DIVISION.
      *-----------------------------------------------------------------*
       HAUPT.
           DISPLAY "CALL LOWER"          
           CALL "fb1140"
           DISPLAY "CANCEL LOWER"          
           CANCEL "fb1140"
           DISPLAY "CALL LOWER"          
           CALL "fb1140"
           DISPLAY "CANCEL UPPER"          
           CANCEL "FB1140"
      *     DISPLAY "CALL UPPER"          
      *     CALL "FB1140"
      *     DISPLAY "CANCEL LOWER"          
      *     CANCEL "fb1140"
      *     DISPLAY "CALL UPPER"          
      *     CALL "FB1140"
      *     DISPLAY "CANCEL UPPER"          
      *     CANCEL "FB1140"
           DISPLAY "CALL LOWER"          
           CALL "fb1140"
           DISPLAY "CALL UPPER"          
           CALL "FB1140"
           DISPLAY "CANCEL LOWER"          
           CANCEL "fb1140"
           DISPLAY "CANCEL UPPER"          
           CANCEL "FB1140"
           .
      *-----------------------------------------------------------------*
])

AT_CHECK([$COMPILE_MODULE fb1140.cob -conf=myconf.conf ], [0], [], [])
AT_CHECK([$COMPILE prog.cob -conf=myconf.conf], [0], [], [])
AT_CHECK([export COB_DEBUG_CALL=1 && ./prog], [0],
[CALL LOWER
CALL try a file :./fb1140.cit:
CALL file exist :./fb1140.cit:
CALL Looking file :./fb1140.cit:
CALL Looking file :./fb1140.cit: Found
CALL Try load  :./fb1140.cit:
CALL Try symbol  :fb1140:
CALL symbol :fb1140: found
fb1140
CANCEL LOWER

CALL cob_cancel fb1140
CALL cob_cancel Module Found :fb1140: Call cancel
     cob_cancel close handle
CALL LOWER
CALL try a file :./fb1140.cit:
CALL file exist :./fb1140.cit:
CALL Looking file :./fb1140.cit:
CALL Looking file :./fb1140.cit: Found
CALL Try load  :./fb1140.cit:
CALL Try symbol  :fb1140:
CALL symbol :fb1140: found
fb1140
CANCEL UPPER

CALL cob_cancel FB1140
CALL cob_cancel Module Found :FB1140: Call cancel
     cob_cancel close handle
CALL LOWER
CALL try a file :./fb1140.cit:
CALL file exist :./fb1140.cit:
CALL Looking file :./fb1140.cit:
CALL Looking file :./fb1140.cit: Found
CALL Try load  :./fb1140.cit:
CALL Try symbol  :fb1140:
CALL symbol :fb1140: found
fb1140
CALL UPPER
CALL Found in memory  :FB1140:
fb1140
CANCEL LOWER

CALL cob_cancel fb1140
CALL cob_cancel Module Found :fb1140: Call cancel
     cob_cancel close handle
CANCEL UPPER

CALL cob_cancel FB1140
])

AT_CLEANUP

AT_SETUP([PERFORM UNTIL])

AT_DATA([prog.cob],[
       ID DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.
       
       01  W-V-AUS-ERROR-DATA.
ee-        05 W-V-ERR-IDX              PIC S9(04) COMP-3.
ee+   *    05 W-V-ERR-IDX              PIC S9(04).
           05 W-V-AUS-ERROR-TABLE OCCURS 10.
              10 W-V-ERROR-NBR         PIC S9(05) COMP-3 VALUE 0.
              10 W-V-ERROR-TEXT        PIC X(40).
              10 W-V-ERROR-PROGRAMM    PIC X(08).
       01  C2A PIC 9999.
       01  C2B PIC 9999
       PROCEDURE DIVISION.
       
           MOVE 1                         TO W-V-ERR-IDX
           MOVE 1                         TO W-V-ERROR-NBR (W-V-ERR-IDX)
       
           IF W-V-ERROR-NBR (W-V-ERR-IDX) NOT = ZERO
              COMPUTE C2A = C2B + 10
              MOVE 2 TO C2B
              PERFORM UNTIL W-V-ERROR-NBR (W-V-ERR-IDX) = ZERO
                         OR W-V-ERR-IDX > 5
ee-   *          DISPLAY 'INDEX IN    THE LOOP: ' W-V-ERR-IDX
                 COMPUTE C2A = C2B + 10
                 if W-V-ERR-IDX = 1
                    COMPUTE C2A = C2A + 10
                    display "-->ee: TESTZERO - ok"
                 else
                    display "-->ee: TESTZERO - failed"
                 end-if
                 ADD 1                        TO  W-V-ERR-IDX
              END-PERFORM
ee-   *       DISPLAY   'INDEX AFTER THE LOOP: ' W-V-ERR-IDX
              if W-V-ERR-IDX = 2
                 display "-->ee: TESTZERO - ok"
              else
                 display "-->ee: TESTZERO - failed"
              end-if
           END-IF
           DISPLAY C2A
           GOBACK.
           .
])
AT_CHECK([$COMPILE -w prog.cob ], [0])
AT_CHECK([./prog], [0], 
[-->ee: TESTZERO - ok
-->ee: TESTZERO - ok
0022
])
AT_CHECK([$COMPILE -w prog.cob -O], [0]) 
AT_CHECK([./prog], [0], 
[-->ee: TESTZERO - ok
-->ee: TESTZERO - ok
0022
])

AT_CLEANUP

AT_SETUP([PROGRAM-ID INITIAL])

AT_DATA([CBLHELO.cob],[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CBLHELO INITIAL. 
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01 WS-VARIABLE   PIC X(1) VALUE 'Y'.

       PROCEDURE DIVISION.
           DISPLAY WS-VARIABLE
           MOVE 'N' TO WS-VARIABLE
           GOBACK.
])

AT_DATA([CBLHELO2.cob],[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CBLHELO. 
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01 WS-VARIABLE   PIC X(1) VALUE 'Y'.

       PROCEDURE DIVISION.
           DISPLAY WS-VARIABLE
           MOVE 'N' TO WS-VARIABLE
           GOBACK.
])

AT_DATA([prog.cob],[
       IDENTIFICATION DIVISION.                    
       PROGRAM-ID.    WSTVAL INITIAL.                    
       AUTHOR.        MW.                          
       DATA DIVISION.                              
       WORKING-STORAGE SECTION.                    
       01 OUT-BUF  PIC X(80) VALUE SPACES.                      
       LINKAGE SECTION.
       01 COMMAREA   PIC X(80).

       Procedure Division .
           DISPLAY "FIRST TIME"
           CALL "CBLHELO".
           DISPLAY "SECOND TIME"
           CALL "CBLHELO".
           GOBACK.
])

AT_CHECK([$COMPILE -w prog.cob CBLHELO.cob], [0])
AT_CHECK([./prog], [0], 
[FIRST TIME
Y
SECOND TIME
Y
])

AT_CHECK([$COMPILE -w prog.cob CBLHELO2.cob], [0])
AT_CHECK([./prog], [0], 
[FIRST TIME
Y
SECOND TIME
N
])


AT_CLEANUP

AT_SETUP([HEXADECIMAL ONE LITERAL FOR TAB])

AT_DATA([prog.cob],[
        identification division.
        program-id. testx9.
        environment division.
        configuration section.
        source-computer. hp-9000.
        object-computer. hp-9000.
        special-names.
        decimal-point is comma.
        input-output section.
        data division.
        file section.

        working-storage section.
        01 wk-group.
        02 wk-before pic x(5) value 'Hello'.
        02 wk-tab pic x(1) value '@'.
        02 wk-after pic x(5) value 'World'.
        01 wk-string redefines wk-group pic x(11).

        procedure division.
        move x'9' TO wk-tab.
        display 'wk-string=' wk-string.
        move x'09' TO wk-tab.
        display 'wk-string=' wk-string.
])

AT_CHECK([$COMPILE prog.cob ], [0])
AT_CHECK([./prog | od -t x1c ], [0], 
[0000000  77  6b  2d  73  74  72  69  6e  67  3d  48  65  6c  6c  6f  09
          w   k   -   s   t   r   i   n   g   =   H   e   l   l   o  \t
0000020  57  6f  72  6c  64  0a  77  6b  2d  73  74  72  69  6e  67  3d
          W   o   r   l   d  \n   w   k   -   s   t   r   i   n   g   =
0000040  48  65  6c  6c  6f  09  57  6f  72  6c  64  0a
          H   e   l   l   o  \t   W   o   r   l   d  \n
0000054
])

AT_CLEANUP

AT_SETUP([INITIALIZE-OPT for NESTED PROGRAMS])

AT_DATA([prog.cob],[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       WORKING-STORAGE SECTION.
       77  WDSPLY-LINE                   PIC X(60)      VALUE SPACES.
       77  WDISP-SECS                    PIC ---9.99    VALUE ZERO.
       01  TCNT-AREA.
           05  TCNT-INIT-TBL           PIC S9(9) BINARY VALUE    2.
           05  TCNT-INIT-TBL-SUB       PIC S9(9) BINARY VALUE    2.
           05  TCNT-INIT-RECS          PIC S9(9) BINARY VALUE   2.
       01  WTIME                     PIC 9(8)            VALUE 0.
       01  LIT-WTBL-ENTRIES              PIC S9(4) BINARY VALUE +2.
       01  SUB-AREA.
           05  SUB-WTBL                  PIC S9(4)   BINARY  VALUE +0.
       01  WTBL-AREA.
           05  WTBL-ENTRY  OCCURS 2.
               10  WTBL-CASH-1           PIC S9(9)V99  COMP-3.
               10  WTBL-SHRS-1           PIC S9(9)V9(6)  COMP-3.
               10  WTBL-FLAG-1           PIC X.
       01  BMA-AREA.
           05  BMA-TEST-INFO.
               10  BMA-TEST-NAME        PIC X(40)  VALUE SPACES.
           05  BMA-RUN-TIMES.
               10  BMA-RUN-START-TIME    PIC 9(8)          VALUE 0.
               10  BMA-RUN-END-TIME      PIC 9(8)          VALUE 0.
           05  BMA-TEST-TIMES.
               10  BMA-TEST-START-TIME   PIC 9(8)             VALUE 0.
               10  BMA-TEST-END-TIME     PIC 9(8)             VALUE 0.
       01  PL-REC.
           10  PL-KEY.                                                  
               15  PL-PLAN-NUM.                                         
                   20  PL-PL-PREFIX        PIC  X.                      
                   20  PL-PL-SUFFIX        PIC  X(5).                   
           10  PL-DATA.                                                 
                   20  PL-FREEZE-STATUS    PIC X.                       
                   20  PL-NAME.                                         
DE902                  25  PL-NAME-1       PIC  X(32).                  
DE906                  25  PL-NAME-2       PIC  X(32).                  
       01  PF-REC.
           12  PF-KEY.
DE006          15  PF-PLAN-NUM           pic x(6).
DE007          15  PF-PART-ID            PIC 9(9).
DE008          15  PF-FUND-ID            pic x(3).
           12  PF-DATA.
DE052          15  PF-INS-POLICY-ISS-DATE-X  PIC X(8).
D               15  PF-PDFS.
DE600-             20  PF-PDF-DOLLAR   OCCURS 2 TIMES
DE626                                      PIC S9(9)V99    COMP-3.
11416S         15  PF-UDF-AMTS.
DE627-             20  PF-UDF-AMT      OCCURS 2 TIMES
DE636                                      PIC S9(11)V9(4)  COMP-3.
25083F         15  FILLER                     PIC X(36).
       01  PH-REC.
           05  PH-KEY.
               10  PH-PLAN-NUM                 PIC X(6).
               10  PH-FUND-ID           pic x(3).
           05  PH-DATA.
19521S         10  PH-NAME                     PIC X(30).
DE015          10  PH-EMPL-NUM                 PIC X(13).
DE600-         10  PH-UDF-CASH-TBL.
DE611              15  PH-UDF-CASH OCCURS 2 TIMES PIC S9(9)V99 COMP-3.
DE650-         10  FILLER.
DE654              15  PH-UDF-CODE OCCURS 2 TIMES PIC S9 COMP-3.
24564F         10  FILLER                     PIC X(106).
       PROCEDURE DIVISION.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-START-TIME.
           STRING 'Beginning BENCHMARK test RUN: ' WTIME
               DELIMITED BY SIZE INTO WDSPLY-LINE.
      *     DISPLAY 'BENCH00L-' WDSPLY-LINE.
           INITIALIZE WDSPLY-LINE.
           PERFORM C-900-INIT-TBL.
           PERFORM C-1000-INIT-TBL-SUB.
           PERFORM C-1100-INIT-RECS.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-END-TIME.
           STRING 'Ending BENCHMARK Test RUN: ' WTIME
               DELIMITED BY SIZE INTO WDSPLY-LINE.
      *     DISPLAY 'BENCH00L-' WDSPLY-LINE.
           INITIALIZE WDSPLY-LINE.
           MOVE 'Test Suite Run Time: '  TO BMA-TEST-NAME.
           MOVE BMA-RUN-START-TIME       TO BMA-TEST-START-TIME.
           MOVE BMA-RUN-END-TIME         TO BMA-TEST-END-TIME.
           GOBACK.
       C-900-INIT-TBL.
           MOVE '  INITIALIZE a Table'   TO BMA-TEST-NAME.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-START-TIME.
		   string bma-test-name 'START ' bma-run-start-time
		       delimited by size into wdsply-line.
      *		   display wdsply-line
           PERFORM C-910-INIT-LOOP TCNT-INIT-TBL TIMES.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-END-TIME.
		   string bma-test-name 'END ' bma-run-end-time 
		       delimited by size
		       into wdsply-line.
      *		   display wdsply-line .
       C-910-INIT-LOOP.
           INITIALIZE WTBL-AREA.
    *** Add this line to try to  defeat code optimization
           ADD 1 TO WTBL-CASH-1 (1).
       C-1000-INIT-TBL-SUB.
           MOVE '  INITIALIZE TableEntries'  TO BMA-TEST-NAME.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-START-TIME.
		   string bma-test-name 'START ' bma-run-start-time
		       delimited by size
		       into wdsply-line.
      *		   display wdsply-line
           PERFORM C-1025-LOOP TCNT-INIT-TBL-SUB TIMES.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-END-TIME.
		   string bma-test-name 'END ' bma-run-end-time
		       delimited by size
		       into wdsply-line.
      *	 	   display wdsply-line.
       C-1025-LOOP.
           PERFORM C-1050-INITIALIZE
              VARYING SUB-WTBL FROM 1 BY 1
                UNTIL SUB-WTBL > LIT-WTBL-ENTRIES.
       C-1050-INITIALIZE.
           INITIALIZE WTBL-ENTRY (SUB-WTBL).
       C-1100-INIT-RECS.
           MOVE '  INITIALIZE RecAreas'  TO BMA-TEST-NAME.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-START-TIME.
		   string bma-test-name 'START ' bma-run-start-time
		       delimited by size
		       into wdsply-line.
      *		   display wdsply-line
           PERFORM C-1110-INIT-LOOP TCNT-INIT-RECS TIMES.
           ACCEPT WTIME FROM TIME.
           MOVE WTIME                  TO BMA-RUN-END-TIME.
		   string bma-test-name 'END ' bma-run-end-time
		       delimited by size
		       into wdsply-line.
      *		   display wdsply-line.
       C-1110-INIT-LOOP.
           INITIALIZE PF-REC.
           INITIALIZE PL-REC.
           INITIALIZE PH-REC.
       identification division.
       program-id. 'UTTMGETT' is common.
       data division.
       working-storage section.
       01  wcurrent-text.
           05  wcurrent-date         pic 9(8)     value zero.
           05  wcurrent-time         pic 9(8)     value zero.
           05  filler redefines wcurrent-time.
               10  wcurrent-hh       pic 99.
               10  wcurrent-mm       pic 99.
               10  wcurrent-ss       pic 99.
               10  wcurrent-hund     pic v99.
      *    skip3
       linkage section.
       01  prm-time            pic   x(8).
       procedure division using prm-time.
           move function current-date   to wcurrent-text.
           move wcurrent-time           to prm-time.
           goback.
       end program 'UTTMGETT'.
       END PROGRAM 'prog'.

])

AT_CHECK([$COMPILE  -w -conf=mf.conf -O -finitialize-opt prog.cob ], [0])
AT_CHECK([./prog])

AT_CLEANUP

AT_SETUP([DECIMAL OPTIMIZE PERFORM INSIDE IF])

AT_DATA([prog.cob],[
       ID DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01  W-V-VARIABLES-GRP.
           05 W-V-VAR01 PIC S9(03)V9(06) COMP-3 VALUE 0,02838.
           05 W-V-VAR02 PIC S9(09)V9(09) COMP-3 VALUE 1,3585.
           05 W-V-VAR03 PIC  X(03)              VALUE 'XXX'.
           05 W-V-VAR04 PIC S9(09)       COMP   VALUE 2.
           05 W-V-VAR05 PIC S9(09)V9(09) COMP-3 VALUE ZERO.
           05 W-V-VAR06 PIC  9(01)              VALUE 6.
           05 W-V-VAR07 PIC S9(11)V9(06) COMP-3 VALUE 0,113903.
           05 W-V-VAR08 PIC S9(11)V9(06) COMP-3 VALUE ZERO.
           05 W-V-VAR09 PIC S9(15)V      COMP-3 VALUE 40135.
           05 W-V-VAR10 PIC S9(09)V      COMP   VALUE 2.
           05 W-V-VAR11 PIC  X(03)              VALUE 'YYY'.
           05 W-V-VAR12 PIC S9(15)       COMP   VALUE 55499651.
           05 W-V-VAR13 PIC  9(01)              VALUE 2.

       PROCEDURE DIVISION.

       MAIN-PROC SECTION.
           COMPUTE W-V-VAR07 ROUNDED
             = (W-V-VAR09 * (10 ** (-1 * W-V-VAR10))
             *  W-V-VAR01 /  100)

           IF W-V-VAR02 = ZERO
              MOVE ZERO TO W-V-VAR08
           ELSE
              IF W-V-VAR03 NOT = W-V-VAR11
                 PERFORM SUB-CALC
              END-IF

              COMPUTE W-V-VAR08 ROUNDED
                = (W-V-VAR05 * (10 ** (-1 * W-V-VAR04)))
              DISPLAY 'RESULT=' W-V-VAR08
           END-IF

           GOBACK.

       SUB-CALC SECTION.
           COMPUTE W-V-VAR05 ROUNDED
             = W-V-VAR12 / (10 ** (W-V-VAR06 - W-V-VAR13 + W-V-VAR10))

           EXIT.

       END PROGRAM prog.
])

AT_CHECK([$COMPILE -O prog.cob ], [0])
AT_CHECK([./prog], [0], 
[RESULT=+00000000000,554997
])

AT_CLEANUP


AT_SETUP([LINAGE: EOP])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      *****************************************************************
      * This program is provided for demonstration
      * and educational purposes
      * only by Ryan McFarland Corporation (a division
      * of Liant Software).
      * It is neither supported nor warranted by Ryan
      * McFarland Corporation.
      * (c) 1992, 1995 Ryan McFarland Corporation.  All
      * rights reserved.
      *****************************************************************
       PROGRAM-ID. LINAGE1.
      * THIS PROGRAM TESTS THE WRITE STATEMENT WITH THE
      * LINAGE OPTION
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT PRINT-FILE ASSIGN TO "report.txt".
       DATA DIVISION.
       FILE SECTION.
       FD PRINT-FILE
           LINAGE IS 30 LINES
           WITH FOOTING AT 20
           LINES AT TOP MARGIN-AMOUNT
           LINES AT BOTTOM 5.
       01 PRINT-RECORD         PIC X(80).
       WORKING-STORAGE SECTION.
       77 MARGIN-AMOUNT    PIC 99 VALUE 5.
       77 PG-COUNT         PIC 99 VALUE ZEROS.
       77 FILE-NAME         PIC X(12).
       01 DETAIL-LINE.
           05 FILLER       PIC X(10) VALUE SPACES.
           05 FILLER       PIC X(30) VALUE
               "THIS REPRESENTS A DETAIL LINE".
       01 DETAIL-LINE-PLUS-10.
           05 FILLER       PIC X(80) VALUE
           "THIS LINE SHOULD BE 10 LINES FROM THE LAST LINE PRINTED".
       01 DETAIL-LINE-PLUS-4.
           05 FILLER       PIC X(80) VALUE
           "THIS LINE SHOULD BE 4 LINES FROM THE LAST LINE PRINTED".
       01 LAST-LINE.
           05 FILLER       PIC X(80) VALUE
           "THIS LINE SHOULD BE RIGHT BEFORE THE FOOTING".
       01 FOOTING-LINE.
           05 FILLER       PIC X(40) VALUE SPACES.
           05 FILLER       PIC X(40) VALUE
           "THIS REPRESENTS A FOOTING".
       01 TEST-HEADING.
           05 FILLER       PIC X(28) VALUE SPACES.
           05 FILLER       PIC X(25) VALUE
           "THIS REPRESENTS A HEADING".
           05 FILLER       PIC X(10) VALUE SPACES.
           05 FILLER       PIC X(5)  VALUE "PAGE ".
           05 PG-COUNT-OUT PIC Z9.
       01 TIME-AND-DATE.
           05 CURRENT-DATE.
               10  YY      PIC XX.
               10  MM      PIC XX.
               10  DD      PIC XX.
           05 CURRENT-TIME.
               10  HH      PIC XX.
               10  MN      PIC XX.
               10  SS      PIC XX.
       01 HEADING-1.
           05 FILLER       PIC X(27) VALUE SPACES.
           05 FILLER       PIC X(26) VALUE
               "LIANT SOFTWARE CORPORATION".
           05 FILLER       PIC X(21) VALUE SPACES.
           05 FILLER       PIC X(6)  VALUE "PAGE 1".
       01 HEADING-2.
           05 FILLER       PIC X(27) VALUE SPACES.
           05 FILLER       PIC X(26) VALUE
               "  RUNTIME - LINAGE TEST   ".
       01 DESCRIP-LINE.
           05 FILLER       PIC X(57) VALUE
           "FPRINT3B - TEST FOR THE WRITE VERB WITH LINAGE OPTION   ".
       01 TIME-DATE-LINE.
           05 FILLER       PIC X(6) VALUE "DATE: ".
           05 MM           PIC XX.
           05 SLASH-1      PIC X VALUE "/".
           05 DD           PIC XX.
           05 SLASH-2      PIC X VALUE "/".
           05 YY           PIC XX.
           05 FILLER       PIC X(14) VALUE "   RUN-TIME:  ".
           05 HH           PIC XX.
           05 DIV-1        PIC X VALUE ":".
           05 MN           PIC XX.
           05 DIV-2        PIC X VALUE ":".
           05 SS           PIC XX.
       PROCEDURE DIVISION.
       0001-CONTROL-MODULE.
            OPEN     OUTPUT PRINT-FILE. 
           PERFORM 3000-PRINT-HEADING.
           PERFORM 1000-TEST-LINAGE.
           PERFORM 4000-WRAP-UP-SUMMARY.
           STOP RUN.
       1000-TEST-LINAGE.
           PERFORM 1200-TOP-OF-PAGE.
           PERFORM 1400-WRITE-DETAIL
               UNTIL PG-COUNT > 3.

       1200-TOP-OF-PAGE.
      *THIS PARAGRAPH WILL TAKE THE PRINTER TO THE TOP OF A NEW PAGE*
      *THE END-WRITE AND END-IF SCOPE DELIMITERS ARE ALSO TESTED.
           ADD 1 TO PG-COUNT.
           MOVE PG-COUNT TO PG-COUNT-OUT.
           IF PG-COUNT-OUT < 4
               THEN WRITE PRINT-RECORD FROM TEST-HEADING AFTER PAGE
                    END-WRITE
           END-IF.
       1400-WRITE-DETAIL.
      *THIS PARAGRAPH TESTS THE FOOTING OPTION OF THE LINAGE CLAUSE.
      *THE AT END-OF-PAGE CONDITION IS TESTED. ALSO THE END-WRITE SCOPE DELIMITER
      *IS TESTED.
           WRITE PRINT-RECORD FROM DETAIL-LINE
           AT END-OF-PAGE
                   WRITE PRINT-RECORD FROM FOOTING-LINE
                       AFTER ADVANCING 3 LINES
                   END-WRITE
                   PERFORM 1200-TOP-OF-PAGE
           END-WRITE.
       3000-PRINT-HEADING.
           WRITE PRINT-RECORD FROM HEADING-1 .
           WRITE PRINT-RECORD FROM HEADING-2 AFTER 1 LINES.
           WRITE PRINT-RECORD FROM DESCRIP-LINE AFTER 2 LINES.
           WRITE PRINT-RECORD FROM TIME-DATE-LINE AFTER 2 LINES.
       4000-WRAP-UP-SUMMARY.
           CLOSE PRINT-FILE.
       END PROGRAM.
])



AT_CHECK([${COMPILE} -o prog prog.cob ], [0])
AT_CHECK([./prog], [0])
AT_CHECK([od -a report.txt], [0], 
[0000000  nl  nl  nl  nl  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000020  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000120  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000140  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000160  sp  sp   L   I   A   N   T  sp   S   O   F   T   W   A   R   E
0000200  sp   C   O   R   P   O   R   A   T   I   O   N  sp  sp  sp  sp
0000220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000240  sp   P   A   G   E  sp   1  cr  nl  sp  sp  sp  sp  sp  sp  sp
0000260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000300  sp  sp  sp  sp  sp  sp   R   U   N   T   I   M   E  sp   -  sp
0000320   L   I   N   A   G   E  sp   T   E   S   T  sp  sp  sp  sp  sp
0000340  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000360  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl   F   P   R   I
0000400   N   T   3   B  sp   -  sp   T   E   S   T  sp   F   O   R  sp
0000420   T   H   E  sp   W   R   I   T   E  sp   V   E   R   B  sp   W
0000440   I   T   H  sp   L   I   N   A   G   E  sp   O   P   T   I   O
0000460   N  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl   D
0000520   A   T   E   :  sp  sp  sp   /  sp  sp   /  sp  sp  sp  sp  sp
0000540   R   U   N   -   T   I   M   E   :  sp  sp  sp  sp   :  sp  sp
0000560   :  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000600  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000620  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0000640  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl
*
0000700  nl  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000720  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0000740   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0000760   H   E   A   D   I   N   G  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001000  sp   P   A   G   E  sp  sp   1  sp  sp  sp  sp  sp  sp  sp  sp
0001020  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0001040   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0001060   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp
0001100  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001140  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001160   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp
0001200   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp
0001220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001260  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp
0001300  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T
0001320   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp
0001340  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001400  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp
0001420  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E
0001440   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N
0001460   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp
0001540  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E
0001560   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L
0001600   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001620  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp
0001660  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0001700   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L
0001720  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0002000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R
0002020   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A
0002040   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002120  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S
0002140  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E
0002160   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp
0002200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002240  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0002260   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0002300   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp
0002320  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002360  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002400   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp
0002420   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp
0002440  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002500  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp
0002520  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T
0002540   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp
0002560  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002620  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp
0002640  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E
0002660   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N
0002700   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002720  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp
0002760  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E
0003000   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L
0003020   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003040  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp
0003100  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0003120   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L
0003140  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0003220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R
0003240   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A
0003260   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003300  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003340  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S
0003360  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E
0003400   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp
0003420  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003460  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0003500   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0003520   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp
0003540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003600  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003620   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp
0003640   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp
0003660  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003720  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp
0003740  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T
0003760   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp
0004000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004040  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl  sp  sp  sp  sp
0004060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004120  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E
0004140   N   T   S  sp   A  sp   F   O   O   T   I   N   G  sp  sp  sp
0004160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl
0004200  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  sp
0004220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004240  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp
0004260   R   E   P   R   E   S   E   N   T   S  sp   A  sp   H   E   A
0004300   D   I   N   G  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   P   A
0004320   G   E  sp  sp   2  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0004340  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp
0004360   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T
0004400   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp
0004420  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004460  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I
0004500   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D
0004520   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp
0004540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004600  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T
0004620   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A
0004640  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp
0004660  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004720  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004740  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S
0004760  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp
0005000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0005040  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp
0005060  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N
0005100   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E
0005120  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0005160  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp
0005200  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S
0005220   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I
0005240   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005300  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp
0005320  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R
0005340   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp
0005360   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005420  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp
0005440  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E
0005460   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I
0005500   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0005560  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp
0005600   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T
0005620   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp
0005640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0005700  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I
0005720   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D
0005740   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp
0005760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006020  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T
0006040   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A
0006060  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp
0006100  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006140  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006160  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S
0006200  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp
0006220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006260  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp
0006300  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N
0006320   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E
0006340  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006400  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp
0006420  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S
0006440   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I
0006460   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp
0006540  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R
0006560   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp
0006600   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006620  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp
0006660  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E
0006700   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I
0006720   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0006760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0007000  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp
0007020   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T
0007040   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp
0007060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0007120  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I
0007140   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D
0007160   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp
0007200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0007240  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T
0007260   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A
0007300  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp
0007320  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0007360  sp  sp  sp  sp  sp  cr  nl  nl  nl  sp  sp  sp  sp  sp  sp  sp
0007400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0007440  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S
0007460  sp   A  sp   F   O   O   T   I   N   G  sp  sp  sp  sp  sp  sp
0007500  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl  nl  nl  nl
0007520  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  sp  sp  sp  sp
0007540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0007560  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0007600   R   E   S   E   N   T   S  sp   A  sp   H   E   A   D   I   N
0007620   G  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   P   A   G   E  sp
0007640  sp   3  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp
0007660  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0007700   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L
0007720  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0007740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0007760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0010000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R
0010020   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A
0010040   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp
0010060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0010120  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S
0010140  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E
0010160   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp
0010200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0010240  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0010260   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0010300   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp
0010320  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0010360  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0010400   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp
0010420   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp
0010440  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0010500  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp
0010520  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T
0010540   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp
0010560  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0010620  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp
0010640  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E
0010660   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N
0010700   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0010720  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0010740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp
0010760  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E
0011000   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L
0011020   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011040  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp
0011100  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0011120   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L
0011140  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0011220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R
0011240   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A
0011260   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011300  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0011340  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S
0011360  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E
0011400   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp
0011420  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0011460  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0011500   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0011520   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp
0011540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0011600  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0011620   T   H   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp
0011640   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp  sp  sp
0011660  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0011720  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp
0011740  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E   N   T
0011760   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N   E  sp
0012000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0012040  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp  sp  sp
0012060  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S   E
0012100   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L   I   N
0012120   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012140  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp  sp  sp
0012200  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E
0012220   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L  sp   L
0012240   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012300  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl  sp  sp
0012320  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P
0012340   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A   I   L
0012360  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012420  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0012440  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S  sp   R
0012460   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E   T   A
0012500   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0012560  cr  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H   I   S
0012600  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp   D   E
0012620   T   A   I   L  sp   L   I   N   E  sp  sp  sp  sp  sp  sp  sp
0012640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0012700  sp  sp  cr  nl  nl  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012720  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0012740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   T   H
0012760   I   S  sp   R   E   P   R   E   S   E   N   T   S  sp   A  sp
0013000   F   O   O   T   I   N   G  sp  sp  sp  sp  sp  sp  sp  sp  sp
0013020  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl  nl  nl  nl  nl  nl  nl
0013040  nl  nl  nl  nl  nl  nl  nl  nl  nl  sp  sp  sp  sp  sp  sp  sp
0013060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0013100  sp  sp  sp  sp  sp   T   H   I   S  sp   R   E   P   R   E   S
0013120   E   N   T   S  sp   A  sp   H   E   A   D   I   N   G  sp  sp
0013140  sp  sp  sp  sp  sp  sp  sp  sp   P   A   G   E  sp  sp   4  sp
0013160  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0013172
])

AT_CLEANUP

AT_SETUP([LINAGE: II])

AT_DATA([input.txt], 
[       IDENTIFICATION DIVISION.
       PROGRAM-ID. MINIPROG.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. LINUX.
       OBJECT-COMPUTER. LINUX.
       SPECIAL-NAMES.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT PRINTFILE ASSIGN TO "XXRXWXX"
       FILE STATUS RXWSTAT.
       DATA DIVISION.
       FILE SECTION.
       FD PRINTFILE.
       01 PRINTREC PIC X(132).
       WORKING-STORAGE SECTION.
       01 RXWSTAT PIC XX.
       PROCEDURE DIVISION.
       A00-MAIN SECTION.
       001-MAIN-PROCEDURE.
       OPEN INPUT PRINTFILE.
       DISPLAY "File Status: " RXWSTAT.
       DISPLAY "EXCEPTION-FILE: " FUNCTION EXCEPTION-FILE.
       DISPLAY "Return Length: "
           FUNCTION LENGTH (FUNCTION EXCEPTION-FILE).
       DISPLAY "EXCEPTION-STATUS: " FUNCTION EXCEPTION-STATUS.
       DISPLAY "EXCEPTION-STATEMENT: " FUNCTION EXCEPTION-STATEMENT.
       STRING "TOOLONG" DELIMITED SIZE INTO RXWSTAT.
       DISPLAY "EXCEPTION-STATUS: " FUNCTION EXCEPTION-STATUS.
       DISPLAY "EXCEPTION-STATEMENT: " FUNCTION EXCEPTION-STATEMENT.
       DISPLAY "EXCEPTION-LOCATION: " FUNCTION EXCEPTION-LOCATION.       
       STOP RUN.

])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           select optional data-file assign to file-name
               organization is line sequential
               file status is data-file-status.
           select mini-report assign to "mini-report".

       DATA DIVISION.
       FILE SECTION.
       FD  data-file.
       01  data-record.
           88 endofdata        value high-values.
           02 data-line        pic x(80).
       FD  mini-report
           linage is 16 lines
               with footing at 15
               lines at top 2
               lines at bottom 2.
       01  report-line         pic x(80).

       WORKING-STORAGE SECTION.
       01  command-arguments   pic x(1024).
       01  file-name           pic x(160).
       01  data-file-status    pic 99.
       01  lc                  pic 99.
       01  report-line-blank.
           02 filler           pic x(18) value all "*".
           02 filler           pic x(05) value spaces.
           02 filler           pic x(34)
               VALUE "THIS PAGE INTENTIONALLY LEFT BLANK".
           02 filler           pic x(05) value spaces.
           02 filler           pic x(18) value all "*".
       01  report-line-data.
           02 body-tag         pic 9(6).
           02 line-3           pic x(74).
       01  report-line-header.
           02 filler           pic x(6) VALUE "PAGE: ".
           02 page-no          pic 9999.
           02 filler           pic x(24).
           02 filler           pic x(5) VALUE " LC: ".
           02 header-tag       pic 9(6).
           02 filler           pic x(23).
           02 filler           pic x(6) VALUE "DATE: ".
           02 page-date        pic x(6).

       01  page-count          pic 9999.

       PROCEDURE DIVISION.

       accept command-arguments from command-line end-accept.
       string
           command-arguments delimited by space
           into file-name
       end-string.
       if file-name equal spaces
           move "input.txt" to file-name
       end-if.

       open input data-file.
       read data-file
           at end
               display "File: " file-name " open error"
               go to early-exit
       end-read.

       open output mini-report.

       write report-line
           from report-line-blank
       end-write.

       move 1 to page-count.
       move page-count to page-no.
       write report-line
           from report-line-header
           after advancing page
       end-write.

       perform readwrite-loop until endofdata.
       close mini-report.
       early-exit.
       close data-file.
       exit program.
       stop run.

      ****************************************************************
       readwrite-loop.
       move data-record to report-line-data
       move linage-counter to body-tag
       write report-line from report-line-data
           end-of-page
               add 1 to page-count end-add
               move page-count to page-no
               move linage-counter to header-tag
               write report-line from report-line-header
                   after advancing page
               end-write
       end-write
       read data-file
           at end set endofdata to true
       end-read
       .
])

AT_CHECK([${COMPILE} -o prog -w prog.cob ], [0])
AT_CHECK([./prog], [0])
AT_CHECK([od -a mini-report], [0], 
[0000000  nl  nl  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000020  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000120  sp  sp  cr  nl   *   *   *   *   *   *   *   *   *   *   *   *
0000140   *   *   *   *   *   *  sp  sp  sp  sp  sp   T   H   I   S  sp
0000160   P   A   G   E  sp   I   N   T   E   N   T   I   O   N   A   L
0000200   L   Y  sp   L   E   F   T  sp   B   L   A   N   K  sp  sp  sp
0000220  sp  sp   *   *   *   *   *   *   *   *   *   *   *   *   *   *
0000240   *   *   *   *  cr  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl  nl
0000260  nl  nl  nl  nl  nl  nl  nl  nl   P   A   G   E   :  sp   0   0
0000300   0   1  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000320  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   L   C   :  sp   0
0000340   0   0   0   0   0  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000360  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   D   A   T   E
0000400   :  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   1
0000420  sp   I   D   E   N   T   I   F   I   C   A   T   I   O   N  sp
0000440   D   I   V   I   S   I   O   N   .  sp  sp  sp  sp  sp  sp  sp
0000460  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0
0000540   0   2  sp   P   R   O   G   R   A   M   -   I   D   .  sp   M
0000560   I   N   I   P   R   O   G   .  sp  sp  sp  sp  sp  sp  sp  sp
0000600  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0
0000660   0   0   0   3  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0000700  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0000760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0001000   0   0   0   0   0   4  sp   E   N   V   I   R   O   N   M   E
0001020   N   T  sp   D   I   V   I   S   I   O   N   .  sp  sp  sp  sp
0001040  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001120  cr  nl   0   0   0   0   0   5  sp   C   O   N   F   I   G   U
0001140   R   A   T   I   O   N  sp   S   E   C   T   I   O   N   .  sp
0001160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001240  sp  sp  cr  nl   0   0   0   0   0   6  sp   S   O   U   R   C
0001260   E   -   C   O   M   P   U   T   E   R   .  sp   L   I   N   U
0001300   X   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001320  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001360  sp  sp  sp  sp  cr  nl   0   0   0   0   0   7  sp   O   B   J
0001400   E   C   T   -   C   O   M   P   U   T   E   R   .  sp   L   I
0001420   N   U   X   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001440  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001500  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   8  sp   S
0001520   P   E   C   I   A   L   -   N   A   M   E   S   .  sp  sp  sp
0001540  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001620  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   9
0001640  sp   I   N   P   U   T   -   O   U   T   P   U   T  sp   S   E
0001660   C   T   I   O   N   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0001700  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0001740  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0
0001760   1   0  sp   F   I   L   E   -   C   O   N   T   R   O   L   .
0002000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002060  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0
0002100   0   0   1   1  sp   S   E   L   E   C   T  sp   P   R   I   N
0002120   T   F   I   L   E  sp   A   S   S   I   G   N  sp   T   O  sp
0002140   "   X   X   R   X   W   X   X   "  sp  sp  sp  sp  sp  sp  sp
0002160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002200  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl
0002220   0   0   0   0   1   2  sp   F   I   L   E  sp   S   T   A   T
0002240   U   S  sp   R   X   W   S   T   A   T   .  sp  sp  sp  sp  sp
0002260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002340  cr  nl   0   0   0   0   1   3  sp   D   A   T   A  sp   D   I
0002360   V   I   S   I   O   N   .  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002460  sp  sp  cr  nl   0   0   0   0   1   4  sp   F   I   L   E  sp
0002500   S   E   C   T   I   O   N   .  sp  sp  sp  sp  sp  sp  sp  sp
0002520  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0002600  sp  sp  sp  sp  cr  nl  nl  nl  nl  nl  nl   P   A   G   E   :
0002620  sp   0   0   0   2  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0002640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   L   C
0002660   :  sp   0   0   0   0   1   5  sp  sp  sp  sp  sp  sp  sp  sp
0002700  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp   D
0002720   A   T   E   :  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0
0002740   0   0   1  sp   F   D  sp   P   R   I   N   T   F   I   L   E
0002760   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003000  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003040  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0
0003060   0   0   0   0   2  sp   0   1  sp   P   R   I   N   T   R   E
0003100   C  sp   P   I   C  sp   X   (   1   3   2   )   .  sp  sp  sp
0003120  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0003200  nl   0   0   0   0   0   3  sp   W   O   R   K   I   N   G   -
0003220   S   T   O   R   A   G   E  sp   S   E   C   T   I   O   N   .
0003240  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003320  sp  cr  nl   0   0   0   0   0   4  sp   0   1  sp   R   X   W
0003340   S   T   A   T  sp   P   I   C  sp   X   X   .  sp  sp  sp  sp
0003360  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003440  sp  sp  sp  cr  nl   0   0   0   0   0   5  sp   P   R   O   C
0003460   E   D   U   R   E  sp   D   I   V   I   S   I   O   N   .  sp
0003500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003560  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   6  sp   A   0
0003600   0   -   M   A   I   N  sp   S   E   C   T   I   O   N   .  sp
0003620  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0003700  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   7  sp
0003720   0   0   1   -   M   A   I   N   -   P   R   O   C   E   D   U
0003740   R   E   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0003760  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004020  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0
0004040   8  sp   O   P   E   N  sp   I   N   P   U   T  sp   P   R   I
0004060   N   T   F   I   L   E   .  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004100  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004140  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0
0004160   0   0   9  sp   D   I   S   P   L   A   Y  sp   "   F   i   l
0004200   e  sp   S   t   a   t   u   s   :  sp   "  sp   R   X   W   S
0004220   T   A   T   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004240  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004260  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0
0004300   0   0   0   1   0  sp   D   I   S   P   L   A   Y  sp   "   E
0004320   X   C   E   P   T   I   O   N   -   F   I   L   E   :  sp   "
0004340  sp   F   U   N   C   T   I   O   N  sp   E   X   C   E   P   T
0004360   I   O   N   -   F   I   L   E   .  sp  sp  sp  sp  sp  sp  sp
0004400  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0004420  nl   0   0   0   0   1   1  sp   D   I   S   P   L   A   Y  sp
0004440   "   R   e   t   u   r   n  sp   L   e   n   g   t   h   :  sp
0004460   "  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0004540  sp  cr  nl   0   0   0   0   1   2  sp  sp  sp  sp  sp   F   U
0004560   N   C   T   I   O   N  sp   L   E   N   G   T   H  sp   (   F
0004600   U   N   C   T   I   O   N  sp   E   X   C   E   P   T   I   O
0004620   N   -   F   I   L   E   )   .  sp  sp  sp  sp  sp  sp  sp  sp
0004640  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0004660  sp  sp  sp  cr  nl   0   0   0   0   1   3  sp   D   I   S   P
0004700   L   A   Y  sp   "   E   X   C   E   P   T   I   O   N   -   S
0004720   T   A   T   U   S   :  sp   "  sp   F   U   N   C   T   I   O
0004740   N  sp   E   X   C   E   P   T   I   O   N   -   S   T   A   T
0004760   U   S   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005000  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   1   4  sp   D   I
0005020   S   P   L   A   Y  sp   "   E   X   C   E   P   T   I   O   N
0005040   -   S   T   A   T   E   M   E   N   T   :  sp   "  sp   F   U
0005060   N   C   T   I   O   N  sp   E   X   C   E   P   T   I   O   N
0005100   -   S   T   A   T   E   M   E   N   T   .  sp  sp  sp  sp  sp
0005120  sp  sp  sp  sp  sp  sp  sp  cr  nl  nl  nl  nl  nl  nl   P   A
0005140   G   E   :  sp   0   0   0   3  sp  sp  sp  sp  sp  sp  sp  sp
0005160  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005200  sp   L   C   :  sp   0   0   0   0   1   5  sp  sp  sp  sp  sp
0005220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005240  sp  sp   D   A   T   E   :  sp  sp  sp  sp  sp  sp  sp  cr  nl
0005260   0   0   0   0   0   1  sp   S   T   R   I   N   G  sp   "   T
0005300   O   O   L   O   N   G   "  sp   D   E   L   I   M   I   T   E
0005320   D  sp   S   I   Z   E  sp   I   N   T   O  sp   R   X   W   S
0005340   T   A   T   .  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005360  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005400  cr  nl   0   0   0   0   0   2  sp   D   I   S   P   L   A   Y
0005420  sp   "   E   X   C   E   P   T   I   O   N   -   S   T   A   T
0005440   U   S   :  sp   "  sp   F   U   N   C   T   I   O   N  sp   E
0005460   X   C   E   P   T   I   O   N   -   S   T   A   T   U   S   .
0005500  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
0005520  sp  sp  cr  nl   0   0   0   0   0   3  sp   D   I   S   P   L
0005540   A   Y  sp   "   E   X   C   E   P   T   I   O   N   -   S   T
0005560   A   T   E   M   E   N   T   :  sp   "  sp   F   U   N   C   T
0005600   I   O   N  sp   E   X   C   E   P   T   I   O   N   -   S   T
0005620   A   T   E   M   E   N   T   .  sp  sp  sp  sp  sp  sp  sp  sp
0005640  sp  sp  sp  sp  cr  nl   0   0   0   0   0   4  sp   D   I   S
0005660   P   L   A   Y  sp   "   E   X   C   E   P   T   I   O   N   -
0005700   L   O   C   A   T   I   O   N   :  sp   "  sp   F   U   N   C
0005720   T   I   O   N  sp   E   X   C   E   P   T   I   O   N   -   L
0005740   O   C   A   T   I   O   N   .  sp  sp  sp  sp  sp  sp  sp  sp
0005760  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   5  sp   S
0006000   T   O   P  sp   R   U   N   .  sp  sp  sp  sp  sp  sp  sp  sp
0006020  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006100  sp  sp  sp  sp  sp  sp  sp  sp  cr  nl   0   0   0   0   0   6
0006120  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp
*
0006220  sp  sp  sp  sp  sp  sp  sp  sp  sp  sp  cr
0006233
])

AT_CLEANUP

AT_SETUP([Sort Input Procedure: no exception test])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION .
       PROGRAM-ID .   prog .
       ENVIRONMENT    DIVISION .
       CONFIGURATION  SECTION .
      *
       SOURCE-COMPUTER .  MF-UNIX .
       OBJECT-COMPUTER .  MF-UNIX .
      /
       INPUT-OUTPUT SECTION .
       FILE-CONTROL .
      *
      *************************************************                                                     
      *    FICHIER    SORTIE
      *************************************************
      *
       SELECT      FB7R-EA
                   ASSIGN    EXTERNAL  EA
                   ORGANIZATION        SEQUENTIAL
                   ACCESS MODE         SEQUENTIAL
           .
      *                                                  
      *************************************************
      *    FICHIER    ENTREE
      *************************************************
      *
       SELECT      FB4D-EF
                   ASSIGN    EXTERNAL  EF
                   ORGANIZATION        SEQUENTIAL
                   ACCESS MODE         SEQUENTIAL
           .
      * 
      *************************************************                                                      
      *    FICHIER    DE   TRI
      *************************************************
      *
           SELECT    FB7R-S1
                     ASSIGN    EXTERNAL S1 .

      *
       FILE SECTION .
      *
       FD  FB7R-EA
            RECORDING MODE IS VARIABLE
            RECORD VARYING FROM 1
           .
       01  ABDW-EA.
       03  C-ABDW-EA.
          05 TRI-CLE-BDW-EA          PIC X(10).
          05 TRI-TYPDON-BDW-EA       PIC X(3).
          05 TRI-DONNEE-BDW-EA       PIC X(414). 
      *
       01  ABDX-EA.
       03  C-ABDX-EA.
          05 TRI-CLE-BDX-EA          PIC X(10).
          05 TRI-TYPDON-BDX-EA       PIC X(3).
          05 TRI-DONNEE-BDX-EA       PIC X(1482).
      *
       01  ABDY-EA.
       03  C-ABDY-EA.
          05 TRI-CLE-BDY-EA          PIC X(10).
          05 TRI-TYPDON-BDY-EA       PIC X(3).
          05 TRI-DONNEE-BDY-EA       PIC X(78).
      *
      *================================================
       FD  FB4D-EF
            RECORDING MODE IS VARIABLE
            RECORD VARYING FROM 1
           .
      *
       01  ABI3-EF.
       03 C-ABI3-EF.
      *
      *          LONGUEUR DE L'ARTICLE = 0001
       05 LFIL-ABI3-EF                        PIC     X.
      *
       01  ABUE-EF.
       03 C-ABUE-EF.
      *
      *          LONGUEUR DE L'ARTICLE = 0052
       05 DONTRI-ABUE-EF.
         10 IDCOBEN-ABUE-EF.
           15 NO-C-NCNT-ABUE-EF.
             20 NO-C-ABUE-EF                  PIC     X(8).
             20 NCNT-ABUE-EF                  PIC     X(2).
           15 NINDASU-ABUE-EF                 PIC     X(13).
           15 DITTA-C-ABUE-EF                 PIC     9(8).
         10 BEFFCOUBEN-ABUE-EF                PIC     9(8).
       05 AINFO-ABUE-EF.
         10 NINDBEN-ABUE-EF                   PIC     X(13).
      *
      *================================================
       SD  FB7R-S1 .
      *
       01  ABDW-S1.
       03  C-ABDW-S1.
          05 TRI-CLE-BDW-S1          PIC X(10).
          05 TRI-TYPDON-BDW-S1       PIC X(3).
          05 TRI-DONNEE-BDW-S1       PIC X(414).
 

     *
       01  ABDX-S1.
       03  C-ABDX-S1.
          05 TRI-CLE-BDX-S1          PIC X(10).
          05 TRI-TYPDON-BDX-S1       PIC X(3).
          05 TRI-DONNEE-BDX-S1       PIC X(1482).
      *
       01  ABDY-S1.
       03  C-ABDY-S1.
          05 TRI-CLE-BDY-S1          PIC X(10).
          05 TRI-TYPDON-BDY-S1       PIC X(3).
          05 TRI-DONNEE-BDY-S1       PIC X(78).
      *
      *
      *************************************************
      *
      *
       WORKING-STORAGE SECTION.
      *
      *    COMPTEUR   D'ARTICLES
      *
       01  G-QACL-FB4D-EF            PIC S9(9) COMP-5 SYNC
                                                 VALUE ZEROES.
      *    INDICATEUR  DE  FIN  DE FICHIER
      *
       01  G-EEOF-FB4D-EF            PIC X(01) VALUE     SPACES .
           88 G-EOF-FB4D-EF                    VALUE     "V" .
      *
       LINKAGE SECTION.
      *
      *
       PROCEDURE DIVISION.
       PRINCIPALE SECTION.
       P00.
           OPEN OUTPUT FB4D-EF.
           Write ABUE-EF from "11111111".
           Write ABUE-EF from "22222222".
           CLOSE FB4D-EF.
           OPEN INPUT   FB4D-EF .
      * 
002310     SORT FB7R-S1 ON ASCENDING KEY TRI-CLE-BDW-S1
002320         INPUT PROCEDURE EXTRACTION
002330         GIVING FB7R-EA.
002340*
           CLOSE FB4D-EF .
      *  

      *
           STOP RUN RETURNING 0
           .
002500 PRIN00-99.
002510     EXIT.
      *
      *

       EXTRACTION SECTION.
      **************************************************************************
       EXTRACTION-10.
      *
      *  Premiere lecture

           PERFORM G-LEC-FB4D-EF.

      *
       EXTRACTION-20.
            PERFORM UNTIL G-EEOF-FB4D-EF = "V"
              PERFORM TRT2
LCIR4 *       LECTURE ENREG SUIVANT DU FICHIER MVTS
              PERFORM G-LEC-FB4D-EF
           END-PERFORM.
      *

      *                                                                        *
       EXT999.
           EXIT.
      **************************************************************************
      *                          FIN DE EXTRACTION                             *
      **************************************************************************
      *

       TRT2 SECTION.
      ************************************************************************** 
      * 
       PTYP100-00.
      *

      *-- Enreg 2  BDW
           MOVE '2222222222' TO TRI-CLE-BDW-S1.
           MOVE "BDW"        TO TRI-TYPDON-BDW-S1.
           MOVE ALL "B"      TO TRI-DONNEE-BDW-S1.
           RELEASE ABDW-S1.

      *
      *-- Enreg 1  BDW
           MOVE '1111111111' TO TRI-CLE-BDW-S1.
           MOVE "BDW"        TO TRI-TYPDON-BDW-S1.
           MOVE ALL "A"      TO TRI-DONNEE-BDW-S1.
           RELEASE ABDW-S1.

      *
      *
      *-- Enreg 4  BDX
           MOVE '4444444444' TO TRI-CLE-BDX-S1.
           MOVE "BDX"        TO TRI-TYPDON-BDX-S1.
           MOVE ALL "D"      TO TRI-DONNEE-BDX-S1.
           RELEASE ABDX-S1.

      *
      *-- Enreg 3  BDX
           MOVE '3333333333' TO TRI-CLE-BDX-S1.
           MOVE "BDX"        TO TRI-TYPDON-BDX-S1.
           MOVE ALL "C"      TO TRI-DONNEE-BDX-S1.
           RELEASE ABDX-S1.

      *
      *
      *-- Enreg 5  BWY
           MOVE '55555555553' TO TRI-CLE-BDY-S1.
           MOVE "BDY"        TO TRI-TYPDON-BDY-S1.
           MOVE ALL "E"      TO TRI-DONNEE-BDY-S1.
           RELEASE ABDY-S1.

      *
      *-- Enreg 6  BDY
           MOVE '6666666666' TO TRI-CLE-BDY-S1.
           MOVE "BDY"        TO TRI-TYPDON-BDY-S1.
           MOVE ALL "F"      TO TRI-DONNEE-BDY-S1.
           RELEASE ABDY-S1.

      *
      *
       TRT2999.
            EXIT.
      *
      **************************************************************************
      *                          FIN DE TRT2                                   *
      **************************************************************************
      *
      *
      *************************************************
      *    LECTURE SEQUENTIELLE DU FICHIER FB4D-EF
      *************************************************
      *
       G-LEC-FB4D-EF    SECTION .
       G-000-LEC-FB4D-EF .
           READ       FB4D-EF
                      AT  END
                      MOVE     "V"   TO        G-EEOF-FB4D-EF
                      GO             TO        G-999-LEC-FB4D-EF .
           ADD     1              TO   G-QACL-FB4D-EF .

      *
       G-999-LEC-FB4D-EF .
           EXIT .
])

AT_CHECK([${COMPILE} -w prog.cob ])
AT_CHECK([./prog], [0])
AT_CHECK([test -e EA], [0])

AT_CLEANUP

AT_SETUP([xdd output for FD definitions])

AT_DATA([prog.cob], [
       ID DIVISION.
       PROGRAM-ID. PROG.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       DECIMAL-POINT IS COMMA.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT F1 ASSIGN TO 'myfile.txt'.
       DATA DIVISION.
       FILE SECTION.
       FD F1.
       01 Z PIC 9.
       01 Y REDEFINES Z.
       02 B pic X.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       GOBACK.
       END PROGRAM.
])

AT_CHECK([${COMPILE} -fgen-xdd prog.cob])
AT_CHECK([./prog], [0])
AT_CHECK([cat F1.xdd], [0],
[<?xml version="1.0" encoding="US-ASCII"?>
<table name="F1" maxRecLen="1" minRecLen="1" >
<select organization="1" lsmf="1" varrec="0" >
sequential
</select>
<schema name="Z" size="1" >
<field name="Z" offset="0" size="1" type="NumUnsigned" digits="1" scale="0"  />
</schema>
<schema name="Y" size="1" >
<field name="B" offset="0" size="1" type="Alphanum"  />
</schema>
</table>
])

AT_CLEANUP

AT_SETUP([variable length zero])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       environment division.
       input-output section.
       file-control.
       select f assign to "F" file status s.
       data division.
       file section.
       fd f 
          record varying from 0 to 3 characters depending on l.
       01 o pic xxx.
       working-storage section.
       01 l pic s9(4) comp.
       01 s  pic xx.
       procedure division.
       open output f
       move "AAA" to o
       move 2 to l
       write o
       display "write " s " " l
       move 0 to l
       write o
       display "write " s " " l
       move 3 to l
       write o
       display "write " s " " l
       close f
       open input f
       read f
       display "read  " s " " l
       read f
       display "read  " s " " l
       read f
       display "read  " s " " l
       read f
       display s
       close f
       .
])

AT_CHECK([${COMPILE} -fgen-xdd prog.cob])
AT_CHECK([./prog], [0],
[write 00 +0002
write 00 +0000
write 00 +0003
read  00 +0002
read  00 +0000
read  00 +0003
10
])
AT_CHECK([cat F.xdd], [0],
[<?xml version="1.0" encoding="US-ASCII"?>
<table name="F" maxRecLen="3" minRecLen="0" >
<select organization="1" lsmf="1" varrec="1" >
sequential
</select>
<schema name="O" size="3" >
<field name="O" offset="0" size="3" type="Alphanum"  />
</schema>
</table>
])

AT_CLEANUP

AT_SETUP([MOVE ALL"X" to edited ])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 Len PIC 9(9) COMP.
       01 A PIC X(10)B(01).
       LINKAGE SECTION.
       PROCEDURE DIVISION.
        MOVE ALL "X" TO A
        DISPLAY "+" A "+".
        goback 
        EXIT.
       
])

AT_CHECK([cobc -x -save-temps -G -w -fmove-all-edited prog.cob])
AT_CHECK([./prog ], [0],
[+XXXXXXXXXX +
])

AT_CHECK([cobc -x -save-temps -G -w  prog.cob])
AT_CHECK([./prog ], [0],
[+XXXXXXXXXXX+
])

AT_CLEANUP


