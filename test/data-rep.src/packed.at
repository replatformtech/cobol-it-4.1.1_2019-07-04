### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003-2007 Keisuke Nishida
## Copyright (C) 2007 Roger While
## Copyright (C) 2008 Cobol-IT
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### PACKED-DECIMAL


# dump
AT_SETUP([PACKED-DECIMAL dump])

AT_DATA([dump.c], [
#include <stdio.h>
int dump (unsigned char *data);
int dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 10; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

AT_CHECK([${COMPILE_MODULE} dump.c])

sed -e 's/@USAGE@/PACKED-DECIMAL/' ${TEMPLATE}/numeric-dump.cob > prog.cob

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[1f202020202020202020
012f2020202020202020
123f2020202020202020
01234f20202020202020
12345f20202020202020
0123456f202020202020
1234567f202020202020
012345678f2020202020
123456789f2020202020
01234567890f20202020
12345678901f20202020
0123456789012f202020
1234567890123f202020
012345678901234f2020
123456789012345f2020
01234567890123456f20
12345678901234567f20
0123456789012345678f
1d202020202020202020
012d2020202020202020
123d2020202020202020
01234d20202020202020
12345d20202020202020
0123456d202020202020
1234567d202020202020
012345678d2020202020
123456789d2020202020
01234567890d20202020
12345678901d20202020
0123456789012d202020
1234567890123d202020
012345678901234d2020
123456789012345d2020
01234567890123456d20
12345678901234567d20
0123456789012345678d
0f202020202020202020
000f2020202020202020
000f2020202020202020
00000f20202020202020
00000f20202020202020
0000000f202020202020
0000000f202020202020
000000000f2020202020
000000000f2020202020
00000000000f20202020
00000000000f20202020
0000000000000f202020
0000000000000f202020
000000000000000f2020
000000000000000f2020
00000000000000000f20
00000000000000000f20
0000000000000000000f
0c202020202020202020
000c2020202020202020
000c2020202020202020
00000c20202020202020
00000c20202020202020
0000000c202020202020
0000000c202020202020
000000000c2020202020
000000000c2020202020
00000000000c20202020
00000000000c20202020
0000000000000c202020
0000000000000c202020
000000000000000c2020
000000000000000c2020
00000000000000000c20
00000000000000000c20
0000000000000000000c
0f202020202020202020
000f2020202020202020
000f2020202020202020
00000f20202020202020
00000f20202020202020
0000000f202020202020
0000000f202020202020
000000000f2020202020
000000000f2020202020
00000000000f20202020
00000000000f20202020
0000000000000f202020
0000000000000f202020
000000000000000f2020
000000000000000f2020
00000000000000000f20
00000000000000000f20
0000000000000000000f
0c202020202020202020
000c2020202020202020
000c2020202020202020
00000c20202020202020
00000c20202020202020
0000000c202020202020
0000000c202020202020
000000000c2020202020
000000000c2020202020
00000000000c20202020
00000000000c20202020
0000000000000c202020
0000000000000c202020
000000000000000c2020
000000000000000c2020
00000000000000000c20
00000000000000000c20
0000000000000000000c
])

AT_CLEANUP


# display
AT_SETUP([PACKED-DECIMAL display])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           MOVE    0 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE   99 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE    0 TO X-S99.  DISPLAY X-S99
           END-DISPLAY.
           MOVE   -1 TO X-S99.  DISPLAY X-S99
           END-DISPLAY.
           MOVE    0 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE  123 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE    0 TO X-S999. DISPLAY X-S999
           END-DISPLAY.
           MOVE -123 TO X-S999. DISPLAY X-S999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00
99
+00
-01
000
123
+000
-123
])

AT_CLEANUP


# move
AT_SETUP([PACKED-DECIMAL move])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       01 C-P1234       PIC 9999  VALUE 1234.
       01 C-N1234       PIC S9999 VALUE -1234.
       PROCEDURE        DIVISION.
           MOVE C-P1234 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE C-P1234 TO X-S99.  DISPLAY X-S99
           END-DISPLAY.
           MOVE C-P1234 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE C-P1234 TO X-S999. DISPLAY X-S999
           END-DISPLAY.
           MOVE C-N1234 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE C-N1234 TO X-S99.  DISPLAY X-S99
           END-DISPLAY.
           MOVE C-N1234 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE C-N1234 TO X-S999. DISPLAY X-S999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[34
+34
234
+234
34
-34
234
-234
])

AT_CLEANUP


# initialize
AT_SETUP([PACKED-DECIMAL arithmetic (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE PACKED-DECIMAL.
       01 X-S99         PIC S99  USAGE PACKED-DECIMAL.
       01 X-999         PIC 999  USAGE PACKED-DECIMAL.
       01 X-S999        PIC S999 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           INITIALIZE X-99.   DISPLAY X-99
           END-DISPLAY.
           INITIALIZE X-S99.  DISPLAY X-S99
           END-DISPLAY.
           INITIALIZE X-999.  DISPLAY X-999
           END-DISPLAY.
           INITIALIZE X-S999. DISPLAY X-S999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00
+00
000
+000
])

AT_CLEANUP


# arithmetic
AT_SETUP([PACKED-DECIMAL arithmetic (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 99 USAGE PACKED-DECIMAL VALUE 0.
       01 Y             PIC 99 USAGE PACKED-DECIMAL VALUE 9.
       PROCEDURE        DIVISION.
           COMPUTE X = 1
           END-COMPUTE.     DISPLAY X
           END-DISPLAY.
           COMPUTE X = Y
           END-COMPUTE.     DISPLAY X
           END-DISPLAY.
           COMPUTE X = X + Y
           END-COMPUTE. DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[01
09
18
])

AT_CLEANUP


# numeric test
AT_SETUP([PACKED-DECIMAL numeric test])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X-2         PIC X(2).
         02 N-2         REDEFINES X-2 PIC 99 USAGE PACKED-DECIMAL.
         02 N-S2        REDEFINES X-2 PIC S99 USAGE PACKED-DECIMAL.
       PROCEDURE        DIVISION.
           MOVE X"0000" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           MOVE X"000c" TO X-2.
           IF N-2 NOT IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           MOVE X"000d" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           MOVE X"000f" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           MOVE X"1234" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           MOVE X"999f" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           MOVE X"ffff" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           IF N-S2 IS NUMERIC
            DISPLAY "NG"
            END-DISPLAY
           ELSE
            DISPLAY "OK"
            END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
])

AT_CLEANUP

AT_SETUP([PACKED-DECIMAL: ROUND ])

AT_DATA([prog.cob], [
       IDENTIFICATION               DIVISION.
       PROGRAM-ID.                  prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 Interest pic 9(8)v9(17) USAGE PACKED-DECIMAL.
       01 BaseInt  pic 9(1)v9(17) USAGE PACKED-DECIMAL.
       01 Years    pic 9(2) USAGE PACKED-DECIMAL.
       01 Amount-1 pic 9(9)v9(9) USAGE PACKED-DECIMAL.
       01 Amount-2 pic 9(9)v9(8) USAGE PACKED-DECIMAL.
       01 Amount-3 pic 9(9)v9(7) USAGE PACKED-DECIMAL.
       01 Amount-4 pic 9(9)v9(6) USAGE PACKED-DECIMAL.
       01 Amount-5 pic 9(9)v9(5) USAGE PACKED-DECIMAL.
       01 Amount-6 pic 9(9)v9(4) USAGE PACKED-DECIMAL.
       01 Amount-7 pic 9(9)v9(3) USAGE PACKED-DECIMAL.
       01 Amount-8 pic 9(9)v9(2) USAGE PACKED-DECIMAL.
       01 Total-1  pic zzzzzzzz9.999999999 .
       01 Total-2  pic zzzzzzzz9.99999999 .
       01 Total-3  pic zzzzzzzz9.9999999 .
       01 Total-4  pic zzzzzzzz9.999999 .
       01 Total-5  pic zzzzzzzz9.99999 .
       01 Total-6  pic zzzzzzzz9.9999 .
       01 Total-7  pic zzzzzzzz9.999 .
       01 Total-8  pic zzzzzzzz9.99 .
       01 keystroke pic x.
       PROCEDURE DIVISION.
       MAIN-LOGIC.
	   MOVE    10 TO Years.
           MOVE    4.367577991133 TO BaseInt Interest
	   PERFORM 5 TIMES
               COMPUTE Interest = Interest * BaseInt
           END-PERFORM
	   PERFORM ANNO 5 TIMES
           STOP    RUN.

       ANNO SECTION.
           COMPUTE Interest = Interest * BaseInt
           ADD 0 TO Interest GIVING Amount-1 ROUNDED
           DISPLAY Amount-1
           ADD 0 TO Amount-1 GIVING Amount-2 ROUNDED
           MOVE Amount-2 TO Total-2
           DISPLAY Total-2
           ADD 0 TO Amount-2 GIVING Amount-3 ROUNDED
           MOVE Amount-3 TO Total-3
           DISPLAY Total-3
           ADD 0 TO Amount-3 GIVING Amount-4 ROUNDED
           MOVE Amount-4 TO Total-4
           DISPLAY Total-4
           ADD 0 TO Amount-4 GIVING Amount-5 ROUNDED
           MOVE Amount-5 TO Total-5
           DISPLAY Total-5
           ADD 0 TO Amount-5 GIVING Amount-6 ROUNDED
           MOVE Amount-6 TO Total-6
           DISPLAY Total-6
           ADD 0 TO Amount-6 GIVING Amount-7 ROUNDED
           MOVE Amount-7 TO Total-7
           DISPLAY Total-7
           ADD 0 TO Amount-7 GIVING Amount-8 ROUNDED
           MOVE Amount-8 TO Total-8
           DISPLAY Total-8
           EXIT SECTION.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[000030316.892371664
    30316.89237166
    30316.8923717
    30316.892372
    30316.89237
    30316.8924
    30316.892
    30316.89
000132411.391882028
   132411.39188203
   132411.3918820
   132411.391882
   132411.39188
   132411.3919
   132411.392
   132411.39
000578317.080959231
   578317.08095923
   578317.0809592
   578317.080959
   578317.08096
   578317.0810
   578317.081
   578317.08
002525844.954693817
  2525844.95469382
  2525844.9546938
  2525844.954694
  2525844.95469
  2525844.9547
  2525844.955
  2525844.96
011031824.833135043
 11031824.83313504
 11031824.8331350
 11031824.833135
 11031824.83314
 11031824.8331
 11031824.833
 11031824.83
])

AT_CLEANUP

# dump
AT_SETUP([COMP-6 dump])

AT_DATA([dump.c], [
#include <stdio.h>
int dump (unsigned char *data);
int dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 10; i++)
    printf ("%02x", data[[i]]);
  puts ("");
  return 0;
}
])

AT_CHECK([${COMPILE_MODULE} dump.c])

sed -e 's/@USAGE@/COMP-6/' ${TEMPLATE}/numeric-ns-dump.cob > prog.cob

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[01202020202020202020
12202020202020202020
01232020202020202020
12342020202020202020
01234520202020202020
12345620202020202020
01234567202020202020
12345678202020202020
01234567892020202020
12345678902020202020
01234567890120202020
12345678901220202020
01234567890123202020
12345678901234202020
01234567890123452020
12345678901234562020
01234567890123456720
12345678901234567820
00202020202020202020
00202020202020202020
00002020202020202020
00002020202020202020
00000020202020202020
00000020202020202020
00000000202020202020
00000000202020202020
00000000002020202020
00000000002020202020
00000000000020202020
00000000000020202020
00000000000000202020
00000000000000202020
00000000000000002020
00000000000000002020
00000000000000000020
00000000000000000020
00202020202020202020
00202020202020202020
00002020202020202020
00002020202020202020
00000020202020202020
00000020202020202020
00000000202020202020
00000000202020202020
00000000002020202020
00000000002020202020
00000000000020202020
00000000000020202020
00000000000000202020
00000000000000202020
00000000000000002020
00000000000000002020
00000000000000000020
00000000000000000020
])

AT_CLEANUP


# display
AT_SETUP([COMP-6 display])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       PROCEDURE        DIVISION.
           MOVE    0 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE   99 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE    0 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE  123 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00
99
000
123
])

AT_CLEANUP


# move
AT_SETUP([COMP-6 move])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       01 C-P1234       PIC 9999  VALUE 1234.
       01 C-N1234       PIC S9999 VALUE -1234.
       PROCEDURE        DIVISION.
           MOVE C-P1234 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE C-P1234 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           MOVE C-N1234 TO X-99.   DISPLAY X-99
           END-DISPLAY.
           MOVE C-N1234 TO X-999.  DISPLAY X-999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} -w prog.cob])
AT_CHECK([./prog], [0],
[34
234
34
234
])

AT_CLEANUP


# initialize
AT_SETUP([COMP-6 arithmetic (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-99          PIC 99   USAGE COMP-6.
       01 X-999         PIC 999  USAGE COMP-6.
       PROCEDURE        DIVISION.
           INITIALIZE X-99.   DISPLAY X-99
           END-DISPLAY.
           INITIALIZE X-999.  DISPLAY X-999
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[00
000
])

AT_CLEANUP


# arithmetic
AT_SETUP([COMP-6 arithmetic (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 99 USAGE COMP-6 VALUE 0.
       01 Y             PIC 99 USAGE COMP-6 VALUE 9.
       PROCEDURE        DIVISION.
           COMPUTE X = 1
           END-COMPUTE.     DISPLAY X
           END-DISPLAY.
           COMPUTE X = Y
           END-COMPUTE.     DISPLAY X
           END-DISPLAY.
           COMPUTE X = X + Y
           END-COMPUTE. DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[01
09
18
])

AT_CLEANUP


# numeric test
AT_SETUP([COMP-6 numeric test])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X-2         PIC X(2).
         02 N-2         REDEFINES X-2 PIC 9999 USAGE COMP-6.
       PROCEDURE        DIVISION.
           MOVE X"0000" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           MOVE X"000c" TO X-2.
           IF N-2  IS NUMERIC
            DISPLAY "OK"
            END-DISPLAY
           ELSE
            DISPLAY "NG"
            END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0],
[OK
NG
])

AT_CLEANUP

AT_SETUP([COMP-6: ROUND ])

AT_DATA([prog.cob], [
       IDENTIFICATION               DIVISION.
       PROGRAM-ID.                  prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 Interest pic 9(8)v9(17) USAGE COMP-6.
       01 BaseInt  pic 9(1)v9(17) USAGE COMP-6.
       01 Years    pic 9(2) USAGE COMP-6.
       01 Amount-1 pic 9(9)v9(9) USAGE COMP-6.
       01 Amount-2 pic 9(9)v9(8) USAGE COMP-6.
       01 Amount-3 pic 9(9)v9(7) USAGE COMP-6.
       01 Amount-4 pic 9(9)v9(6) USAGE COMP-6.
       01 Amount-5 pic 9(9)v9(5) USAGE COMP-6.
       01 Amount-6 pic 9(9)v9(4) USAGE COMP-6.
       01 Amount-7 pic 9(9)v9(3) USAGE COMP-6.
       01 Amount-8 pic 9(9)v9(2) USAGE COMP-6.
       01 Total-1  pic zzzzzzzz9.999999999 .
       01 Total-2  pic zzzzzzzz9.99999999 .
       01 Total-3  pic zzzzzzzz9.9999999 .
       01 Total-4  pic zzzzzzzz9.999999 .
       01 Total-5  pic zzzzzzzz9.99999 .
       01 Total-6  pic zzzzzzzz9.9999 .
       01 Total-7  pic zzzzzzzz9.999 .
       01 Total-8  pic zzzzzzzz9.99 .
       01 keystroke pic x.
       PROCEDURE DIVISION.
       MAIN-LOGIC.
	   MOVE    10 TO Years.
           MOVE    4.367577991133 TO BaseInt Interest
	   PERFORM 5 TIMES
               COMPUTE Interest = Interest * BaseInt
           END-PERFORM
	   PERFORM ANNO 5 TIMES
           STOP    RUN.

       ANNO SECTION.
           COMPUTE Interest = Interest * BaseInt
           ADD 0 TO Interest GIVING Amount-1 ROUNDED
           DISPLAY Amount-1
           ADD 0 TO Amount-1 GIVING Amount-2 ROUNDED
           MOVE Amount-2 TO Total-2
           DISPLAY Total-2
           ADD 0 TO Amount-2 GIVING Amount-3 ROUNDED
           MOVE Amount-3 TO Total-3
           DISPLAY Total-3
           ADD 0 TO Amount-3 GIVING Amount-4 ROUNDED
           MOVE Amount-4 TO Total-4
           DISPLAY Total-4
           ADD 0 TO Amount-4 GIVING Amount-5 ROUNDED
           MOVE Amount-5 TO Total-5
           DISPLAY Total-5
           ADD 0 TO Amount-5 GIVING Amount-6 ROUNDED
           MOVE Amount-6 TO Total-6
           DISPLAY Total-6
           ADD 0 TO Amount-6 GIVING Amount-7 ROUNDED
           MOVE Amount-7 TO Total-7
           DISPLAY Total-7
           ADD 0 TO Amount-7 GIVING Amount-8 ROUNDED
           MOVE Amount-8 TO Total-8
           DISPLAY Total-8
           EXIT SECTION.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[000030316.892371664
    30316.89237166
    30316.8923717
    30316.892372
    30316.89237
    30316.8924
    30316.892
    30316.89
000132411.391882028
   132411.39188203
   132411.3918820
   132411.391882
   132411.39188
   132411.3919
   132411.392
   132411.39
000578317.080959231
   578317.08095923
   578317.0809592
   578317.080959
   578317.08096
   578317.0810
   578317.081
   578317.08
002525844.954693817
  2525844.95469382
  2525844.9546938
  2525844.954694
  2525844.95469
  2525844.9547
  2525844.955
  2525844.96
011031824.833135043
 11031824.83313504
 11031824.8331350
 11031824.833135
 11031824.83314
 11031824.8331
 11031824.833
 11031824.83
])

AT_CLEANUP
